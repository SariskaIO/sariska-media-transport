{"version":3,"file":"sariska-media-transport.min.js","mappings":"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","sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/./JitsiConferenceErrors.ts","webpack://SariskaMediaTransport/./JitsiConferenceEvents.ts","webpack://SariskaMediaTransport/./modules/statistics/constants.js","webpack://SariskaMediaTransport/./JitsiTrackErrors.ts","webpack://SariskaMediaTransport/./JitsiTrackError.js","webpack://SariskaMediaTransport/./service/statistics/AnalyticsEvents.ts","webpack://SariskaMediaTransport/./service/statistics/Events.ts","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./modules/browser/index.js","webpack://SariskaMediaTransport/./modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./modules/util/MathUtil.js","webpack://SariskaMediaTransport/./modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./service/RTC/MediaType.ts","webpack://SariskaMediaTransport/./modules/flags/FeatureFlags.js","webpack://SariskaMediaTransport/./modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./modules/statistics/statistics.js","webpack://SariskaMediaTransport/./JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./JitsiTrackEvents.ts","webpack://SariskaMediaTransport/./modules/connectivity/ParticipantConnectionStatus.js","webpack://SariskaMediaTransport/./JitsiParticipant.js","webpack://SariskaMediaTransport/./JitsiConnectionEvents.ts","webpack://SariskaMediaTransport/./JitsiConnectionErrors.ts","webpack://SariskaMediaTransport/./modules/util/Deferred.js","webpack://SariskaMediaTransport/./modules/util/Listenable.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./modules/e2ee/KeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://SariskaMediaTransport/./node_modules/uuid/wrapper.mjs","webpack://SariskaMediaTransport/./modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./modules/e2ee/ManagedKeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./modules/util/Retry.js","webpack://SariskaMediaTransport/./modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/./JitsiTranscriptionStatus.ts","webpack://SariskaMediaTransport/./modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./modules/xmpp/BreakoutRooms.js","webpack://SariskaMediaTransport/./modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./modules/settings/Settings.js","webpack://SariskaMediaTransport/./modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleHelperFunctions.js","webpack://SariskaMediaTransport/./service/RTC/MediaDirection.ts","webpack://SariskaMediaTransport/./modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./modules/sdp/SDP.js","webpack://SariskaMediaTransport/./modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./node_modules/async/dist/async.mjs","webpack://SariskaMediaTransport/./modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionState.ts","webpack://SariskaMediaTransport/./modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./modules/xmpp/MediaSessionEvents.ts","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://SariskaMediaTransport/./service/RTC/SignalingEvents.ts","webpack://SariskaMediaTransport/./service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./modules/sdp/SdpSimulcast.ts","webpack://SariskaMediaTransport/./modules/connectivity/TrackStreamingStatus.ts","webpack://SariskaMediaTransport/./modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./modules/RTC/RTC.js","webpack://SariskaMediaTransport/./service/connectivity/ConnectionQualityEvents.ts","webpack://SariskaMediaTransport/./modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./modules/detection/DetectionEvents.ts","webpack://SariskaMediaTransport/./modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./service/e2eping/E2ePingEvents.ts","webpack://SariskaMediaTransport/./modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./modules/transcription/trackRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/word.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://SariskaMediaTransport/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./JitsiConference.js","webpack://SariskaMediaTransport/./modules/util/parseURLParams.js","webpack://SariskaMediaTransport/./config/index.js","webpack://SariskaMediaTransport/./JitsiConnection.js","webpack://SariskaMediaTransport/./JitsiMediaDevicesEvents.ts","webpack://SariskaMediaTransport/./JitsiMediaDevices.js","webpack://SariskaMediaTransport/./modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./modules/proxyconnection/constants.ts","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/JitsiStreamPresenterEffect.js","webpack://SariskaMediaTransport/./node_modules/rnnoise-wasm/dist/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./SariskaMediaTransport.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./modules/util/createAnalyticsEvent.js","webpack://SariskaMediaTransport/./index.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite-simd.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite.js","webpack://SariskaMediaTransport/./modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./modules/util/StringUtils.js","webpack://SariskaMediaTransport/./modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/Logger.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/../src/strophe.disco.js","webpack://SariskaMediaTransport/../src/strophe.stream-management.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/index.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/md5-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/rng-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/sha1-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v1.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v3.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v35.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v4.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v5.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://SariskaMediaTransport/./service/RTC/BridgeVideoType.js","webpack://SariskaMediaTransport/./service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./service/RTC/RTCEvents.ts","webpack://SariskaMediaTransport/./service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./service/RTC/VideoType.ts","webpack://SariskaMediaTransport/./service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./service/statistics/constants.ts","webpack://SariskaMediaTransport/./service/xmpp/XMPPEvents.ts","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/webpack/runtime/amd options","webpack://SariskaMediaTransport/webpack/runtime/compat get default export","webpack://SariskaMediaTransport/webpack/runtime/define property getters","webpack://SariskaMediaTransport/webpack/runtime/global","webpack://SariskaMediaTransport/webpack/runtime/hasOwnProperty shorthand","webpack://SariskaMediaTransport/webpack/runtime/make namespace object","webpack://SariskaMediaTransport/webpack/runtime/node module decorator","webpack://SariskaMediaTransport/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(self, function() {\nreturn ","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum JitsiConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Event fired when JVB sends notification about interrupted/restored user's\n     * ICE connection status or we detect local problem with the video track.\n     * First argument is the ID of the participant and\n     * the seconds is a string indicating if the connection is currently\n     * - active - the connection is active\n     * - inactive - the connection is inactive, was intentionally interrupted by\n     * the bridge\n     * - interrupted - a network problem occurred\n     * - restoring - the connection was inactive and is restoring now\n     *\n     * The current status value can be obtained by calling\n     * JitsiParticipant.getConnectionStatus().\n     */\n    PARTICIPANT_CONN_STATUS_CHANGED = 'conference.participant_conn_status_changed',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * A new face landmark object is added for a participant\n     */\n    FACE_LANDMARK_ADDED = 'conference.face_landmark.added',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated',\n\n    SUBTITLES_RECEIVED = 'conference.subtitles.received',\n\n    ANALYTICS_EVENT_RECEIVED = 'analytics.event.received',\n\n    TRACK_UPDATED = 'conference.track.updated'\n\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTICIPANT_CONN_STATUS_CHANGED = JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = JitsiConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const FACE_LANDMARK_ADDED = JitsiConferenceEvents.FACE_LANDMARK_ADDED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\nexport const SUBTITLES_RECEIVED = JitsiConferenceEvents.SUBTITLES_RECEIVED;\nexport const ANALYTICS_EVENT_RECEIVED = JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED;\nexport const TRACK_UPDATED = JitsiConferenceEvents.TRACK_UPDATED;","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\nexport const CHROME = 'chrome';\nexport const OPERA = 'opera';\nexport const FIREFOX = 'firefox';\nexport const INTERNET_EXPLORER = 'iexplorer';\nexport const SAFARI = 'safari';\nexport const NWJS = 'nwjs';\nexport const ELECTRON = 'electron';\nexport const REACT_NATIVE = 'react-native';\nexport const UNKNOWN = 'unknown';","import Bowser from 'bowser';\nimport { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN } from './browsers';\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\n\nconst bowserNameToJitsiName = {\n  'Chrome': CHROME,\n  'Chromium': CHROME,\n  'Opera': OPERA,\n  'Firefox': FIREFOX,\n  'Internet Explorer': INTERNET_EXPLORER,\n  'Safari': SAFARI\n};\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\n\nfunction _detectChromiumBased() {\n  const userAgent = navigator.userAgent;\n  const browserInfo = {\n    name: UNKNOWN,\n    version: undefined\n  };\n\n  if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n    // Edge is currenly supported only on desktop and android.\n    if (userAgent.match(/Edg(A?)/)) {\n      // Compare the underlying chromium version.\n      const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n      if (Number.parseInt(version, 10) > 72) {\n        browserInfo.name = CHROME;\n        browserInfo.version = version;\n      }\n    } else {\n      browserInfo.name = CHROME;\n      browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n    }\n  }\n\n  return browserInfo;\n}\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\n\n\nfunction _detectElectron() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/Electron/)) {\n    const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n    return {\n      name: ELECTRON,\n      version\n    };\n  }\n}\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\n\n\nfunction _detectNWJS() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/JitsiMeetNW/)) {\n    const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n    return {\n      name: NWJS,\n      version\n    };\n  }\n}\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\n\n\nfunction _detectReactNative() {\n  const match = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n  let version; // If we're remote debugging a React Native app, it may be treated as\n  // Chrome. Check navigator.product as well and always return some version\n  // even if we can't get the real one.\n\n  if (match || navigator.product === 'ReactNative') {\n    let name;\n\n    if (match && match.length > 2) {\n      name = match[1];\n      version = match[2];\n    }\n\n    name || (name = 'react-native');\n    version || (version = 'unknown');\n    return {\n      name: REACT_NATIVE,\n      version\n    };\n  }\n}\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\n\n\nfunction _detect(bowser) {\n  let browserInfo;\n  const detectors = [_detectReactNative, _detectElectron, _detectNWJS]; // Try all browser detectors\n\n  for (let i = 0; i < detectors.length; i++) {\n    browserInfo = detectors[i]();\n\n    if (browserInfo) {\n      return browserInfo;\n    }\n  }\n\n  const name = bowser.getBrowserName();\n\n  if (name in bowserNameToJitsiName) {\n    return {\n      name: bowserNameToJitsiName[name],\n      version: bowser.getBrowserVersion()\n    };\n  } // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n\n\n  browserInfo = _detectChromiumBased();\n\n  if (browserInfo) {\n    return browserInfo;\n  }\n\n  return {\n    name: UNKNOWN,\n    version: undefined\n  };\n}\n/**\n * Implements browser detection.\n */\n\n\nexport default class BrowserDetection {\n  /**\n   * Creates new BrowserDetection instance.\n   *\n   * @param {Object} [browserInfo] - Information about the browser.\n   * @param {string} browserInfo.name - The name of the browser.\n   * @param {string} browserInfo.version - The version of the browser.\n   */\n  constructor(browserInfo) {\n    let name, version;\n    this._bowser = Bowser.getParser(navigator.userAgent);\n\n    if (typeof browserInfo === 'undefined') {\n      const detectedBrowserInfo = _detect(this._bowser);\n\n      name = detectedBrowserInfo.name;\n      version = detectedBrowserInfo.version;\n    } else if (browserInfo.name in bowserNameToJitsiName) {\n      name = bowserNameToJitsiName[browserInfo.name];\n      version = browserInfo.version;\n    } else {\n      name = UNKNOWN;\n      version = undefined;\n    }\n\n    this._name = name;\n    this._version = version;\n  }\n  /**\n   * Gets current browser name.\n   * @returns {string}\n   */\n\n\n  getName() {\n    return this._name;\n  }\n  /**\n   * Checks if current browser is Chrome.\n   * @returns {boolean}\n   */\n\n\n  isChrome() {\n    return this._name === CHROME;\n  }\n  /**\n   * Checks if current browser is Opera.\n   * @returns {boolean}\n   */\n\n\n  isOpera() {\n    return this._name === OPERA;\n  }\n  /**\n   * Checks if current browser is Firefox.\n   * @returns {boolean}\n   */\n\n\n  isFirefox() {\n    return this._name === FIREFOX;\n  }\n  /**\n   * Checks if current browser is Internet Explorer.\n   * @returns {boolean}\n   */\n\n\n  isIExplorer() {\n    return this._name === INTERNET_EXPLORER;\n  }\n  /**\n   * Checks if current browser is Safari.\n   * @returns {boolean}\n   */\n\n\n  isSafari() {\n    return this._name === SAFARI;\n  }\n  /**\n   * Checks if current environment is NWJS.\n   * @returns {boolean}\n   */\n\n\n  isNWJS() {\n    return this._name === NWJS;\n  }\n  /**\n   * Checks if current environment is Electron.\n   * @returns {boolean}\n   */\n\n\n  isElectron() {\n    return this._name === ELECTRON;\n  }\n  /**\n   * Checks if current environment is React Native.\n   * @returns {boolean}\n   */\n\n\n  isReactNative() {\n    return this._name === REACT_NATIVE;\n  }\n  /**\n   * Returns the version of the current browser.\n   * @returns {string}\n   */\n\n\n  getVersion() {\n    return this._version;\n  }\n  /**\n   * Check if the parsed browser matches the passed condition.\n   *\n   * @param {Object} checkTree - It's one or two layered object, which can include a\n   * platform or an OS on the first layer and should have browsers specs on the\n   * bottom layer.\n   * Eg. { chrome: '>71.1.0' }\n   *     { windows: { chrome: '<70.2' } }\n   * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n   * conditions, false if not and undefined when the browser is not defined in the\n   * checktree object or when the current browser's version is unknown.\n   * @private\n   */\n\n\n  _checkCondition(checkTree) {\n    if (this._version) {\n      return this._bowser.satisfies(checkTree);\n    }\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * greater than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionGreaterThan(version) {\n    return this._checkCondition({\n      [this._name]: `>${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * lower than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionLessThan(version) {\n    return this._checkCondition({\n      [this._name]: `<${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * equal to the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   * A loose-equality operator is used here so that it matches the sub-versions as well.\n   */\n\n\n  isVersionEqualTo(version) {\n    return this._checkCondition({\n      [this._name]: `~${version}`\n    });\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\n/**\n * Dummy implementation of Storage interface.\n */\n\nclass DummyLocalStorage extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_storage\", {});\n  }\n\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._storage = {};\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return Object.keys(this._storage).length;\n  }\n  /**\n   * Will return that key's value associated to the passed key name.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {*} - The key value.\n   */\n\n\n  getItem(keyName) {\n    return this._storage[keyName];\n  }\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   *\n   * @param {string} keyName - The key name.\n   * @param {*} keyValue - The key value.\n   * @returns {void}\n   */\n\n\n  setItem(keyName, keyValue) {\n    this._storage[keyName] = keyValue;\n  }\n  /**\n   * When passed a key name, will remove that key from the storage.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {void}\n   */\n\n\n  removeItem(keyName) {\n    delete this._storage[keyName];\n  }\n  /**\n   * When passed a number n, this method will return the name of the nth key in the storage.\n   *\n   * @param {number} idx - The index of the key.\n   * @returns {string} - The nth key name.\n   */\n\n\n  key(n) {\n    const keys = Object.keys(this._storage);\n\n    if (keys.length <= n) {\n      return undefined;\n    }\n\n    return keys[n];\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    return JSON.stringify(this._storage);\n  }\n\n}\n/**\n * Wrapper class for browser's local storage object.\n */\n\n\nclass JitsiLocalStorage extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Storage} storage browser's local storage object.\n   */\n  constructor() {\n    super();\n\n    try {\n      this._storage = window.localStorage;\n      this._localStorageDisabled = false;\n    } catch (ignore) {// localStorage throws an exception.\n    }\n\n    if (!this._storage) {\n      // Handles the case when window.localStorage is undefined or throws an exception.\n      console.warn('Local storage is disabled.');\n      this._storage = new DummyLocalStorage();\n      this._localStorageDisabled = true;\n    }\n  }\n  /**\n   * Returns true if window.localStorage is disabled and false otherwise.\n   *\n   * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n   */\n\n\n  isLocalStorageDisabled() {\n    return this._localStorageDisabled;\n  }\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._storage.clear();\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return this._storage.length;\n  }\n  /**\n   * Returns that passed key's value.\n   * @param {string} keyName the name of the key you want to retrieve\n   * the value of.\n   * @returns {String|null} the value of the key. If the key does not exist,\n   * null is returned.\n   */\n\n\n  getItem(keyName) {\n    return this._storage.getItem(keyName);\n  }\n  /**\n   * Adds a key to the storage, or update key's value if it already exists.\n   * @param {string} keyName - the name of the key you want to create/update.\n   * @param {string} keyValue - the value you want to give the key you are\n   * creating/updating.\n   * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n   */\n\n\n  setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n    this._storage.setItem(keyName, keyValue);\n\n    if (!dontEmitChangedEvent) {\n      this.emit('changed');\n    }\n  }\n  /**\n   * Remove a key from the storage.\n   * @param {string} keyName the name of the key you want to remove.\n   */\n\n\n  removeItem(keyName) {\n    this._storage.removeItem(keyName);\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater\n   * than or equal to the number of key/value pairs in the object.\n   *\n   * @param {number} i - The index of the key in the list.\n   * @returns {string}\n   */\n\n\n  key(i) {\n    return this._storage.key(i);\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    if (this.isLocalStorageDisabled()) {\n      return this._storage.serialize();\n    }\n\n    const length = this._storage.length;\n    const localStorageContent = {};\n\n    for (let i = 0; i < length; i++) {\n      const key = this._storage.key(i);\n\n      localStorageContent[key] = this._storage.getItem(key);\n    }\n\n    return JSON.stringify(localStorageContent);\n  }\n\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        // We do not want to enable unified plan on Electron clients that have Chromium version < 96 because of\n        // performance and screensharing issues.\n        return !(this.isReactNative() || (this.isElectron() && (this._getChromiumBasedVersion() < 96)));\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The presenter type.\n     */\n    PRESENTER = 'presenter',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport browser from '../browser';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.runInLiteMode - Enables lite mode for testing to disable media decoding.\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._runInLiteMode = Boolean(flags.runInLiteMode);\n\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n        this._sendMultipleVideoStreams = Boolean(flags.sendMultipleVideoStreams);\n        this._ssrcRewriting = Boolean(flags.ssrcRewritingOnBridgeSupported);\n\n        // For Chromium, check if Unified plan is enabled.\n        this._usesUnifiedPlan = browser.supportsUnifiedPlan()\n            && (!browser.isChromiumBased() || (flags.enableUnifiedOnChrome ?? true));\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams},`\n            + ` SSRC rewriting supported: ${this._ssrcRewriting},`\n            + ` uses Unified plan: ${this._usesUnifiedPlan}`);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSupportEnabled() {\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams && this._usesUnifiedPlan;\n    }\n\n    /**\n     * Checks if the run in lite mode is enabled.\n     * This will cause any media to be received and not decoded. (Directions are inactive and no ssrc and ssrc-groups\n     * are added to the remote description). This can be used for various test scenarios.\n     *\n     * @returns {boolean}\n     */\n    isRunInLiteModeEnabled() {\n        return this._runInLiteMode;\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n\n    /**\n     * Checks if the clients supports re-writing of the SSRCs on the media streams by the bridge.\n     * @returns {boolean}\n     */\n    isSsrcRewritingSupported() {\n        return this._ssrcRewriting;\n    }\n}\n\nexport default new FeatureFlags();\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const sourceName = track.getSourceName();\n\n                if (sourceName) {\n                    const resolution = ssrcStats.resolution;\n\n                    if (resolution.width // eslint-disable-line max-depth\n                            && resolution.height\n                            && resolution.width !== -1\n                            && resolution.height !== -1) {\n                        resolutions[sourceName] = resolution;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        framerates[sourceName] = ssrcStats.framerate;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n\n                        codecs[sourceName] = codecDesc;\n                    }\n                } else {\n                    logger.error(`No source name returned by ${track}`);\n                }\n            } else {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    const resolution = ssrcStats.resolution;\n\n                    if (resolution.width // eslint-disable-line max-depth\n                            && resolution.height\n                            && resolution.width !== -1\n                            && resolution.height !== -1) {\n                        const userResolutions = resolutions[participantId] || {};\n\n                        userResolutions[ssrc] = resolution;\n                        resolutions[participantId] = userResolutions;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        const userFramerates = framerates[participantId] || {};\n\n                        userFramerates[ssrc] = ssrcStats.framerate;\n                        framerates[participantId] = userFramerates;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n\n                        const userCodecs = codecs[participantId] || {};\n\n                        userCodecs[ssrc] = codecDesc;\n                        codecs[participantId] = userCodecs;\n                    }\n                } else {\n                    logger.error(`No participant ID returned by ${track}`);\n                }\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getSsrcByTrackId(now.trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\nStatistics.analyticsEventEmitter = new EventEmitter();\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n    let confID = this.options.confID;\n\n    // confID - domain/tenant/roomName\n    // roomName - meeting name or breakout room ID\n    // For breakout rooms we change the conference ID used for callstats to use\n    // the room ID instead of the meeting name\n    if (!confID.endsWith(this.options.roomName)) {\n        confID = `${this.options.confID.slice(0, this.options.confID.lastIndexOf('/'))}/${this.options.roomName}`;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\n\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n    Statistics.analyticsEventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, eventName, properties);\n};\n\n\nStatistics.prototype.addAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.on(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\nStatistics.prototype.removeAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.removeListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\n\n\n\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n    chatRoom.addListener(XMPPEvents.ROOM_MAX_USERS_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n    chatRoom.addListener(XMPPEvents.MUC_DESTROYED, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n            if (txt.indexOf(\"Transcript\") !== -1 || txt.indexOf(\"Fellow Jitser\") !== -1) {\n                return;\n            }\n          \n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.participants[dominant]?._hidden) {\n                return;\n            } \n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","export enum JitsiTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed'\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return Boolean(this._identity?.user?.['hidden-from-recorder']);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid() {\n        return this._connectionJid;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid) {\n        this._connectionJid = newJid;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = JitsiConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n\n                    const d = new Deferred();\n\n                    d.setRejectTimeout(REQ_TIMEOUT);\n                    d.catch(() => {\n                        this._reqs.delete(uuid);\n                        olmData.pendingSessionUuid = undefined;\n                    });\n                    this._reqs.set(uuid, d);\n\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {Promise<ArrayBuffer>} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {Promise<CryptoKey>} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum JitsiTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests, enableCallStats } = this.options.conference;\n    const callstatsDisabled = !callStatsID || !callStatsSecret || !enableCallStats\n\n        // Even though AppID and AppSecret may be specified, the integration\n        // of callstats.io may be disabled because of globally-disallowed\n        // requests to any third parties.\n        || disableThirdPartyRequests === true;\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        const isTranscriber = pres.getElementsByTagName('nick');\n\n        if (isTranscriber[0] && isTranscriber[0].innerHTML.toLowerCase() === \"transcriber\") {\n              member.isHiddenDomain = true;\n        }\n        \n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                const tags = [ 'id', 'name', 'avatar' ];\n\n                if (this.options.hiddenFromRecorderFeatureEnabled) {\n                    tags.push('hidden-from-recorder');\n                }\n\n                for (const tag of tags) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': Strophe.getBareJidFromJid(m.jid)\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        }));\n\n        return Promise.allSettled(promises);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const setScreenSharingResolutionConstraints = browser.isChromiumBased()\n            && this.options?.testing?.setScreenSharingResolutionConstraints;\n        let video = {};\n\n        if (typeof desktopSharingFrameRate === 'object') {\n            video.frameRate = desktopSharingFrameRate;\n        }\n        if (setScreenSharingResolutionConstraints) {\n            // Set bogus resolution constraints to work around\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1056311\n            video.height = 99999;\n            video.width = 99999;\n        }\n\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        if (Object.keys(video).length === 0) {\n            video = true;\n        }\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {Mediatype} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join(';');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callbacks\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.map(fileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(results);\n *     }\n * });\n *\n * // Using Promises\n * async.map(fileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now an array of the file size in bytes for each file, e.g.\n *     // [ 1000, 2000, 3000]\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.map(fileList, getFileSizeInBytes);\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * //Using Callbacks\n * async.auto({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     if (err) {\n *         console.log('err = ', err);\n *     }\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * });\n *\n * //Using Promises\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }).then(results => {\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * }).catch(err => {\n *     console.log('err = ', err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.auto({\n *             get_data: function(callback) {\n *                 // async code to get some data\n *                 callback(null, 'data', 'converted to array');\n *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n *                 // once there is some data and the directory exists,\n *                 // write the data to a file in the directory\n *                 callback(null, 'filename');\n *             }],\n *             email_link: ['write_file', function(results, callback) {\n *                 // once the file is written let's email a link to it...\n *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *             }]\n *         });\n *         console.log('results = ', results);\n *         // results = {\n *         //     get_data: ['data', 'converted to array']\n *         //     make_folder; 'folder',\n *         //     write_file: 'filename'\n *         //     email_link: { file: 'filename', email: 'user@example.com' }\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\n\nfunction stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n        if (string[index] === '/' && string[index+1] === '/') {\n            // inline comment\n            let endIndex = string.indexOf('\\n', index);\n            index = (endIndex === -1) ? string.length : endIndex;\n        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n            // block comment\n            let endIndex = string.indexOf('*/', index);\n            if (endIndex !== -1) {\n                index = endIndex + 2;\n                endBlockComment = string.indexOf('*/', index);\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        } else {\n            stripped += string[index];\n            index++;\n        }\n    }\n    return stripped;\n}\n\nfunction parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n *\n * // asynchronous function that computes the file size in bytes\n * // file size is added to the memoized value, then returned\n * function getFileSizeInBytes(memo, file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, memo + stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.reduce(fileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // 6000\n *     // which is the sum of the file sizes of the three files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * let directoryList = ['dir1','dir2','dir3'];\n * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n *\n * // Using callbacks\n * async.concat(directoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *    }\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *        // [ Error: ENOENT: no such file or directory ]\n *        // since dir4 does not exist\n *    } else {\n *        console.log(results);\n *    }\n * });\n *\n * // Using Promises\n * async.concat(directoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n * }).catch(err => {\n *      console.log(err);\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n * }).catch(err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4 does not exist\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.concat(directoryList, fs.readdir);\n *         console.log(results);\n *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *     } catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n *         console.log(results);\n *     } catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4 does not exist\n *     }\n * }\n *\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // dir1/file1.txt\n *        // result now equals the first file in the list that exists\n *    }\n *);\n *\n * // Using Promises\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n * .then(result => {\n *     console.log(result);\n *     // dir1/file1.txt\n *     // result now equals the first file in the list that exists\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n *         console.log(result);\n *         // dir1/file1.txt\n *         // result now equals the file in the list that exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        /* istanbul ignore else */\n        if (typeof console === 'object') {\n            /* istanbul ignore else */\n            if (err) {\n                /* istanbul ignore else */\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) { /* istanbul ignore else */\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.every(fileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * });\n *\n * async.every(withMissingFileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * });\n *\n * // Using Promises\n * async.every(fileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.every(withMissingFileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.every(fileList, fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.every(withMissingFileList, fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since NOT every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.filter(files, fileExists, function(err, results) {\n *    if(err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *        // results is now an array of the existing files\n *    }\n * });\n *\n * // Using Promises\n * async.filter(files, fileExists)\n * .then(results => {\n *     console.log(results);\n *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *     // results is now an array of the existing files\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.filter(files, fileExists);\n *         console.log(results);\n *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *         // results is now an array of the existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const files = ['dir1/file1.txt','dir2','dir4']\n *\n * // asynchronous function that detects file type as none, file, or directory\n * function detectFile(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(null, 'none');\n *         }\n *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n *     });\n * }\n *\n * //Using callbacks\n * async.groupBy(files, detectFile, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *\t       console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n * });\n *\n * // Using Promises\n * async.groupBy(files, detectFile)\n * .then( result => {\n *     console.log(result);\n *     // {\n *     //     file: [ 'dir1/file1.txt' ],\n *     //     none: [ 'dir4' ],\n *     //     directory: [ 'dir2']\n *     // }\n *     // result is object containing the files grouped by type\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.groupBy(files, detectFile);\n *         console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whose\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file3.txt'\n * };\n *\n * const withMissingFileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file4.txt'\n * };\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, key, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n * });\n *\n * // Error handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.mapValues(fileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // result is now a map of file size in bytes for each file, e.g.\n *     // {\n *     //     f1: 1000,\n *     //     f2: 2000,\n *     //     f3: 3000\n *     // }\n * }).catch (err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch (err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/* istanbul ignore file */\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n *\n * //Using Callbacks\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.parallel([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two'] even though\n *         // the second function had a shorter timeout.\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n    var processingScheduled = false;\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.reject(fileList, fileExists, function(err, results) {\n *    // [ 'dir3/file6.txt' ]\n *    // results now equals an array of the non-existing files\n * });\n *\n * // Using Promises\n * async.reject(fileList, fileExists)\n * .then( results => {\n *     console.log(results);\n *     // [ 'dir3/file6.txt' ]\n *     // results now equals an array of the non-existing files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.reject(fileList, fileExists);\n *         console.log(results);\n *         // [ 'dir3/file6.txt' ]\n *         // results now equals an array of the non-existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // true\n *        // result is true since some file in the list exists\n *    }\n *);\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // false\n *        // result is false since none of the files exists\n *    }\n *);\n *\n * // Using Promises\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since some file in the list exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since none of the files exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since some file in the list exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since none of the files exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * // bigfile.txt is a file that is 251100 bytes in size\n * // mediumfile.txt is a file that is 11000 bytes in size\n * // smallfile.txt is a file that is 121 bytes in size\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) return callback(getFileSizeErr);\n *         callback(null, fileSize);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // descending order\n * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) {\n *             return callback(getFileSizeErr);\n *         }\n *         callback(null, fileSize * -1);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n *         }\n *     }\n * );\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *             // [ Error: ENOENT: no such file or directory ]\n *         } else {\n *             console.log(results);\n *         }\n *     }\n * );\n *\n * // Using Promises\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now the original array of files sorted by\n *     // file size (ascending by default), e.g.\n *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *         // results is now the original array of files sorted by\n *         // file size (ascending by default), e.g.\n *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * // Error handling\n * async () => {\n *     try {\n *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","import { getLogger } from '@jitsi/logger';\nimport { queue } from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals video max frame heights for its local sources.\n     */\n    REMOTE_SOURCE_CONSTRAINTS_CHANGED = 'media_session.REMOTE_SOURCE_CONSTRAINTS_CHANGED',\n\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED = 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /**\n     * Parses the source-name and max frame height value of the 'content-modify' IQ when source-name signaling\n     * is enabled.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Object|null}\n     */\n    static parseSourceMaxFrameHeight(jingleContents) {\n        const receiverConstraints = [];\n        const sourceFrameHeightSel = jingleContents.find('>content[name=\"video\"]>source-frame-height');\n        let maxHeight, sourceName;\n\n        if (sourceFrameHeightSel.length) {\n            sourceFrameHeightSel.each((_, source) => {\n                sourceName = source.getAttribute('sourceName');\n                maxHeight = source.getAttribute('maxHeight');\n                receiverConstraints.push({\n                    maxHeight,\n                    sourceName\n                });\n            });\n\n            return receiverConstraints;\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Receiver constraints (max height) set by the application per remote source. Will be used for p2p connection\n         * in lieu of localRecvMaxFrameHeight when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>}\n         */\n        this._sourceReceiverConstraints = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * Remote preference for the receive video max frame heights when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>|undefined}\n         */\n        this.remoteSourceMaxFrameHeights = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Remote preference for receive video max frame heights when source-name signaling is enabled.\n     *\n     * @returns {Map<string, number>|undefined}\n     */\n    getRemoteSourcesRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteSourceMaxFrameHeights;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                if (ssrcElement.hasAttribute('name')) {\n                    const sourceName = ssrcElement.getAttribute('name');\n\n                    this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                }\n            }\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner?.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n\n                    // The first video track is added to the peerconnection and signaled as part of the session-accept.\n                    // Add secondary video tracks (that were already added to conference) to the peerconnection here.\n                    // This will happen when someone shares a secondary source to a two people call, the other user\n                    // leaves and joins the call again, a new peerconnection is created for p2p/jvb connection. At this\n                    // point, there are 2 video tracks which need to be signaled to the remote peer.\n                    const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n                    videoTracks.length && videoTracks.splice(0, 1);\n                    if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length) {\n                        this.addTracks(videoTracks);\n                    }\n                },\n                error => {\n                    failure(error);\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    const workFunction = finishedCallback => {\n                        // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                        // the local endpoint is the offerer and starts muted.\n                        const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                        const remoteDescription = new RTCSessionDescription({\n                            type: 'offer',\n                            sdp: remoteSdp\n                        });\n\n                        return this._responderRenegotiate(remoteDescription)\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                    };\n\n                    logger.debug(`${this} Queued responderRenegotiate task`);\n                    this.modificationQueue.push(\n                        workFunction,\n                        error => {\n                            if (error) {\n                                logger.error(`${this} failed to renegotiate a decoder for muted endpoint ${error}`);\n                            } else {\n                                logger.debug(`${this} renegotiate a decoder for muted endpoint`);\n                            }\n                        });\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n            const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n            const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n            let tracks = localTracks;\n\n            // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n            // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n            // renegotiation.\n            if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length > 1) {\n                tracks = [ ...audioTracks, videoTracks[0] ];\n            }\n            for (const track of tracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                        // adjust the video media direction only in the local SDP and the Jingle contents direction\n                        // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                        // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                        // interested in receiving video content. Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive\n                                || this.localRecvMaxFrameHeight\n                                || this._sourceReceiverConstraints)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer for the first time, but not when offer\n                    // and it's fine since we're generating an answer now it will contain all our SSRCs.\n                    if (oldLocalSdp) {\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n            logger.info(`${this} sending content-modify, video senders: ${senders},`\n                + ` max frame height: ${maxFrameHeight}`);\n        }\n\n        if (typeof this._sourceReceiverConstraints !== 'undefined') {\n            this._sourceReceiverConstraints.forEach((maxHeight, sourceName) => {\n                sessionModify\n                    .c('source-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                    .attrs({\n                        sourceName,\n                        maxHeight\n                    });\n\n                sessionModify.up();\n                logger.info(`${this} sending content-modify for source-name: ${sourceName}, maxHeight: ${maxHeight}`);\n            });\n        }\n\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     * @param {Map<string, number>} sourceReceiverConstraints - The receiver constraints per source.\n     */\n    setReceiverVideoConstraint(maxFrameHeight, sourceReceiverConstraints) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`\n            + ` sourceReceiverConstraints: ${sourceReceiverConstraints}`);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._sourceReceiverConstraints = sourceReceiverConstraints;\n        } else {\n            this.localRecvMaxFrameHeight = maxFrameHeight;\n        }\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            let midFound = false;\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n                midFound = true;\n            });\n\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\n            // in the current remote description. Add a new m-line for this newly signaled source.\n            if (!midFound && this.isP2P && FeatureFlags.isSourceNameSignalingEnabled()) {\n                addSsrcInfo[name] = lines;\n            }\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                let mid;\n\n                lines.forEach(line => {\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n\n                // Reject the m-line so that the browser removes the associated transceiver from the list of available\n                // transceivers. This will prevent the client from trying to re-use these inactive transceivers when\n                // additional video sources are added to the peerconnection.\n                if (mid > -1 && !this.isP2P && FeatureFlags.isMultiStreamSupportEnabled()) {\n                    const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\n\n                    remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\n                }\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\n        // the remote p2p peer when multi-stream support is enabled.\n        if (addSsrcInfo.length > remoteSdp.media.length\n            && FeatureFlags.isSourceNameSignalingEnabled()\n            && this.isP2P\n            && this.usesUnifiedPlan) {\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            remoteSdp = new SDP(remoteSdp.raw);\n        }\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!FeatureFlags.isMultiStreamSupportEnabled()\n            || !localTracks?.length\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const oldLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n            // Add transceivers by adding a new mline in the remote description for each track.\n            for (const track of localTracks) {\n                remoteSdp.addMlineForNewLocalSource(track.getType());\n            }\n\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: remoteSdp.raw\n            });\n\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\n            this._responderRenegotiate(remoteDescription)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => {\n                    const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                    // Signal the new sources to the peer.\n                    this.notifyMySSRCUpdate(oldLocalSDP, newLocalSDP);\n                    finishedCallback();\n                })\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        // Set the source name of the new track.\n                        if (FeatureFlags.isSourceNameSignalingEnabled()\n                            && oldTrack\n                            && newTrack\n                            && oldTrack.isVideoTrack()) {\n                            newTrack.setSourceName(oldTrack.getSourceName());\n                        }\n\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings(newTrack);\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n        const sourceMaxFrameHeights = JingleSessionPC.parseSourceMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (sourceMaxFrameHeights) {\n            this.remoteSourceMaxFrameHeights = sourceMaxFrameHeights;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED, this, sourceMaxFrameHeights);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(`${this} - failed to parse video \"senders\" attribute in \"content-modify\" action`);\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded() && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust the media direction.\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        if (!this.options.deploymentInfo) {\n            this.options.deploymentInfo = {};\n        }\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        // $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n        //     this.disconnect(ev).catch(() => {\n        //         // ignore errors in order to not brake the unload.\n        //     });\n        // });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            logger.info('Source-name signaling is enabled');\n            this.caps.addFeature('http://jitsi.org/source-name');\n        }\n\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.info('SSRC rewriting is supported');\n            this.caps.addFeature('http://jitsi.org/ssrc-rewriting');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'release') {\n                this.options.deploymentInfo.backendRelease = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress\n            || this.breakoutRoomsComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face expressions to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.faceExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress\n            || from === this.breakoutRoomsComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            // Let's push to analytics any updates that may have come from the backend\n            Statistics.analytics.addPermanentProperties({ ...logObject });\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending\n                    // video).\n                    const lastNEndpoints = obj.lastNEndpoints;\n\n                    logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                    emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n                }\n\n                break;\n            }\n            case 'ForwardedSources': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of forwarded sources\n                    const forwardedSources = obj.forwardedSources;\n\n                    logger.info(`New forwarded sources: ${forwardedSources}`);\n                    emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n                }\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    const { sourceName, maxHeight } = obj;\n\n                    if (typeof sourceName === 'string' && typeof maxHeight === 'number') {\n                        // eslint-disable-next-line object-property-newline\n                        logger.info(`SenderSourceConstraints: ${JSON.stringify({ sourceName, maxHeight })}`);\n                        emitter.emit(\n                            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, {\n                                sourceName,\n                                maxHeight\n                            }\n                        );\n                    } else {\n                        logger.error(`Invalid SenderSourceConstraints: ${JSON.stringify(obj)}`);\n                    }\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        if (!container) {\n            return;\n        }\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSupportEnabled())\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        let removeTrackPromise = Promise.resolve();\n\n        if (this.conference) {\n            removeTrackPromise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return Promise.allSettled([ promise, removeTrackPromise ]).then(() => super.dispose());\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                const bLine = clonedeep(mLine);\n\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    // Copy the msid attribute to each ssrc.\n                    bLine.sources.forEach(ssrc => {\n                        ssrc.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(bLine.sources);\n                }\n                if (typeof bLine.ssrcGroups !== 'undefined' && Array.isArray(bLine.ssrcGroups)) {\n                    media[type].ssrcGroups = (media[type].ssrcGroups || []).concat(bLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n        this.audioSourcesToMsidMap = new Map();\n        this.videoSourcesToMsidMap = new Map();\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\n     * preceding by a dash sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    let streamId = streamAndTrackIDs[0];\n                    const trackId = streamAndTrackIDs[1];\n\n                    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                        // Always overwrite streamId since we want the msid to be in this format even if the browser\n                        // generates one (in p2p mode).\n                        streamId = `${this.localEndpointId}-${mediaType}`;\n\n                        // eslint-disable-next-line max-depth\n                        if (mediaType === MediaType.VIDEO) {\n                            // eslint-disable-next-line max-depth\n                            if (!this.videoSourcesToMsidMap.has(trackId)) {\n                                streamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\n                                this.videoSourcesToMsidMap.set(trackId, streamId);\n                            }\n                        } else if (!this.audioSourcesToMsidMap.has(trackId)) {\n                            streamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\n                            this.audioSourcesToMsidMap.set(trackId, streamId);\n                        }\n\n                        streamId = mediaType === MediaType.VIDEO\n                            ? this.videoSourcesToMsidMap.get(trackId)\n                            : this.audioSourcesToMsidMap.get(trackId);\n                    }\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, streamId);\n                } else {\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        const msidLine = mediaSection.mLine?.msid;\n        const trackId = msidLine && msidLine.split(' ')[1];\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n        for (const source of sources) {\n            const msidExists = mediaSection.ssrcs\n                .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n            if (!msidExists && trackId) {\n                const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\n\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'msid',\n                    value: generatedMsid\n                });\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        // Plan-b clients generate new SSRCs and trackIds whenever tracks are removed and added back to the\n        // peerconnection, therefore local track based map for msids needs to be reset after every transformation.\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !this.tpc._usesUnifiedPlan) {\n            this.audioSourcesToMsidMap.clear();\n            this.videoSourcesToMsidMap.clear();\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid')?.value;\n            let trackIndex;\n\n            if (msid) {\n                const streamId = msid.split(' ')[0];\n\n                trackIndex = streamId.split('-')[2];\n            }\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex)\n                });\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiConference from '../../types/hand-crafted/JitsiConference';\nimport JitsiRemoteTrack from '../../types/hand-crafted/modules/RTC/JitsiRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType, \n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: JitsiConference;\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: JitsiConference, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            // It's common for the event listeners to access the JitsiRemoteTrack. Thus pass it as a parameter here.\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, this.track, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=${\n            enteringForwardedSources} at ${timestamp}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set RTC mute timeout for: ${sourceName} of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._disposeTrackStreamingStatus();\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (this.pc.isSharingLowFpsScreen()\n                && localVideoTrack.getVideoType() === VideoType.DESKTOP\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const localTracks = this.pc.getLocalTracks(mediaType);\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSupportEnabled()\n            && localTracks?.length\n            && !oldTrack\n            && newTrack\n            && !localTracks.find(t => t === newTrack);\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n                && t.currentDirection === MediaDirection.INACTIVE);\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = Number(sourceName.split('-')[1].substring(1));\n\n                if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType\n                            && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n\n        if (!transceiver) {\n            return Promise.reject(new Error('replace track failed'));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'.\n                // When multi-stream is enabled, there can be multiple transceivers with outbound streams.\n                if (idx < localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {JitsiLocalTrack|undefined} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n        const existingTrack = Array.from(userTracksByMediaType)[0];\n\n        // The exisiting track needs to be removed here. This happens on Safari sometimes when a SSRC is removed from\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId\n        && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unified-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        if (FeatureFlags.isMultiStreamSupportEnabled()) {\n            media = media.filter(mline => mline.direction === MediaDirection.SENDONLY\n                || mline.direction === MediaDirection.SENDRECV);\n        } else {\n            media = [];\n            [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n                const mLine = session.media.find(m => m.type === mediaType);\n\n                mLine && media.push(mLine);\n            });\n        }\n    }\n\n    let index = 0;\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined' && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan\n                ? FeatureFlags.isMultiStreamSupportEnabled() ? `${mLine.type}-${index}` : mLine.type\n                : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n\n        // Currently multi-stream is supported for video only.\n        mLine.type === MediaType.VIDEO && index++;\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs but no ssrc-groups on Firefox. Unfortunately, Jicofo\n * will complain if it sees ssrcs with matching msids but no ssrc-group, so a ssrc-group line is injected to make\n * Jicofo happy.\n *\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to contain an inject ssrc-group for simulcast.\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast = function(desc) {\n    const sdp = transform.parse(desc.sdp);\n    const video = sdp.media.find(mline => mline.type === 'video');\n\n    // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n    video.ssrcGroups = video.ssrcGroups || [];\n    const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n    if (video.simulcast || video.simulcast_03) {\n        const ssrcs = [];\n\n        if (fidGroups && fidGroups.length) {\n            fidGroups.forEach(group => {\n                ssrcs.push(group.ssrcs.split(' ')[0]);\n            });\n        } else {\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n        }\n        if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n            // Group already exists, no need to do anything\n            return desc;\n        }\n\n        // Add a SIM group for every 3 FID groups.\n        for (let i = 0; i < ssrcs.length; i += 3) {\n            const simSsrcs = ssrcs.slice(i, i + 3);\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: simSsrcs.join(' ')\n            });\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(sdp)\n    });\n};\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute operation.\n *\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    logger.info(`${this} Adding track=${track} as unmute`);\n\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => false);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\n    // before the source signaling which is undesirable.\n    // Send the presence before signaling for a new screenshare source. This is needed for multi-stream support since\n    // videoType needs to be availble at remote track creation time so that a fake tile for screenshare can be added.\n    // FIXME - This check needs to be removed when the client switches to the bridge based signaling for tracks.\n    const isNewTrackScreenshare = !oldTrack\n        && newTrack?.getVideoType() === VideoType.DESKTOP\n        && FeatureFlags.isMultiStreamSupportEnabled()\n        && !this.isP2P; // negotiationneeded is not fired on p2p peerconnection\n    const negotiationNeeded = !isNewTrackScreenshare && Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const stream = newTrack?.getOriginalStream();\n        const promise = newTrack && !stream\n\n            // Ignore cases when the track is replaced while the device is in a muted state.\n            // The track will be replaced again on the peerconnection when the user unmutes.\n            ? Promise.resolve()\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\n\n        return promise\n            .then(transceiver => {\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\n\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\n                // renegotiation is triggered as a result of this.\n                if (oldTrack && newTrack) {\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                    if (oldTrackSSRC) {\n                        this.localSSRCs.delete(oldTrack.rtcId);\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    }\n                }\n                const mediaActive = mediaType === MediaType.AUDIO\n                    ? this.audioTransferActive\n                    : this.videoTransferActive;\n\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\n                // this connection again.\n                if (transceiver && mediaActive) {\n                    // In the scenario where we remove the oldTrack (oldTrack is not null and newTrack is null) on FF\n                    // if we change the direction to RECVONLY, create answer will generate SDP with only 1 receive\n                    // only ssrc instead of keeping all 6 ssrcs that we currently have. Stopping the screen sharing\n                    // and then starting it again will trigger 2 rounds of source-remove and source-add replacing\n                    // the 6 ssrcs for the screen sharing with 1 receive only ssrc and then removing the receive\n                    // only ssrc and adding the same 6 ssrcs. On the remote participant's side the same ssrcs will\n                    // be reused on a new m-line and if the remote participant is FF due to\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1768729 the video stream won't be rendered.\n                    // That's why we need keep the direction to SENDRECV for FF.\n                    //\n                    // NOTE: If we return back to the approach of not removing the track for FF and instead using the\n                    // enabled property for mute or stopping screensharing we may need to change the direction to\n                    // RECVONLY if FF still sends the media even though the enabled flag is set to false.\n                    transceiver.direction\n                        = newTrack || browser.isFirefox() ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                } else if (transceiver) {\n                    transceiver.direction = MediaDirection.INACTIVE;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                // Force renegotiation only when the source is added for the first time.\n                return configureEncodingsPromise.then(() => negotiationNeeded);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrackMute', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrackMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrackMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType)?.[0];\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Munges the SDP to set all directions to inactive and drop all ssrc and ssrc-groups.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeInactive = function(description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        mLine.direction = MediaDirection.INACTIVE;\n        mLine.ssrcs = undefined;\n        mLine.ssrcGroups = undefined;\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        if (localVideoTrack) {\n            return this.setSenderVideoConstraints(\n                this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n                localVideoTrack);\n        }\n        const promises = [];\n\n        for (const track of this.getLocalVideoTracks()) {\n            promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n        }\n\n        return Promise.allSettled(promises);\n    }\n\n    let localTrack = localVideoTrack;\n\n    if (!localTrack) {\n        localTrack = this.getLocalVideoTracks()[0];\n    }\n\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight, localTrack);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localDescription = this._mungeCodecOrder(localDescription);\n    }\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n\n            if (FeatureFlags.isRunInLiteModeEnabled()) {\n                remoteDescription = this._mungeInactive(remoteDescription);\n            }\n        }\n        if (this.isSimulcastOn()) {\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this._senderMaxHeights.set(localVideoTrack.getSourceName(), frameHeight);\n    } else {\n        this._senderVideoMaxHeight = frameHeight;\n    }\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    // Set the degradation preference.\n    const preference = this.isSharingLowFpsScreen()\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                // Max bitrates are configured on the encodings only for VP8.\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || this.isSharingLowFpsScreen()\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this.isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased()) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        let sourceIndex, sourceName;\n\n        if (FeatureFlags.isMultiStreamSupportEnabled()) {\n            sourceName = track.getSourceName();\n            sourceIndex = sourceName?.indexOf('-') + 2;\n        }\n\n        const sourceIdentifier = this._usesUnifiedPlan\n            ? FeatureFlags.isMultiStreamSupportEnabled() && sourceIndex\n                ? `${track.getType()}-${sourceName.substr(sourceIndex, 1)}` : track.getType()\n            : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            // Add forwarded sources change listener.\n            this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n        }\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            Date.now());\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face_landmark';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACE_LANDMARK_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACE_LANDMARK_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                JitsiE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return SariskaMediaTransport.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        const blob = new Blob([\"importScripts('https://sdk.sariska.io/flacEncodeWorker.min.js');\"], {\"type\": 'application/javascript'});\n        const url = window.URL || window.webkitURL;\n        const blobUrl = url.createObjectURL(blob);\n        this._encoder = new Worker(blobUrl);\n        URL.revokeObjectURL(blobUrl);\n    }\n}","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime() {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\n// type SessionEvent = {\n\n//     /**\n//      * The type of the event.\n//      * Should be one of the values in {@code SessionEventType}.\n//      */\n//     type: string,\n\n//     /**\n//      * The timestamp of the event.\n//      */\n//     timestamp: number\n// };\n\n/**\n * Representation of the metadata of a segment.\n */\n// type SegmentInfo = {\n\n//     /**\n//      * The length of gap before this segment, in milliseconds.\n//      * mull if unknown.\n//      */\n//     gapBefore?: ?number,\n\n//     /**\n//      * The duration of this segment, in milliseconds.\n//      * null if unknown or the segment is not finished.\n//      */\n//     duration?: ?number,\n\n//     /**\n//      * The start time, in milliseconds.\n//      */\n//     start?: ?number,\n\n//     /**\n//      * The end time, in milliseconds.\n//      * null if unknown, the segment is not finished, or the recording is\n//      * interrupted (e.g. browser reload).\n//      */\n//     end?: ?number\n// };\n\n/**\n * Representation of metadata of a local recording session.\n */\n// type SessionInfo = {\n\n//     /**\n//      * The session token.\n//      */\n//     sessionToken: string,\n\n//     /**\n//      * The start time of the session.\n//      */\n//     start: ?number,\n\n//     /**\n//      * The recording format.\n//      */\n//     format: string,\n\n//     /**\n//      * Array of segments in the session.\n//      */\n//     segments: SegmentInfo[]\n// }\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken, format) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(){\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken) {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events) {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\n// type RecordingStats = {\n\n//     /**\n//      * Current local recording session token used by the participant.\n//      */\n//     currentSessionToken: number,\n\n//     /**\n//      * Whether local recording is engaged on the participant's device.\n//      */\n//     isRecording: boolean,\n\n//     /**\n//      * Total recorded bytes. (Reserved for future use.)\n//      */\n//     recordedBytes: number,\n\n//     /**\n//      * Total recording duration. (Reserved for future use.)\n//      */\n//     recordedLength: number\n// }\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats() {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return Promise.resolve();\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        /**\n         * The map that holds the max frame height requested for each remote source when source-name signaling is\n         * enabled.\n         *\n         * @type Map<string, number>\n         */\n        this._sourceReceiverConstraints = new Map();\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Returns a map of all the remote source names and the corresponding max frame heights.\n     *\n     * @param {number} maxFrameHeight\n     * @returns\n     */\n    _getDefaultSourceReceiverConstraints(mediaSession, maxFrameHeight) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return null;\n        }\n        const remoteVideoTracks = mediaSession.peerconnection?.getRemoteTracks(null, MediaType.VIDEO) || [];\n        const receiverConstraints = new Map();\n\n        for (const track of remoteVideoTracks) {\n            receiverConstraints.set(track.getSourceName(), maxFrameHeight);\n        }\n\n        return receiverConstraints;\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight, this._sourceReceiverConstraints);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                session.setReceiverVideoConstraint(\n                    maxFrameHeight,\n                    this._getDefaultSourceReceiverConstraints(this._maxFrameHeight));\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n        const isSourcesFormat = Object.keys(constraints).includes('onStageSources', 'selectedSources');\n\n        if (!FeatureFlags.isSourceNameSignalingEnabled() && isSourcesFormat) {\n            throw new Error(\n                '\"onStageSources\" and \"selectedSources\" are not supported when sourceNameSignaling is disabled.'\n            );\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled() && isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (!p2pSession) {\n                return;\n            }\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const mappedConstraints = Array.from(Object.entries(constraints.constraints))\n                    .map(constraint => {\n                        constraint[1] = constraint[1].maxHeight;\n\n                        return constraint;\n                    });\n\n                this._sourceReceiverConstraints = new Map(mappedConstraints);\n\n                // Send the receiver constraints to the peer through a \"content-modify\" message.\n                p2pSession.setReceiverVideoConstraint(null, this._sourceReceiverConstraints);\n            } else {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            for (const track of this._rtc.getLocalVideoTracks()) {\n                const sourceName = track.getSourceName();\n\n                sourceName && this._propagateSendMaxFrameHeight(sourceName);\n            }\n        } else {\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n-    * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            mediaSession.addListener(\n                MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED,\n                (session, sourceConstraints) => {\n                    session === this._conference.getActiveMediaSession()\n                        && sourceConstraints.forEach(constraint => this._onSenderConstraintsReceived(constraint));\n                });\n        } else {\n            mediaSession.addListener(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n                session => session === this._conference.getActiveMediaSession()\n                    && this._configureConstraintsForLocalSources());\n        }\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const { maxHeight, sourceName } = videoConstraints;\n            const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n            for (const track of localVideoTracks) {\n                // Propagate the sender constraint only if it has changed.\n                if (track.getSourceName() === sourceName\n                    && (!this._sourceSenderConstraints.has(sourceName)\n                    || this._sourceSenderConstraints.get(sourceName) !== maxHeight)) {\n                    this._sourceSenderConstraints.set(sourceName, maxHeight);\n                    logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                    this._propagateSendMaxFrameHeight(sourceName);\n                }\n            }\n        } else if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n            this._senderVideoConstraints = videoConstraints;\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? sourceName\n                    ? this._sourceSenderConstraints.get(sourceName)\n                    : activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : sourceName ? this._sourceSenderConstraints.get(sourceName) : this._senderVideoConstraints?.idealHeight\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const promises = [];\n\n            for (const sourceName of this._sourceSenderConstraints.keys()) {\n                promises.push(this._propagateSendMaxFrameHeight(sourceName));\n            }\n\n            return Promise.allSettled(promises);\n        }\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        try {\n            appData = JSON.parse(appData)|| {};\n        } catch(e) {\n            appData = {};\n        }\n        \n        appData[\"base_url\"] = appData[\"base_url\"] ? appData[\"base_url\"] : `${window.location.origin}${window.location.pathname}`;\n        appData[\"token\"] =  this._connection.emuc.xmpp.token;\n        \n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.FACE_LANDMARK_ADDED,\n            this._onFaceLandmarkAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data.faceExpression) {\n            savedUser.addFaceExpression(data.faceExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n\n            speakerStatsToUpdate.setFaceExpressions(newStats[userId].faceExpressions);\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const appData = {};\n        appData[\"baseUrl\"] =  window.location.origin;\n        appData[\"token\"] =  this.chatRoom.connection.emuc.xmpp.token\n\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.warn('Requested peer media info, before room was set');\n        };\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const lastPresence = this.chatRoom?.getLastPresence(owner);\n\n            if (!lastPresence) {\n                logger.warn(`getPeerMediaInfo - no presence stored for: ${owner}`);\n\n                return;\n            }\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            if (sourceName) {\n                return this.getPeerSourceInfo(owner, sourceName);\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: VideoType.CAMERA // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { RecordingController } from './modules/local-recording';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nwindow.APP = {\n    conference: {\n    }\n};\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n\n\n\n    this.handleSubtitles();\n\n    if (options.config.enableLocalRecording) {\n        this.recordingController = new RecordingController();\n        this.recordingController.registerEvents(this);\n    }\n\n    if (options.config.enableAnalytics) {\n        this.enableAnalytics();\n    }\n\n    if (options.config.iAmRecorder) {\n        this.removeCommand('userinfo');\n        this.sendCommand(\n            'userinfo',\n            {\n                attributes: {\n                    xmlns: 'http://jitsi.org/jitmeet/userinfo',\n                    robot: true\n                }\n            });\n    }\n\n    const self = this;\n\n    window.APP = {\n        conference: {\n            _room: this,\n            get membersCount() {\n                return self.getParticipantsWithoutHidden().length + 1;\n            },\n            getStats() {\n                return self.connectionQuality.getStats();\n            },\n            getConnectionState() {\n                return self.getConnectionState();\n            }\n        }\n    };\n\n    this.localTracksDuration = new LocalTracksDuration(this);\n    this.sessions = {};\n    this.user = options.user;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid) {\n    return Strophe.getNodeFromJid(jid);\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    // Do not initialize ParticipantConnectionStatusHandler when source-name signaling is enabled.\n    if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n        this.participantConnectionStatus.init();\n    }\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('The conference is has been already left');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave();\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localtrack) {\n        this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n    } else if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (!track) {\n        return;\n    }\n    if (track.isAudioTrack() && this.options.config.startAudioMuted) {\n        track.mute();\n    }\n    if (track.isVideoTrack() && this.options.config.startVideoMuted) {\n        track.mute();\n    }\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        if (FeatureFlags.isMultiStreamSupportEnabled() && mediaType === MediaType.VIDEO) {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            track.setSourceName(sourceName);\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track)\n        .then(() => {\n            // Presence needs to be sent here for desktop track since we need the presence to reach the remote peer\n            // before signaling so that a fake participant tile is created for screenshare. Otherwise, presence will\n            // only be sent after a session-accept or source-add is ack'ed.\n            if (track.getVideoType() === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled()) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n        });\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const mediaType = oldTrack?.getType() || newTrack?.getType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && newTrack) {\n        if (oldTrack) {\n            newTrack.setSourceName(oldTrack.getSourceName());\n        } else {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            newTrack.setSourceName(sourceName);\n        }\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            // We do not want to send presence update during setEffect switching, which removes and then adds the same\n            // track back to the conference.\n            if (!(oldTrack?._setEffectInProgress || newTrack?._setEffectInProgress)) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        const videoTypeTagName = 'videoType';\n\n        // If track is missing we revert to default type Camera, the case where we screenshare and\n        // we return to be video muted.\n        const trackVideoType = track ? track.videoType : VideoType.CAMERA;\n\n        // If video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            // We will not use this.sendCommand here to avoid sending the presence immediately, as later we may also\n            // set the mute status.\n            const legacyTypeChanged = this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\n\n            videoTypeChanged = videoTypeChanged || legacyTypeChanged;\n        }\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n    }\n\n    // Add the 'audioMuted' and 'videoMuted' tags when source name signaling is enabled for backward compatibility.\n    // It won't be used anymore when multiple stream support is enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteChanged, videoMuteChanged;\n\n        if (!this.room) {\n            return false;\n        }\n\n        if (mediaType === MediaType.AUDIO) {\n            audioMuteChanged = this.room.addAudioInfoToPresence(isMuted);\n        } else {\n            videoMuteChanged = this.room.addVideoInfoToPresence(isMuted);\n        }\n\n        presenceChanged = presenceChanged || audioMuteChanged || videoMuteChanged;\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\n JitsiConference.prototype.getParticipantsWithoutHidden = function() {\n    let participants = this.getParticipants().filter(participant => !participant._hidden);\n\n    participants = participants.filter(participant => !participant?._properties?.features_jigasi);\n\n    return participants;\n};\n\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const usesUnifiedPlan = browser.supportsUnifiedPlan()\n        && (!browser.isChromiumBased() || (this.options.config.enableUnifiedOnChrome ?? true));\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (usesUnifiedPlan !== peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || browser.isFirefox()\n        || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options?.errorMsg) {\n        logger.warn(options.errorMsg);\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    this.setDisplayName(`${this.getLocalUser() && this.getLocalUser().name}(${this.options.connection.options.ownerId})`);\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = jingleSession.peerconnection.getLocalTracks();\n    const localAudioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n    const localVideoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    // Set the presence in the legacy format if there are no local tracks and multi stream support is not enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteStatusChanged, videoMuteStatusChanged;\n\n        if (!localAudioTracks?.length) {\n            audioMuteStatusChanged = this._setTrackMuteStatus(MediaType.AUDIO, undefined, true);\n        }\n        if (!localVideoTracks?.length) {\n            videoMuteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\n            videoTypeChanged = this._setNewVideoType();\n        }\n\n        presenceChanged = presenceChanged || audioMuteStatusChanged || videoMuteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceExpressionEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n\n\n/**\n * Gets the local user when joined\n */\n JitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.terminate = function() {\n    this.sendCommand('terminate', {});\n};\n\n\nJitsiConference.prototype.handleSubtitles = function() {\n\n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty('translation_language');\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage.final = json.text;\n                newTranscriptMessage.participantName = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                    newTranscriptMessage = pastMessage;\n                } else {\n                    newTranscriptMessage.participantName = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage.final = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage.stable = text;\n                    newTranscriptMessage.unstable = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage.unstable = text;\n                }\n\n            }\n\n            let finalText = '';\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n\n                finalText = stable + unstable;\n            }\n            const fellowParticipantName =  this.participants[json?.participant?.id]?._identity?.user?.name ||  this?.getLocalUser()?.name;\n            this.eventEmitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, json?.participant?.id, fellowParticipantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n};\n\n// enable analytics\nJitsiConference.prototype.enableAnalytics = function() {\n    this.statistics.addAnalyticsEventListener((eventName, payload) => {\n        let name = '', body = {};\n\n        if (typeof eventName === 'string') {\n            name = eventName;\n            body = payload;\n        } else if (typeof eventName === 'object') {\n            name = eventName.name;\n            body = eventName;\n        }\n\n        const finalPaylaod = {\n            name,\n            action: body.action ? body.action : '',\n            actionSubject: body.actionSubject ? body.actionSubject : '',\n            source: body.source ? body.source : '',\n            attributes: JSON.stringify(payload)\n        };\n\n        this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, finalPaylaod);\n    });\n};\n\nJitsiConference.prototype.startLocalRecording = function(format = 'ogg') {\n    this.recordingController.startRecording(format);\n};\n\nJitsiConference.prototype.stopLocalRecording = function() {\n    this.recordingController.stopRecording();\n};\n\nJitsiConference.prototype.switchFormat = function() {\n    this.recordingController.switchFormat(format);\n};\n\nJitsiConference.prototype.setMuted = function(muted) {\n    this.recordingController.setMuted(muted);\n};\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n    this.recordingController.setMicDevice(micDeviceId);\n};\n\nJitsiConference.prototype.startSIPVideoCall = function(sipAddress, displayName) {\n    if (this.sessions[sipAddress]) {\n        return;\n    }\n    const session = this.createVideoSIPGWSession(sipAddress, displayName);\n\n    this.sessions[sipAddress] = session;\n    session.start();\n};\n\nJitsiConference.prototype.stopSIPVideoCall = function(sipAddress) {\n    if (!this.sessions[sipAddress]) {\n        return;\n    }\n    this.sessions[sipAddress].stop();\n    delete this.sessions[sipAddress];\n};","import Bourne from '@hapi/bourne';\n\n/**\n * A list if keys to ignore when parsing.\n * @type {string[]}\n */\n\nconst blacklist = [ '__proto__', 'constructor', 'prototype' ];\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {URL} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\n\nexport function parseURLParams(dontParse = true) {\n    const paramStr = location.search ? location.search : location.hash;\n    const params = {};\n    const paramParts = paramStr && paramStr.substr(1)\n        .split('&') || []; // Detect and ignore hash params for hash routers.\n\n    if (location.hash && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key || blacklist.includes(key.split('.')[0])) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value)\n                    .replace(/\\\\&/, '&');\n                value = decoded === 'undefined' ? undefined : Bourne.parse(decoded);\n            }\n        } catch (e) {\n            console.log(`Failed to parse URL parameter value: ${String(value)}`);\n            return;\n        }\n\n        params[key] = value;\n    });\n    return params;\n}\n\n\nexport function syncWithURL(conferenceConfig) {\n    const params = parseURLParams();\n    Object.keys(params)\n        .forEach(param => {\n            const key = param.replace('config.', '');\n            switch (key) {\n            case 'analytics.disabled':\n                conferenceConfig.analytics.disabled = params[param];\n                break;\n            case 'startWithAudioMuted':\n                conferenceConfig.startAudioMuted = params[param];\n                break;\n            case 'startWithVideoMuted':\n                conferenceConfig.startVideoMuted = params[param];\n                break;\n            case 'p2p.enabled':\n                conferenceConfig.p2p.enabled = params[param];\n                break;\n            default:\n                conferenceConfig[key] = params[param];\n            }\n        });\n    console.log(\"conferenceConfig\",conferenceConfig);    \n    return conferenceConfig;\n}\n\n\n\n\n\n\n\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: false,\n    flags: {\n        sendMultipleVideoStreams: true,\n        sourceNameSignaling: true\n    }\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const devConnectionConfig = {\n    hosts: {\n        domain: 'dev.sariska.io',\n        muc: 'muc.dev.sariska.io'\n    },\n    serviceUrl: 'wss://api.dev.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const conferenceConfig = {\n    enableLocalRecording: true,\n    enableVirtualBackground: false,\n    enableNoiseCancellation: false,\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true,\n    enableNoisyMicDetection: true,\n    createVADProcessor: true,\n    openBridgeChannel: 'websocket',\n    //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n    hiddenDomain: \"recorder.sariska.io\",\n    // startAudioMuted\n    // startVideoMuted\n    enableLayerSuspension: true, // - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping: {\n        pingInterval: -1 // analyticsInterval: 60000,\n    },\n    analytics: {\n        disabled: false\n        // rtcstatsEnabled: true,\n\n        // In order to enable rtcstats one needs to provide a endpoint url.\n        // rtcstatsEndpoint: wss://rtcstats-server-pilot.jitsi.net/,\n\n        // The interval at which rtcstats will poll getStats, defaults to 1000ms.\n        // If the value is set to 0 getStats won't be polled and the rtcstats client\n        // will only send data related to RTCPeerConnection events.\n        // rtcstatsPolIInterval: 1000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { syncWithURL } from \"./modules/util/parseURLParams\";\nimport { connectionConfig, conferenceConfig, devConnectionConfig } from './config';\nexport const DISCO_JIBRI_FEATURE = 'http://jitsi.org/protocol/jibri';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, roomName, isDev) {\n    let options;\n    const jwt = this.parseJwt(token);\n    this.name = roomName;\n    this.user = jwt.context.user;\n    options = isDev ? {...devConnectionConfig} : {...connectionConfig};\n    options.serviceUrl = `${options.serviceUrl}?room=${roomName}`;\n    this.options = options;\n    options.ownerId = jwt.context.group;\n    this.xmpp = new XMPP(options, token);\n    this.token = token;\n    this.isDev = isDev;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (e) {\n      return null;\n    }\n  };\n  \n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    const usernameOverride = jitsiLocalStorage.getItem('xmpp_username_override');\n    const passwordOverride = jitsiLocalStorage.getItem('xmpp_password_override');\n  \n    if (usernameOverride && usernameOverride.length > 0) {\n      options.id = usernameOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    if (passwordOverride && passwordOverride.length > 0) {\n      options.password = passwordOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = { ...conferenceConfig,\n        ...options\n    };\n    options = syncWithURL(options);\n    const name = this.name;\n    if (this.isDev) {\n        options = {...options, hiddenDomain: \"recorder.dev.sariska.io\"}\n    }\n    \n    if (options.iAmRecorder) {\n        this.addFeature(DISCO_JIBRI_FEATURE);\n    }\n\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(\n            (browser.isFirefox() && browser.isVersionLessThan('101'))\n            || browser.isIosBrowser()\n        );\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport SignalingLayerImpl from '../xmpp/SignalingLayerImpl';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new SignalingLayerImpl();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL,\n    timerWorkerScript\n} from './TimeWorker';\n\n/**\n * Represents a modified MediaStream that adds video as pip on a desktop stream.\n * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n * desktop stream.\n */\nexport default class JitsiStreamPresenterEffect {\n    /**\n     * Represents a modified MediaStream that adds a camera track at the\n     * bottom right corner of the desktop track using a HTML canvas.\n     * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n     * video stream.\n     *\n     * @param {MediaStream} videoStream - The video stream which is user for\n     * creating the canvas.\n     */\n    constructor(videoStream) {\n        const videoDiv = document.createElement('div');\n        const firstVideoTrack = videoStream.getVideoTracks()[0];\n        const { height, width, frameRate } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n\n        this._desktopElement = document.createElement('video');\n        this._videoElement = document.createElement('video');\n        videoDiv.appendChild(this._videoElement);\n        videoDiv.appendChild(this._desktopElement);\n        if (document.body !== null) {\n            document.body.appendChild(videoDiv);\n        }\n\n        // Set the video element properties\n        this._frameRate = parseInt(frameRate, 10);\n        this._videoElement.width = parseInt(width, 10);\n        this._videoElement.height = parseInt(height, 10);\n        this._videoElement.autoplay = true;\n        this._videoElement.srcObject = videoStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._videoElement.play();\n\n        // set the style attribute of the div to make it invisible\n        videoDiv.style.display = 'none';\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onVideoFrameTimer = this._onVideoFrameTimer.bind(this);\n    }\n\n    /**\n     * EventHandler onmessage for the videoFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onVideoFrameTimer(response) {\n        if (response.data.id === INTERVAL_TIMEOUT) {\n            this._renderVideo();\n        }\n    }\n\n    /**\n     * Loop function to render the video frame input and draw presenter effect.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderVideo() {\n        // adjust the canvas width/height on every frame incase the window has been resized.\n        const [ track ] = this._desktopStream.getVideoTracks();\n        const { height, width } = track.getSettings() ?? track.getConstraints();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._ctx.drawImage(this._desktopElement, 0, 0, this._canvas.width, this._canvas.height);\n        this._ctx.drawImage(this._videoElement, this._canvas.width - this._videoElement.width, this._canvas.height\n            - this._videoElement.height, this._videoElement.width, this._videoElement.height);\n\n        // draw a border around the video element.\n        this._ctx.beginPath();\n        this._ctx.lineWidth = 2;\n        this._ctx.strokeStyle = '#A9A9A9'; // dark grey\n        this._ctx.rect(this._canvas.width - this._videoElement.width, this._canvas.height - this._videoElement.height,\n            this._videoElement.width, this._videoElement.height);\n        this._ctx.stroke();\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the\n     * specified track, false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'desktop';\n    }\n\n    /**\n     * Starts loop to capture video frame and render presenter effect.\n     *\n     * @param {MediaStream} desktopStream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(desktopStream) {\n        const firstVideoTrack = desktopStream.getVideoTracks()[0];\n        const { height, width } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        // set the desktop element properties.\n        this._desktopStream = desktopStream;\n        this._desktopElement.width = parseInt(width, 10);\n        this._desktopElement.height = parseInt(height, 10);\n        this._desktopElement.autoplay = true;\n        this._desktopElement.srcObject = desktopStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._desktopElement.play();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._videoFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Presenter effect worker' });\n        this._videoFrameTimerWorker.onmessage = this._onVideoFrameTimer;\n        this._videoFrameTimerWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: 1000 / this._frameRate\n        });\n\n        return this._canvas.captureStream(this._frameRate);\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._videoFrameTimerWorker.postMessage({\n            id: CLEAR_INTERVAL\n        });\n        this._videoFrameTimerWorker.terminate();\n    }\n\n}\n","\nvar Module = (function() {\n  var _scriptDir = \"https://sdk.sariska.io/\";\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\nnull;var Module=typeof Module!==\"undefined\"?Module:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":1,\"maximum\":1+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5340496,DYNAMICTOP_PTR=97456;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile=\"rnnoise.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap,\"memory\":wasmMemory,\"table\":wasmTable};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"c\"]).apply(null,arguments)};var _rnnoise_init=Module[\"_rnnoise_init\"]=function(){return(_rnnoise_init=Module[\"_rnnoise_init\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _rnnoise_create=Module[\"_rnnoise_create\"]=function(){return(_rnnoise_create=Module[\"_rnnoise_create\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _rnnoise_destroy=Module[\"_rnnoise_destroy\"]=function(){return(_rnnoise_destroy=Module[\"_rnnoise_destroy\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=function(){return(_rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport rnnoiseWasmInit from 'rnnoise-wasm';\n\nimport RnnoiseProcessor from './RnnoiseProcessor';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream, videoType) {\n        return new Promise((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model, options) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport createTFLiteModule from './tflite';\nimport createTFLiteSIMDModule from './tflite-simd';\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @param {Function} dispatch - The Redux dispatch function.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground, dispatch) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n    let wasmCheck;\n\n    // Checks if WebAssembly feature is supported or enabled by/in the browser.\n    // Conditional import of wasm-check package is done to prevent\n    // the browser from crashing when the user opens the app.\n\n    try {\n        wasmCheck = require('wasm-check');\n        if (wasmCheck?.feature?.simd) {\n            tflite = await createTFLiteSIMDModule();\n        } else {\n            tflite = await createTFLiteModule();\n        }\n    } catch (err) {\n        return;\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}","import Logger from '@jitsi/logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\nimport {initSDKConfig} from './config';\nimport * as createAnalyticsEvent from './modules/util/createAnalyticsEvent';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        createPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options = {}) {\n        options = {...initSDKConfig, ...options};\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Multi-stream is supported only on endpoints running in Unified plan mode and the flag to disable unified\n        // plan also needs to be taken into consideration.\n        if (typeof options.enableUnifiedOnChrome !== 'undefined' && options.flags) {\n            options.flags.enableUnifiedOnChrome = options.enableUnifiedOnChrome;\n        }\n\n        // Configure the feature flags.\n        FeatureFlags.init(options.flags || { });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        if (window.location.href.indexOf(\"iAmRecorder\") >= 0) {\n            return [];\n         }\n\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});","// @flow\n\nimport JitsiStreamPresenterEffect from './JitsiStreamPresenterEffect';\n\n/**\n * Creates a new instance of JitsiStreamPresenterEffect.\n *\n * @param {MediaStream} stream - The video stream which will be used for\n * creating the presenter effect.\n * @returns {Promise<JitsiStreamPresenterEffect>}\n */\nexport function createPresenterEffect(stream) {\n    if (!MediaStreamTrack.prototype.getSettings\n        && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('JitsiStreamPresenterEffect not supported!'));\n    }\n\n    return Promise.resolve(new JitsiStreamPresenterEffect(stream));\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","export function createNetworkInfoEvent({ isOnline, networkType, details }) {\n    const attributes = { isOnline };\n\n    // Do no include optional stuff or Amplitude handler will log warnings.\n    networkType && (attributes.networkType = networkType);\n    details && (attributes.details = details);\n\n    return {\n        action: 'network.info',\n        attributes\n    };\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./SariskaMediaTransport').default;\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n        this._faceExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the face expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFaceExpressions() {\n        return this._faceExpressions;\n    }\n\n    /**\n     * Sets the face expressions of the user.\n     *\n     * @param {Object} faceExpressions - object with face expressions.\n     * @returns {void}\n     */\n    setFaceExpressions(faceExpressions) {\n        this._faceExpressions = faceExpressions;\n    }\n\n    /**\n     * Adds a new face expression to speaker stats.\n     *\n     * @param  {string} faceExpression\n     * @param {number} duration\n     */\n    addFaceExpression(faceExpression, duration) {\n        this._faceExpressions[faceExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","var createTFLiteSIMDModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,s={};for(o in a)a.hasOwnProperty(o)&&(s[o]=a[o]);var u,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!u&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||k(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in s)s.hasOwnProperty(o)&&(a[o]=s[o]);s=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&k(\"no native wasm support detected\");var _=!1;var A,I,M,E,R=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function S(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&R)return R.decode(e.subarray(n,a));for(var o=\"\";n<a;){var s=e[n++];if(128&s){var u=63&e[n++];if(192!=(224&s)){var i=63&e[n++];if((s=224==(240&s)?(15&s)<<12|u<<6|i:(7&s)<<18|u<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(s);else{var c=s-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&s)<<6|u)}else o+=String.fromCharCode(s)}return o}function O(e){A=e,a.HEAP8=I=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=E=new Int32Array(e),a.HEAPU8=M=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var C,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,D=null,L=null;function k(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function U(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var j=\"data:application/octet-stream;base64,\";function F(e){return U(e,j)}var q=\"file://\";function B(e){return U(e,q)}var N,G=\"https://sdk.sariska.io/tflite-simd.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){k(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?C.get(t)():C.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}F(G)||(G=G),N=u?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return E[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),O(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(S(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,E[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?S(M,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){k()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return E[n>>2]=t/1e3|0,E[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){M.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=M.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;E[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)I[n++>>0]=e.charCodeAt(r);t||(I[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();E[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),E[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var s=E[n+8*o>>2],u=E[n+(8*o+4)>>2],i=0;i<u;i++)Z.printChar(e,M[s+i]);a+=u}return E[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,O((v=a.asm.q).buffer),C=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),L)){var n=L;L=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),k(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||F(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(L=function e(){$||ae(),$||(L=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteSIMDModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteSIMDModule}):\"object\"==typeof exports&&(exports.createTFLiteSIMDModule=createTFLiteSIMDModule);","var createTFLiteModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,u={};for(o in a)a.hasOwnProperty(o)&&(u[o]=a[o]);var s,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,s=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!s&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||U(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in u)u.hasOwnProperty(o)&&(a[o]=u[o]);u=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&U(\"no native wasm support detected\");var _=!1;var A,E,R,I,M=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function O(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&M)return M.decode(e.subarray(n,a));for(var o=\"\";n<a;){var u=e[n++];if(128&u){var s=63&e[n++];if(192!=(224&u)){var i=63&e[n++];if((u=224==(240&u)?(15&u)<<12|s<<6|i:(7&u)<<18|s<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(u);else{var c=u-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&u)<<6|s)}else o+=String.fromCharCode(u)}return o}function C(e){A=e,a.HEAP8=E=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=I=new Int32Array(e),a.HEAPU8=R=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var S,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,L=null,k=null;function U(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function j(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var F=\"data:application/octet-stream;base64,\";function D(e){return j(e,F)}var q=\"file://\";function B(e){return j(e,q)}var N,G=\"https://sdk.sariska.io/tflite.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){U(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?S.get(t)():S.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}D(G)||(G=G),N=s?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return I[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),C(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(O(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,I[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?O(R,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){U()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return I[n>>2]=t/1e3|0,I[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){R.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=R.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;I[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)E[n++>>0]=e.charCodeAt(r);t||(E[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();I[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),I[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var u=I[n+8*o>>2],s=I[n+(8*o+4)>>2],i=0;i<s;i++)Z.printChar(e,R[u+i]);a+=s}return I[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,C((v=a.asm.q).buffer),S=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==L&&(clearInterval(L),L=null),k)){var n=k;k=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),U(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||D(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(k=function e(){$||ae(),$||(k=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteModule}):\"object\"==typeof exports&&(exports.createTFLiteModule=createTFLiteModule);","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff output\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";function e(e,n){if(!r)return!1;const u=e.buffer;let i=l.get(u);if(null==i){if((i=t.validate(u))&&n)try{new t.Instance(new t.Module(u)).exports[0]()}catch(e){i=!1}l.set(u,i)}return i}const t=globalThis.WebAssembly,r=\"object\"==typeof t,n=e=>void 0!==e,u=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),i=(...e)=>Uint32Array.of(1836278016,1,...e),o=(...e)=>i(1610679297,33751040,...e,40239360,259),a=(...e)=>u(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),s=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),g=(...e)=>s(...e,2842,4096,28164,28001,357,260,256,560,259,0),l=new WeakMap,f=i(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=u(5,3,1,4,1,0,8,4,110,97,109,101,2,1,0),y=s(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),p=i(1610679297,33751040,134873089,100664833,185276736),m=u(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),b=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),d=g(3082,2561,17152,0,0,252),A=g(2058,1537,16640,49152),U=o(101318657,301990913,268438272,1835101700,17039717),x=a(5,4,1,3,1,1,10,7,1,5,0,254,3,0),h=o(84344833,6357249,17369600,4259847,186257917,1845758464),v=a(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>r&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return r&&n(t.instantiateStreaming)},feature:{get bigInt(){return e(f,!0)},get bulk(){return e(y)},get exceptions(){return e(p)},get memory64(){return e(c)},get mutableGlobal(){return e(m)},get multiValue(){return e(b)},get saturateConversions(){return e(d)},get signExtensions(){return e(A)},get tailCall(){return e(U)},get threads(){return e(x)},get simd(){return e(h)},get references(){return e(v)},get typeReflection(){return r&&n(t.Memory.type)},get funcReferences(){return r&&n(t.Function)}}};","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * AV1 codec mime type.\n     */\n    AV1: 'av1',\n\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED = 'rtc.lastn_endpoint_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const LASTN_ENDPOINT_CHANGED = RTCEvents.LASTN_ENDPOINT_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","JitsiConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","FORWARDED_SOURCES_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","FACE_LANDMARK_ADDED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","SUBTITLES_RECEIVED","ANALYTICS_EVENT_RECEIVED","TRACK_UPDATED","CALLSTATS_SCRIPT_URL","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","error","options","devices","name","this","gum","constraints","Array","isArray","slice","undefined","message","join","constraintName","constraint","video","indexOf","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","Error","stack","prototype","Object","create","constructor","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","action","attributes","source","type","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","match","version","_detectNWJS","_detectReactNative","product","length","DummyLocalStorage","EventEmitter","key","value","super","defineProperty","enumerable","configurable","writable","clear","_storage","keys","getItem","keyName","setItem","keyValue","removeItem","n","serialize","JSON","stringify","JitsiLocalStorage","window","localStorage","_localStorageDisabled","ignore","console","warn","isLocalStorageDisabled","emit","dontEmitChangedEvent","i","localStorageContent","jitsiLocalStorage","logger","getLogger","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","getBrowserName","getBrowserVersion","Number","parseInt","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","info","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","platform","Boolean","test","isEngine","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","matches","isSupported","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","addEventListener","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","stream","ReadableStream","postMessage","supportsAudioRed","codecs","some","codec","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","process","versions","chromium","ua","reset","disposed","analyticsHandlers","Set","cache","permanentProperties","conferenceName","addPermanentProperties","browser","dispose","size","forEach","handler","setAnalyticsHandlers","handlers","_setUserProperties","event","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","push","splice","e","require","wrtcFuncNames","reportType","_fabrics","CallStats","msg","backend","log","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","values","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","data","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","ssrc","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","apply","GlobalOnErrorHandler","debugMethods","originalReportError","args","call","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","then","result","parse","addresses","catch","devicesData","_reportEvent","conferenceID","overall","comment","Promise","resolve","reject","sendUserFeedback","status","reason","mute","tpc","remoteUserID","add","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","start","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","context","LocalStatsCollector","interval","callback","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","reduce","a","b","filterPositiveValues","filter","suspend","isLocalStatsSupported","resume","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","array","Uint8Array","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","stop","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","emitter","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","list","entries","getEntries","task","Math","max","duration","observer","observe","buffered","startTime","Date","now","longTasksIntervalId","_lastTimeStamp","rate","StatisticsEvents","stopObserver","disconnect","MediaType","init","flags","_runInLiteMode","runInLiteMode","_sourceNameSignaling","sourceNameSignaling","_sendMultipleVideoStreams","sendMultipleVideoStreams","_ssrcRewriting","ssrcRewritingOnBridgeSupported","_usesUnifiedPlan","enableUnifiedOnChrome","isMultiStreamSupportEnabled","isRunInLiteModeEnabled","isSourceNameSignalingEnabled","isSsrcRewritingSupported","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","bandwidth","packetLoss","transport","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","Map","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","errorCallback","callErrorHandler","startAudioLevelStats","audioLevels","getAudioLevels","hasOwnProperty","getStats","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","track","getTrackBySSRC","isAudioTrack","FeatureFlags","sourceName","getSourceName","width","height","codecDesc","participantId","getParticipantId","userResolutions","userFramerates","userCodecs","audio","total","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","v","isNaN","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","timestamp","bitrateKbps","byteSentStats","nominated","state","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","get","remoteCandidateId","localUsedCandidate","localCandidateId","ip","address","port","localip","protocol","conferenceStatsTransport","t","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","id","set","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","bytesSent","codecId","codecShortType","split","kind","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getSsrcByTrackId","trackIdentifier","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getLocalSSRC","AUDIO","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","ScriptUtil","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","analyticsEventEmitter","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","listener","on","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","removeAllListeners","stopLocalStats","startCallStats","has","endsWith","roomName","lastIndexOf","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","userId","sendGetUserMediaFailed","err","formatJitsiTrackErrorForCallStats","sendLog","m","globalSubSet","next","csPerStats","sendApplicationLog","sendFeedback","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","addAnalyticsEventListener","removeAnalyticsEventListener","JitsiConferenceEventManager","xmppListeners","session","p2pJingleSession","jvbJingleSession","isMuted","getType","JitsiTrackEvents","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","EventEmitterForwarder","addListener","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","getParticipantById","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","forward","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","leave","_onConferenceRestarted","_onIceConnectionFailed","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","node","setProperty","tagName","substring","onMemberKicked","bind","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","role","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","participants","_hidden","lastDominantSpeaker","roomjid","performance","ufrag","isVideoTrack","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","config","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","find","p","getJid","enabled","setupStatisticsListeners","level","setAudioLevel","startSilent","onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","ParticipantConnectionStatus","ACTIVE","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","off","participantIds","clearTimeout","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","timeout","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","setTimeout","JitsiParticipant","displayName","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","_features","getConference","getProperty","getTracks","jitsiTrack","isWebRTCTrackMuted","oldValue","getDisplayName","getStatsID","isHidden","isHiddenFromRecorder","user","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","getConnectionJid","_connectionJid","setConnectionJid","newJid","JitsiConnectionEvents","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","JitsiConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","promise","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","removeEventListener","kJitsiE2EE","Symbol","E2EEcontext","sharedKey","baseUrl","ljm","document","querySelector","idx","src","workerUrl","workerBlob","Blob","URL","createObjectURL","_worker","Worker","onerror","operation","cleanup","cleanupAll","handleReceiver","receiver","transform","receiverStreams","readableStream","readable","writableStream","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","index","v4","REQ_TIMEOUT","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","d","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","body","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","newValue","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","events","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","async","keyBytes","crypto","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","hash","ArrayBuffer","ratchet","getRandomValues","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","each","_","el","getAttribute","category","Caps","connection","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","f","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","response","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","sort","accumulatedValue","tmp","sortedFeatures","b64_sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","min","retry","minDelay","base","floor","random","pow","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","url","service","search","pattern","oldToken","replace","toString","cancel","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","includes","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","c","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","shift","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","readyState","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_maybeStartWSKeepAlive","plugin","addHandler","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","flush","enable","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","send","stanza","elem","errback","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","obj","removed","media","approved","whitelists","newWhitelists","oldList","newList","x","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","j","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","username","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","sessionId","substr","createExpBackoffTimer","step","count","Moderator","origin","location","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","focus","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","attr","parseConfigOptions","authenticationEnabled","IDENTITY_UPDATED","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","text","anonymousdomain","waitMs","retrySec","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","str","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","parser","packet2JSON","xmlElement","nodes","child","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","ChatRoom","password","XMPP","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","getElementsByTagName","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","isTranscriber","innerHTML","toLowerCase","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","tags","hiddenFromRecorderFeatureEnabled","tag","groupInfo","group","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","$build","s","_createSsrcGroupExtension","ssrcGroupCompactJson","semantics","_getOrCreateRtpDescription","jingle","description","content","appendChild","expandSourcesFromJson","jsonMessageXml","sources","audioRtpDescription","videoRtpDescription","ssrcMap","ssrcs","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","MediaDirection","ScreenObtainer","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","setScreenSharingResolutionConstraints","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","findLine","parseICEUfrag","parseICEPwd","line","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","parseMLine","parts","proto","pop","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","priority","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","numSsrcs","map","ssrcInfo","numGroups","ssrcGroups","primarySsrc","fidGroup","simGroup","generateSsrc","RandomUtil","getSsrcAttribute","mLine","attributeName","ssrcLine","attribute","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","rtp","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","fmtp","item","rtxApts","rtxPts","keepPts","rtcpFb","SDP","mediaI","raw","arrayEquals","array1","array2","l","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","mid","clonedeep","RECVONLY","msid","concat","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","k","rtcpFbToJingle","availableSsrc","ssrcParameters","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","senders","SENDRECV","transportToJingle","sctpport","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fb","hasAttribute","fromJingle","contents","jingle2media","sctp","payloadType","setAttribute","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","fallback","fn","wrap","defer","setImmediate$1","handlePromise","invokeCallback","isAsync","toStringTag","wrapAsync","asyncFn","func","awaitify","arity","cbArgs","applyEach","eachfn","fns","callArgs","that","cb","_asyncMap","arr","iteratee","results","counter","_iteratee","iterCb","isArrayLike","breakLoop","once","wrapper","callFn","assign","onlyOnce","asyncEachOfLimit","generator","limit","done","canceled","awaiting","running","replenish","iterDone","iterateeCallback","handleError","eachOfLimit","RangeError","asyncIterator","isAsyncIterable","nextElem","coll","len","createArrayIterator","okeys","iterator","getIterator","createES2015Iterator","createIterator","looping","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","eachOfSeries$1","DLL","head","tail","removeLink","prev","empty","insertAfter","newNode","insertBefore","setInitial","toArray","cur","testFn","curr","dll","queue","worker","concurrency","numRunning","workersList","drain","saturated","unsaturated","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","rej","promiseCallback","q","started","_tasks","_createCB","tasks","buffer","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","paused","datum","pushAsync","kill","unshiftAsync","pause","defineProperties","memo","mapLimit$1","concatLimit$1","val","mapResults","_createTester","check","getResult","testResult","testPassed","consoleFunc","resultArgs","_withoutIndex","bool","_fn","_test","truth","eachLimit$2","eachSeries$1","filterArray","truthValues","filterGeneric","_filter","sync","innerArgs","ensureAsync","newObj","taskCb","TypeError","criteria","comparator","left","right","rest","taskIndex","nextTask","AsyncQueue","_queue","_processQueueTasks","items","_stopped","finishedCallback","shutdown","JingleSessionState","PENDING","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","MediaSessionEvents","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","receiverConstraints","sourceFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_sourceReceiverConstraints","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","remoteSourceMaxFrameHeights","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","usesUnifiedPlan","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","H264","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","getRemoteSourcesRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","candidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","addTrack","all","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","RTCSessionDescription","_responderRenegotiate","jingleOfferAnswerIq","audioTracks","tracks","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","sourceReceiverConstraints","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","jitsiLocalTrack","getLocalVideoTracks","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","close","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTracks","oldLocalSDP","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","setSourceName","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","sourceMaxFrameHeights","parseSourceMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","errResponse","errorElSel","code","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","integerHash","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","href","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","deploymentInfo","trace","errStatusCapture","exec","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","caps","initFeaturesList","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","deleteHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","backendRelease","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","trim","header","sendFaceExpressionEvent","expression","faceExpression","jsonString","users","created_timestamp","force","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","roomPassword","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","mode","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","sendSourceVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","forwardedSources","videoConstraints","onclose","jsonObject","DEFAULT_CONSTRAINTS","ideal","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","createElement","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","getStreamID","getTrackID","element","srcObject","arguments","isDeviceChangeAvailable","getAudioOutputDevice","ex","pcConstraints","screenObtainer","isDeviceListAvailable","enumerateDevices","ds","_getUserMedia","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","r","cameraDeviceId","facingMode","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","MediaStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","trackId","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","getSettings","metadata","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackAsUnmute","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","successCallback","_removeLocalTrackAsMute","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","PRESENTER","streamInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","removeTrackPromise","removeTrack","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","unmute","opts","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","every","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","sessionVersion","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","SignalingLayer","getSSRCOwner","getPeerSourceInfo","getTrackSourceName","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","ssrcCache","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","mediaSection","streamAndTrackIDs","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","videoMlines","nameExists","trackIndex","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","primarySsrcMsid","primarySsrcCname","cname","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","clearSsrcCache","setSsrcCache","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","numOfLayers","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","addAssociatedAttributes","simSsrcs","simSsrc","_generateSsrc","mungeLocalDescription","simulcastSsrcs","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","restoringTimer","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","figureOutStreamingStatus","_onForwardedSourcesChanged","onForwardedSourcesChanged","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","oldStreamingStatus","streamingStatus","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","listenerCount","_initTrackStreamingStatus","_disposeTrackStreamingStatus","REMOTE_TRACK_MUTE","REMOTE_TRACK_UNMUTE","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","VP8","localStreamEncodingsConfig","maxBitrate","scaleResolutionDownBy","_getStreamEncodings","localTrack","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","getTransceivers","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","sendEncodings","addTransceiver","calculateEncodingsActiveState","localVideoTrack","newHeight","encoding","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","isNewLocalSource","transceiver","currentDirection","setEncodings","parameters","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_capScreenshareBitrate","_usesTransceiverCodecPreferences","interop","Simulcast","explodeRemoteSimulcast","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","time","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","names","_processStat","stat","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getReceiversByEndpointIds","endpoints","receivers","getRemoteTracks","remoteTrackIds","getReceivers","audioReceivers","getSynchronizationSources","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","toUpperCase","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingScreen","_mungeCodecOrder","codecPreference","VP9","bitrates","hdBitrate","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","addStream","_removeStream","removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","getSenders","negotiationNeeded","oldTrackSSRC","mediaActive","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","_mungeInactive","_initializeDtlsTransport","onstatechange","currentDescription","mungeRemoteDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","write","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","ULPFEC","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIndex","sourceIdentifier","newSSRCNum","oldSSRCNum","usernameFragment","activeStreams","currNumSsrcs","ConnectionQualityEvents","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_forwardedSources","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","oldForwardedSources","setNewReceiverVideoConstraints","setVideoType","sendSourceVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","sdpSemantics","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","pos","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","target","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","DESKTOP","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","numRequestsWithResponses","totalNumRequests","JitsiE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","RecordingAdapter","exportRecordedData","setMicDevice","_getAudioStream","SariskaMediaTransport","OggAdapter","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","format","shouldEnable","_stream","MediaRecorder","ondataavailable","_saveMediaData","AbstractAudioContextAdapter","_sampleRate","_replaceMic","newStream","newSource","WavAdapter","_wavBuffers","_wavLength","_data","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","view","DataView","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","setUint8","output","offset","inputBuffers","input","sampleCount","bufferCount","o","setInt16","floatTo16BitPCM","string","lng","charCodeAt","FlacAdapter","_onWorkerMessage","_encoder","_stopPromiseResolver","command","promiseInitWorker","_loadWebWorker","_initWorkerPromiseResolver","bps","buf","blob","blobUrl","webkitURL","revokeObjectURL","highPrecisionTime","timing","navigationStart","SessionEventType","freeze","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","LOCAL_STORAGE_KEY","sessionManager","_loadMetadata","dataStr","dataObject","Bourne","_sessionsMetadata","_saveMetadata","createSession","sessionToken","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","beginSegment","getCurrentSegmentIndex","end","endSegment","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","currentEvent","COMMAND_START","COMMAND_STOP","COMMAND_PING","PROPERTY_STATS","RECORDING_FORMATS","ControllerState","IDLE","STARTING","RECORDING","STOPPING","FAILED","RecordingController","registerEvents","getParticipantsStats","_onStartCommand","_onStopCommand","_onPingCommand","_doStartRecording","_doStopRecording","_updateStats","_switchToNewSession","_registered","addCommandListener","sendCommandOnce","onStateChanged","delegate","_onStateChanged","onNotify","_onNotify","onWarning","_onWarning","startRecording","switchFormat","removeCommand","sendCommand","_getRandomToken","_format","stopRecording","_currentSessionToken","downloadRecordedData","_adapters","fileName","base64Url","style","click","removeChild","downloadBlob","_micDeviceId","String","_state","_isMuted","newFormat","getLocalStats","currentSessionToken","isRecording","recordedBytes","recordedLength","recordingStats","isSelf","localId","_changeState","messageKey","messageParams","_createRecordingAdapter","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","_getDefaultSourceReceiverConstraints","remoteVideoTracks","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","isEndpointsFormat","isSourcesFormat","p2pSession","mappedConstraints","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","sourceConstraints","getActiveMediaSession","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","_selectSendMaxFrameHeight","activeMediaSession","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","pathname","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFaceLandmarkAdd","oldDominantSpeaker","newDominantSpeaker","setDominantSpeaker","savedUser","markAsHasLeft","newName","setDisplayName","addFaceExpression","newStats","speakerStatsToUpdate","newParticipant","totalDominantSpeakerTime","setFaceExpressions","faceExpressions","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","instantiateTrackRecorder","updateNames","originalStream","dataEvent","recorderToRemove","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","SphinxService","recordingResult","verify","formatResponse","audioBlob","sphinxURL","toReturn","getURL","audioFileBlob","XMLHttpRequest","onreadystatechange","DONE","responseText","open","setRequestHeader","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","processVersions","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","setTrackMuteStatus","setTrackVideoType","existingName","INITIAL_STATE","localTracksDuration","startedTime","camera","desktop","FINAL_STATE","calculateLocalTrackDuration","newDuration","LocalTracksDuration","newLocalTracksDuration","createLocalTracksDurationEvent","APP","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_audioSenderLimitReached","_videoSenderLimitReached","handleSubtitles","enableLocalRecording","recordingController","enableAnalytics","iAmRecorder","robot","_room","membersCount","getParticipantsWithoutHidden","resourceCreator","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","removeCommandListener","sendTextMessage","sendPrivateTextMessage","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_setNewVideoType","videoTypeChanged","videoTypeTagName","trackVideoType","legacyTypeChanged","presenceChanged","audioMuteChanged","videoMuteChanged","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","isVideoActive","features_jigasi","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","first","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","getLocalUser","ownerId","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","audioMuteStatusChanged","videoMuteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","pastMessage","JSON_TYPE_TRANSCRIPTION_RESULT","JSON_TYPE_TRANSLATION_RESULT","translationLanguage","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","final","transcript","is_interim","stability","stable","unstable","finalText","fellowParticipantName","finalPaylaod","startLocalRecording","stopLocalRecording","startSIPVideoCall","stopSIPVideoCall","blacklist","syncWithURL","conferenceConfig","dontParse","paramStr","paramParts","firstParam","part","param","decoded","parseURLParams","initSDKConfig","connectionConfig","clientNode","devConnectionConfig","enableVirtualBackground","enableNoiseCancellation","openBridgeChannel","enableLayerSuspension","DISCO_JIBRI_FEATURE","JitsiConnection","isDev","jwt","parseJwt","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","JitsiMediaDevicesEvents","atob","usernameOverride","passwordOverride","setToken","initJitsiConference","getLogs","DEVICE_LIST_CHANGED","PERMISSIONS_CHANGED","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","timerWorkerScript","JitsiStreamPresenterEffect","videoDiv","firstVideoTrack","_canvas","_ctx","getContext","_desktopElement","_videoElement","_frameRate","autoplay","play","display","_onVideoFrameTimer","_renderVideo","_desktopStream","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","_videoFrameTimerWorker","captureStream","Module","readyPromiseResolve","moduleOverrides","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","arguments_","importScripts","readBinary","scriptDirectory","currentScript","xhr","responseType","wasmBinary","wasmMemory","out","WebAssembly","HEAPU8","HEAP32","wasmTable","Table","ABORT","updateGlobalBufferAndViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float64Array","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","arg","Memory","byteLength","DYNAMICTOP_PTR","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","abort","RuntimeError","isDataURI","filename","prefix","path","wasmBinaryFile","getBinary","emscripten_realloc_buffer","grow","___wasm_call_ctors","calledRun","asmLibraryArg","dest","num","copyWithin","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","receiveInstance","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","binary","instantiate","instantiateStreaming","instantiateAsync","createWasm","run","doRun","postRun","preRun","runCaller","ready","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_context","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","HEAPF32","_convertTo16BitPCM","f32Array","_rnnoise_destroy","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","_handleWorkerAction","_initScreenshotCapture","_streamWorker","desktopTrack","_streamHeight","_streamWidth","storedCanvasContext","getImageData","_storedImageData","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","ImageData","onloadeddata","segmentationDimensions","Logger","getAnalyticsAttributesFromOptions","video_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","createPresenterEffect","MediaStreamTrack","createRnnoiseProcessor","rnnoiseWasmInit","mod","createScreenshotCaptureEffect","createVirtualBackgroundEffect","dispatch","tflite","wasmCheck","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","ok","arrayBuffer","_loadModel","constants","recording","BUSY","ERROR","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errors","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","setLogLevel","setLogLevelById","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","createAnalyticsEvent","hint","contentHint","precallTest","util","AuthUtil","isLocalStats","_userId","_isLocalStats","_dominantSpeakerStart","_hasLeft","_faceExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","getFaceExpressions","u","y","onload","readbuffer","read","scriptArgs","quit","print","printErr","g","h","w","thisProgram","noExitRuntime","A","I","M","E","R","TextDecoder","S","subarray","decode","fromCharCode","O","HEAP8","HEAP16","HEAPU16","HEAPU32","HEAPF64","INITIAL_MEMORY","C","T","P","H","ne","W","D","L","onAbort","U","preloadedImages","preloadedAudios","F","B","N","G","z","X","hrtime","dateNow","Y","J","te","K","Q","V","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Z","mappings","printChar","varargs","getStr","get64","ee","onExit","re","hardwareConcurrency","asm","monitorRunDependencies","instantiateWasm","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","___errno_location","ae","onRuntimeInitialized","preInit","getTokenAuthUrl","urlPattern","roleUpgrade","srcEvent","Function","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","currentExecutingScript","loadScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","parentNode","char","abs","generateUsername","internals","firstOptions","reviver","protoAction","scan","SyntaxError","__proto__","safeParse","ignoreError","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","reschedule","isReady","cachedQueue","storeLogs","consoleTransport","globalTransports","addGlobalTransport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","transports","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","grammar","reg","subtype","sessionConfig","raddr","maxMessageSize","RegExp","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","writer","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","_restoreSimulcast","enableConferenceFlag","order","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","getParser","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","is","versionName","vendor","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","thrownErr","near","far","ReflectOwnKeys","Reflect","ReflectApply","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","_addListener","existing","warning","newListener","warned","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","copy","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","prependOnceListener","position","originalListener","spliceOne","rawListeners","eventNames","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","global","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","getMapData","getValue","isFunction","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","delta","colorDelta","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","SDPUtils","localCName","generateIdentifier","splitLines","splitSections","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","writeCandidate","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","algorithm","getDtlsParameters","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","sctpPort","sctpMapLines","writeSctpDescription","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","netType","addressType","isValidSDP","charAt","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","str_hmac_sha1","str_sha1","utils","cookies","cookieName","expires","cookieObj","isObj","cookieValue","escape","unescape","cookie","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","css","validTag","validAttribute","validCSS","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNodes","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlTextNode","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","loadXML","getText","nodeValue","copyElement","_i","createHtml","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","lineNumber","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","removeAttribute","impNode","xmlGen","importNode","newElem","fragment","xhtml","Handler","ns","matchBare","matchBareFromJid","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","TimedHandler","period","lastCalled","Connection","_this2","Websocket","Bosh","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","mechanisms","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","authzid","servtype","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","xmlOutput","nextValidRid","_queueData","_this3","timeoutHandler","deleteTimedHandler","addTimedHandler","_this4","iqtype","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","statusChanged","_dataRecv","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_i5","_hand","_connect_cb","_callback","bodyWrap","mech","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","_onLegacyAuthIQResult","_auth2_cb","_this7","serverSignature","streamfeature_handlers","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","_this8","_i6","_thand","SASLMechanism","auth_str","test_cnonce","cnonce","nonce","Hi","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","dead","age","timeDead","_newXHR","getResponse","responseXML","documentElement","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","Strophe$2","$build$2","new_service","_buildStream","_check_streamerror","connectstatus","errorString","_onOpen","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","_streamWrap","CLOSED","closeString","rawStanza","firstChild","startString","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","byteToHex","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","ceil","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","namespace","stringToBytes","uuidToBytes","DNS","rnds","_sha","validate","Instance","globalThis","of","support","supportStreaming","bigInt","bulk","exceptions","memory64","mutableGlobal","multiValue","saturateConversions","signExtensions","tailCall","threads","references","typeReflection","funcReferences","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","wrappedCallback","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","RTCIceGatherer","compactObject","isEmptyObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","Event","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","selector","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","fixNegotiationNeeded","getConfiguration","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","CAMERA","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","AV1","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_REMOVED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","nmd","paths","__webpack_exports__"],"sourceRoot":""}