{"version":3,"file":"sariska-media-transport.min.js","mappings":"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AAK,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAA2B,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,EAAE,OAAO,IAAI,KAAK,IAAI,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,EAAE,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","sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/Logger.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./node_modules/async/lib/async.js","webpack://SariskaMediaTransport/./JitsiConferenceErrors.js","webpack://SariskaMediaTransport/./JitsiConferenceEvents.js","webpack://SariskaMediaTransport/./modules/statistics/constants.js","webpack://SariskaMediaTransport/./JitsiTrackErrors.js","webpack://SariskaMediaTransport/./JitsiTrackError.js","webpack://SariskaMediaTransport/./service/statistics/AnalyticsEvents.js","webpack://SariskaMediaTransport/./service/statistics/Events.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./modules/browser/index.js","webpack://SariskaMediaTransport/./modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./modules/util/MathUtil.js","webpack://SariskaMediaTransport/./modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./service/RTC/MediaType.js","webpack://SariskaMediaTransport/./modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./modules/statistics/statistics.js","webpack://SariskaMediaTransport/./JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./JitsiTrackEvents.js","webpack://SariskaMediaTransport/./modules/connectivity/ParticipantConnectionStatus.js","webpack://SariskaMediaTransport/./JitsiParticipant.js","webpack://SariskaMediaTransport/./JitsiConnectionEvents.js","webpack://SariskaMediaTransport/./JitsiConnectionErrors.js","webpack://SariskaMediaTransport/./modules/util/Deferred.js","webpack://SariskaMediaTransport/./modules/util/Listenable.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./modules/e2ee/KeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://SariskaMediaTransport/./node_modules/uuid/wrapper.mjs","webpack://SariskaMediaTransport/./modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./modules/e2ee/ManagedKeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./modules/util/Retry.js","webpack://SariskaMediaTransport/./modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/./JitsiTranscriptionStatus.js","webpack://SariskaMediaTransport/./modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./modules/xmpp/BreakoutRooms.js","webpack://SariskaMediaTransport/./modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./modules/settings/Settings.js","webpack://SariskaMediaTransport/./modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./modules/flags/FeatureFlags.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleHelperFunctions.js","webpack://SariskaMediaTransport/./modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./modules/sdp/SDP.js","webpack://SariskaMediaTransport/./modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionState.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./modules/xmpp/MediaSessionEvents.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./service/RTC/SignalingEvents.js","webpack://SariskaMediaTransport/./service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./modules/sdp-interop/transform.js","webpack://SariskaMediaTransport/./modules/sdp-interop/interop.js","webpack://SariskaMediaTransport/./modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./modules/sdp/SdpSimulcast.ts","webpack://SariskaMediaTransport/./modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./modules/RTC/RTC.js","webpack://SariskaMediaTransport/./service/connectivity/ConnectionQualityEvents.js","webpack://SariskaMediaTransport/./modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./modules/detection/DetectionEvents.js","webpack://SariskaMediaTransport/./modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./service/e2eping/E2ePingEvents.js","webpack://SariskaMediaTransport/./modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./modules/transcription/trackRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/word.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGWConstants.js","webpack://SariskaMediaTransport/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./JitsiConference.js","webpack://SariskaMediaTransport/./modules/util/parseURLParams.js","webpack://SariskaMediaTransport/./config/index.js","webpack://SariskaMediaTransport/./JitsiConnection.js","webpack://SariskaMediaTransport/./JitsiMediaDevicesEvents.js","webpack://SariskaMediaTransport/./JitsiMediaDevices.js","webpack://SariskaMediaTransport/./modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./modules/proxyconnection/constants.js","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/JitsiStreamPresenterEffect.js","webpack://SariskaMediaTransport/./node_modules/rnnoise-wasm/dist/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./SariskaMediaTransport.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./dom/var/arr.js","webpack://SariskaMediaTransport/./dom/var/getProto.js","webpack://SariskaMediaTransport/./dom/var/slice.js","webpack://SariskaMediaTransport/./dom/var/flat.js","webpack://SariskaMediaTransport/./dom/var/push.js","webpack://SariskaMediaTransport/./dom/var/indexOf.js","webpack://SariskaMediaTransport/./dom/var/class2type.js","webpack://SariskaMediaTransport/./dom/var/toString.js","webpack://SariskaMediaTransport/./dom/var/hasOwn.js","webpack://SariskaMediaTransport/./dom/var/fnToString.js","webpack://SariskaMediaTransport/./dom/var/ObjectFunctionString.js","webpack://SariskaMediaTransport/./dom/var/document.js","webpack://SariskaMediaTransport/./dom/core/DOMEval.js","webpack://SariskaMediaTransport/./dom/core/toType.js","webpack://SariskaMediaTransport/./dom/core.js","webpack://SariskaMediaTransport/./dom/var/isWindow.js","webpack://SariskaMediaTransport/./dom/var/support.js","webpack://SariskaMediaTransport/./dom/core/nodeName.js","webpack://SariskaMediaTransport/./dom/var/documentElement.js","webpack://SariskaMediaTransport/./dom/var/pop.js","webpack://SariskaMediaTransport/./dom/selector/var/whitespace.js","webpack://SariskaMediaTransport/./dom/var/isIE.js","webpack://SariskaMediaTransport/./dom/selector/rbuggyQSA.js","webpack://SariskaMediaTransport/./dom/selector/contains.js","webpack://SariskaMediaTransport/./dom/selector/escapeSelector.js","webpack://SariskaMediaTransport/./dom/var/sort.js","webpack://SariskaMediaTransport/./dom/selector/uniqueSort.js","webpack://SariskaMediaTransport/./dom/selector.js","webpack://SariskaMediaTransport/./dom/core/access.js","webpack://SariskaMediaTransport/./dom/var/rnothtmlwhite.js","webpack://SariskaMediaTransport/./dom/attributes/attr.js","webpack://SariskaMediaTransport/./dom/attributes/prop.js","webpack://SariskaMediaTransport/./dom/core/stripAndCollapse.js","webpack://SariskaMediaTransport/./dom/core/var/rsingleTag.js","webpack://SariskaMediaTransport/./dom/traversing/var/rneedsContext.js","webpack://SariskaMediaTransport/./dom/traversing/findFilter.js","webpack://SariskaMediaTransport/./dom/core/init.js","webpack://SariskaMediaTransport/./dom/attributes/classes.js","webpack://SariskaMediaTransport/./dom/exports/global.js","webpack://SariskaMediaTransport/./dom/attributes/val.js","webpack://SariskaMediaTransport/./dom/core/parseXML.js","webpack://SariskaMediaTransport/./dom/manipulation.js","webpack://SariskaMediaTransport/./dom/jquery.js","webpack://SariskaMediaTransport/./index.js","webpack://SariskaMediaTransport/./modules/sdp-simulcast/index.js","webpack://SariskaMediaTransport/./modules/sdp-simulcast/transform-utils.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite-simd.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite.js","webpack://SariskaMediaTransport/./modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./modules/util/StringUtils.js","webpack://SariskaMediaTransport/./modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./service/RTC/BridgeVideoType.js","webpack://SariskaMediaTransport/./service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./service/RTC/MediaDirection.js","webpack://SariskaMediaTransport/./service/RTC/RTCEvents.js","webpack://SariskaMediaTransport/./service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./service/RTC/VideoType.js","webpack://SariskaMediaTransport/./service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./service/statistics/constants.js","webpack://SariskaMediaTransport/./service/xmpp/XMPPEvents.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-stream-management/lib/strophe.stream-management.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/index.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/md5-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/rng-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/sha1-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v1.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v3.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v35.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v4.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v5.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/webpack/runtime/amd options","webpack://SariskaMediaTransport/webpack/runtime/compat get default export","webpack://SariskaMediaTransport/webpack/runtime/define property getters","webpack://SariskaMediaTransport/webpack/runtime/global","webpack://SariskaMediaTransport/webpack/runtime/hasOwnProperty shorthand","webpack://SariskaMediaTransport/webpack/runtime/make namespace object","webpack://SariskaMediaTransport/webpack/runtime/node module decorator","webpack://SariskaMediaTransport/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(self, function() {\nreturn ","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that a settings error occurred.\n */\nexport const SETTINGS_ERROR = 'conference.settingsError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n * and the audio sender limit configured in Jicofo.\n */\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference is in progress of joining.\n */\nexport const CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * Indicates that a message from the local user or from the Prosody backend\n * was received on the data channel.\n */\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * The source-add for unmuting of a media track was rejected by Jicofo.\n *\n */\nexport const TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n * and the video sender limit configured in Jicofo.\n */\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n\n/**\n * The local participant was approved to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\n\n/**\n * The local participant was blocked to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_REJECTED = 'conference.av_moderation.rejected';\n\n/**\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n * or undefined if that participant has left the meeting.\n *\n * @param {options} event - {\n *     {boolean} enabled,\n *     {MediaType} mediaType,\n *     {JitsiParticipant} actor\n * }.\n */\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\n\n/**\n * AV Moderation, report for user being approved to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\n\n/**\n * AV Moderation, report for user being blocked to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected';\n\n/**\n * A new facial expression is added with its duration for a participant\n */\nexport const FACIAL_EXPRESSION_ADDED = 'conference.facial_expression.added';\n\n/**\n * Event fired when a participant is requested to join a given (breakout) room.\n */\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room';\n\n/**\n * Event fired when the breakout rooms data was updated.\n */\nexport const BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated';\n\n\nexport const SUBTITLES_RECEIVED = 'conference.subtitles.received';\n\nexport const ANALYTICS_EVENT_RECEIVED = 'analytics.event.received';\n\nexport const TRACK_UPDATED = \"TRACK_UPDATED\";","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\nexport const CHROME = 'chrome';\nexport const OPERA = 'opera';\nexport const FIREFOX = 'firefox';\nexport const INTERNET_EXPLORER = 'iexplorer';\nexport const SAFARI = 'safari';\nexport const NWJS = 'nwjs';\nexport const ELECTRON = 'electron';\nexport const REACT_NATIVE = 'react-native';\nexport const UNKNOWN = 'unknown';","import Bowser from 'bowser';\nimport { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN } from './browsers';\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\n\nconst bowserNameToJitsiName = {\n  'Chrome': CHROME,\n  'Chromium': CHROME,\n  'Opera': OPERA,\n  'Firefox': FIREFOX,\n  'Internet Explorer': INTERNET_EXPLORER,\n  'Safari': SAFARI\n};\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\n\nfunction _detectChromiumBased() {\n  const userAgent = navigator.userAgent;\n  const browserInfo = {\n    name: UNKNOWN,\n    version: undefined\n  };\n\n  if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n    // Edge is currenly supported only on desktop and android.\n    if (userAgent.match(/Edg(A?)/)) {\n      // Compare the underlying chromium version.\n      const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n      if (Number.parseInt(version, 10) > 72) {\n        browserInfo.name = CHROME;\n        browserInfo.version = version;\n      }\n    } else {\n      browserInfo.name = CHROME;\n      browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n    }\n  }\n\n  return browserInfo;\n}\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\n\n\nfunction _detectElectron() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/Electron/)) {\n    const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n    return {\n      name: ELECTRON,\n      version\n    };\n  }\n}\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\n\n\nfunction _detectNWJS() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/JitsiMeetNW/)) {\n    const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n    return {\n      name: NWJS,\n      version\n    };\n  }\n}\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\n\n\nfunction _detectReactNative() {\n  const match = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n  let version; // If we're remote debugging a React Native app, it may be treated as\n  // Chrome. Check navigator.product as well and always return some version\n  // even if we can't get the real one.\n\n  if (match || navigator.product === 'ReactNative') {\n    let name;\n\n    if (match && match.length > 2) {\n      name = match[1];\n      version = match[2];\n    }\n\n    name || (name = 'react-native');\n    version || (version = 'unknown');\n    return {\n      name: REACT_NATIVE,\n      version\n    };\n  }\n}\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\n\n\nfunction _detect(bowser) {\n  let browserInfo;\n  const detectors = [_detectReactNative, _detectElectron, _detectNWJS]; // Try all browser detectors\n\n  for (let i = 0; i < detectors.length; i++) {\n    browserInfo = detectors[i]();\n\n    if (browserInfo) {\n      return browserInfo;\n    }\n  }\n\n  const name = bowser.getBrowserName();\n\n  if (name in bowserNameToJitsiName) {\n    return {\n      name: bowserNameToJitsiName[name],\n      version: bowser.getBrowserVersion()\n    };\n  } // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n\n\n  browserInfo = _detectChromiumBased();\n\n  if (browserInfo) {\n    return browserInfo;\n  }\n\n  return {\n    name: UNKNOWN,\n    version: undefined\n  };\n}\n/**\n * Implements browser detection.\n */\n\n\nexport default class BrowserDetection {\n  /**\n   * Creates new BrowserDetection instance.\n   *\n   * @param {Object} [browserInfo] - Information about the browser.\n   * @param {string} browserInfo.name - The name of the browser.\n   * @param {string} browserInfo.version - The version of the browser.\n   */\n  constructor(browserInfo) {\n    let name, version;\n    this._bowser = Bowser.getParser(navigator.userAgent);\n\n    if (typeof browserInfo === 'undefined') {\n      const detectedBrowserInfo = _detect(this._bowser);\n\n      name = detectedBrowserInfo.name;\n      version = detectedBrowserInfo.version;\n    } else if (browserInfo.name in bowserNameToJitsiName) {\n      name = bowserNameToJitsiName[browserInfo.name];\n      version = browserInfo.version;\n    } else {\n      name = UNKNOWN;\n      version = undefined;\n    }\n\n    this._name = name;\n    this._version = version;\n  }\n  /**\n   * Gets current browser name.\n   * @returns {string}\n   */\n\n\n  getName() {\n    return this._name;\n  }\n  /**\n   * Checks if current browser is Chrome.\n   * @returns {boolean}\n   */\n\n\n  isChrome() {\n    return this._name === CHROME;\n  }\n  /**\n   * Checks if current browser is Opera.\n   * @returns {boolean}\n   */\n\n\n  isOpera() {\n    return this._name === OPERA;\n  }\n  /**\n   * Checks if current browser is Firefox.\n   * @returns {boolean}\n   */\n\n\n  isFirefox() {\n    return this._name === FIREFOX;\n  }\n  /**\n   * Checks if current browser is Internet Explorer.\n   * @returns {boolean}\n   */\n\n\n  isIExplorer() {\n    return this._name === INTERNET_EXPLORER;\n  }\n  /**\n   * Checks if current browser is Safari.\n   * @returns {boolean}\n   */\n\n\n  isSafari() {\n    return this._name === SAFARI;\n  }\n  /**\n   * Checks if current environment is NWJS.\n   * @returns {boolean}\n   */\n\n\n  isNWJS() {\n    return this._name === NWJS;\n  }\n  /**\n   * Checks if current environment is Electron.\n   * @returns {boolean}\n   */\n\n\n  isElectron() {\n    return this._name === ELECTRON;\n  }\n  /**\n   * Checks if current environment is React Native.\n   * @returns {boolean}\n   */\n\n\n  isReactNative() {\n    return this._name === REACT_NATIVE;\n  }\n  /**\n   * Returns the version of the current browser.\n   * @returns {string}\n   */\n\n\n  getVersion() {\n    return this._version;\n  }\n  /**\n   * Check if the parsed browser matches the passed condition.\n   *\n   * @param {Object} checkTree - It's one or two layered object, which can include a\n   * platform or an OS on the first layer and should have browsers specs on the\n   * bottom layer.\n   * Eg. { chrome: '>71.1.0' }\n   *     { windows: { chrome: '<70.2' } }\n   * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n   * conditions, false if not and undefined when the browser is not defined in the\n   * checktree object or when the current browser's version is unknown.\n   * @private\n   */\n\n\n  _checkCondition(checkTree) {\n    if (this._version) {\n      return this._bowser.satisfies(checkTree);\n    }\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * greater than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionGreaterThan(version) {\n    return this._checkCondition({\n      [this._name]: `>${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * lower than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionLessThan(version) {\n    return this._checkCondition({\n      [this._name]: `<${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * equal to the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   * A loose-equality operator is used here so that it matches the sub-versions as well.\n   */\n\n\n  isVersionEqualTo(version) {\n    return this._checkCondition({\n      [this._name]: `~${version}`\n    });\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\n/**\n * Dummy implementation of Storage interface.\n */\n\nclass DummyLocalStorage extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_storage\", {});\n  }\n\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._storage = {};\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return Object.keys(this._storage).length;\n  }\n  /**\n   * Will return that key's value associated to the passed key name.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {*} - The key value.\n   */\n\n\n  getItem(keyName) {\n    return this._storage[keyName];\n  }\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   *\n   * @param {string} keyName - The key name.\n   * @param {*} keyValue - The key value.\n   * @returns {void}\n   */\n\n\n  setItem(keyName, keyValue) {\n    this._storage[keyName] = keyValue;\n  }\n  /**\n   * When passed a key name, will remove that key from the storage.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {void}\n   */\n\n\n  removeItem(keyName) {\n    delete this._storage[keyName];\n  }\n  /**\n   * When passed a number n, this method will return the name of the nth key in the storage.\n   *\n   * @param {number} idx - The index of the key.\n   * @returns {string} - The nth key name.\n   */\n\n\n  key(n) {\n    const keys = Object.keys(this._storage);\n\n    if (keys.length <= n) {\n      return undefined;\n    }\n\n    return keys[n];\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    return JSON.stringify(this._storage);\n  }\n\n}\n/**\n * Wrapper class for browser's local storage object.\n */\n\n\nclass JitsiLocalStorage extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Storage} storage browser's local storage object.\n   */\n  constructor() {\n    super();\n\n    try {\n      this._storage = window.localStorage;\n      this._localStorageDisabled = false;\n    } catch (ignore) {// localStorage throws an exception.\n    }\n\n    if (!this._storage) {\n      // Handles the case when window.localStorage is undefined or throws an exception.\n      console.warn('Local storage is disabled.');\n      this._storage = new DummyLocalStorage();\n      this._localStorageDisabled = true;\n    }\n  }\n  /**\n   * Returns true if window.localStorage is disabled and false otherwise.\n   *\n   * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n   */\n\n\n  isLocalStorageDisabled() {\n    return this._localStorageDisabled;\n  }\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._storage.clear();\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return this._storage.length;\n  }\n  /**\n   * Returns that passed key's value.\n   * @param {string} keyName the name of the key you want to retrieve\n   * the value of.\n   * @returns {String|null} the value of the key. If the key does not exist,\n   * null is returned.\n   */\n\n\n  getItem(keyName) {\n    return this._storage.getItem(keyName);\n  }\n  /**\n   * Adds a key to the storage, or update key's value if it already exists.\n   * @param {string} keyName - the name of the key you want to create/update.\n   * @param {string} keyValue - the value you want to give the key you are\n   * creating/updating.\n   * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n   */\n\n\n  setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n    this._storage.setItem(keyName, keyValue);\n\n    if (!dontEmitChangedEvent) {\n      this.emit('changed');\n    }\n  }\n  /**\n   * Remove a key from the storage.\n   * @param {string} keyName the name of the key you want to remove.\n   */\n\n\n  removeItem(keyName) {\n    this._storage.removeItem(keyName);\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater\n   * than or equal to the number of key/value pairs in the object.\n   *\n   * @param {number} i - The index of the key in the list.\n   * @returns {string}\n   */\n\n\n  key(i) {\n    return this._storage.key(i);\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    if (this.isLocalStorageDisabled()) {\n      return this._storage.serialize();\n    }\n\n    const length = this._storage.length;\n    const localStorageContent = {};\n\n    for (let i = 0; i < length; i++) {\n      const key = this._storage.key(i);\n\n      localStorageContent[key] = this._storage.getItem(key);\n    }\n\n    return JSON.stringify(localStorageContent);\n  }\n\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\nStatistics.analyticsEventEmitter = new EventEmitter();\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\n\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n    Statistics.analyticsEventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, eventName, properties);\n};\n\n\nStatistics.prototype.addAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.on(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\nStatistics.prototype.removeAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.removeListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\n\n\n\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR,\n        () => {\n            conference.xmpp.connection.emuc.doLeave(conference.room.roomjid);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n            if (txt.indexOf(\"Transcript\") !== -1 || txt.indexOf(\"Fellow Jitser\") !== -1) {\n                return;\n            }\n          \n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.participants[dominant]?._hidden) {\n                return;\n            } \n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        return this._isBreakoutRoom;\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests, enableCallStats } = this.options.conference;\n    const callstatsDisabled = !callStatsID || !callStatsSecret || !enableCallStats\n\n        // Even though AppID and AppSecret may be specified, the integration\n        // of callstats.io may be disabled because of globally-disallowed\n        // requests to any third parties.\n        || disableThirdPartyRequests === true;\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        const isTranscriber = pres.getElementsByTagName('nick');\n\n        if (isTranscriber[0] && isTranscriber[0].innerHTML.toLowerCase() === \"transcriber\") {\n              member.isHiddenDomain = true;\n        }\n        \n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n            this.connection.emuc.doLeave(this.roomjid);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: VideoType.CAMERA // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        }));\n\n        return Promise.allSettled(promises);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n        this._sendMultipleVideoStreams = Boolean(flags.sendMultipleVideoStreams);\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams}`);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSupportEnabled() {\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams;\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n}\n\nexport default new FeatureFlags();\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $build } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {Mediatype} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","import { getLogger } from '@jitsi/logger';\nimport async from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // Only set sourceName for non-P2P case\n                    if (ssrcElement.hasAttribute('name')) {\n                        const sourceName = ssrcElement.getAttribute('name');\n\n                        this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                    }\n                }\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n                },\n                error => {\n                    failure(error);\n\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    const workFunction = finishedCallback => {\n                        // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                        // the local endpoint is the offerer and starts muted.\n                        const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                        const remoteDescription = new RTCSessionDescription({\n                            type: 'offer',\n                            sdp: remoteSdp\n                        });\n\n                        return this._responderRenegotiate(remoteDescription)\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                    };\n\n                    logger.debug(`${this} Queued responderRenegotiate task`);\n                    this.modificationQueue.push(\n                        workFunction,\n                        error => {\n                            if (error) {\n                                logger.error(`${this} failed to renegotiate a decoder for muted endpoint ${error}`);\n                            } else {\n                                logger.debug(`${this} renegotiate a decoder for muted endpoint`);\n                            }\n                        });\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n\n                        if (this.isP2P) {\n                            // Do not remove ssrcs from m-line in p2p mode. If the ssrc is removed and added back to\n                            // the same m-line (on source-add), Chrome/Safari do not render the media even if it is\n                            // being received and decoded from the remote peer. The webrtc spec is not clear about\n                            // m-line re-use and the browser vendors have implemented this differently. Currently work\n                            // around this by changing the media direction, that should be enough for the browser to\n                            // fire the \"removetrack\" event on the associated MediaStream. Also, the current direction\n                            // of the transceiver for p2p will depend on whether a local sources is added or not. It\n                            // will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Change the port to 0 to reject the m-line associated with the source. The rejected\n                            // m-lines are recycled when new ssrcs need to be added to the remote description.\n                            const port = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.port;\n\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(\n                                `m=${mediaType} ${port}`,\n                                `m=${mediaType} 0`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {JitsiLocalTrack} localTrack track to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTrack(localTrack) {\n        if (!FeatureFlags.isMultiStreamSupportEnabled()\n            || !this.usesUnifiedPlan\n            || localTrack.type !== MediaType.VIDEO) {\n            return Promise.reject(new Error('Multiple tracks of a given media type are not supported'));\n        }\n\n        const workFunction = finishedCallback => {\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n            // Add a new transceiver by adding a new mline in the remote description.\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            this._renegotiate(remoteSdp.raw)\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n\n                        // Replace the track on the newly generated transceiver.\n                        return this.replaceTrack(null, localTrack)\n                            .then(() => resolve())\n                            .catch(() => reject());\n                    }\n                });\n        });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings(newTrack);\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n\n        if (removedAnySSRCs) {\n            const sourceInfo = getSignaledSourceInfo(sdpDiffer);\n\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${sourceInfo.mediaType} ssrcs=${sourceInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            const sourceInfo = getSignaledSourceInfo(sdpDiffer);\n\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${sourceInfo.mediaType} ssrcs=${sourceInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, sourceInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        // $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n        //     this.disconnect(ev).catch(() => {\n        //         // ignore errors in order to not brake the unload.\n        //     });\n        // });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress\n            || this.breakoutRoomsComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends facial expression to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFacialExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('facialExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.facialExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress\n            || from === this.breakoutRoomsComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            logObject.id = 'deployment_info';\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'SenderVideoConstraintsV2': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    const { sourceName, idealHeight } = obj;\n\n                    if (typeof sourceName === 'string' && typeof idealHeight === 'number') {\n                        // eslint-disable-next-line object-property-newline\n                        logger.info(`SenderVideoConstraintsV2: ${JSON.stringify({ sourceName, idealHeight })}`);\n                        emitter.emit(\n                            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, {\n                                sourceName,\n                                idealHeight\n                            }\n                        );\n                    } else {\n                        logger.error(`Invalid SenderVideoConstraintsV2: ${JSON.stringify(obj)}`);\n                    }\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\n        // Safari.\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","\nimport Listenable from '../../modules/util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    // [VOWEL] copy msid to the sources from another video mid (2nd stream support)\n                    mLine.sources.forEach(source => {\n                        source.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        session.media.forEach(mLine => {\n            // eslint-disable-next-line eqeqeq\n            if (mLine.mid == '3') { // Screen is added on mid=3 with 2 participants\n                mLine.direction = 'sendrecv';\n            }\n        });\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport VideoType from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\n     * preceding by a dash sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const pcId = this.tpc.id;\n        const sourceToMsidMap = new Map();\n\n        // TODO fix and remove quick and dirty hack\n        const trackToMsid = new Map();\n        let counter = 100;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        // FIXME\n                        // The problem here is that Chrome in unified gives `-` as the stream ID.\n                        // This code generates different stream IDs for each track. This is needed because when a video\n                        // is rendered stream ID is used to bind specific video. Without this change both camera and\n                        // desktop shared the same stream ID created by `this._generateMsidAttribute` which assumes only\n                        // one track per media type.\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n                        const mediaType = mediaSection.mLine?.type;\n\n                        // eslint-disable-next-line max-depth\n                        if (streamId === '-' || !streamId) {\n                            // eslint-disable-next-line max-depth\n                            if (!trackToMsid.has(trackId)) {\n                                // eslint-disable-next-line max-len\n                                trackToMsid.set(trackId, `${this.localEndpointId}-${mediaType}-${counter} ${trackId}-${pcId}`);\n                                counter += 1;\n                            }\n                            ssrcLine.value = trackToMsid.get(trackId);\n                            break;\n                        }\n\n                        ssrcLine.value\n                            = this._generateMsidAttribute(\n                                mediaSection.mLine?.type,\n                                streamAndTrackIDs[1],\n                                streamAndTrackIDs[0]);\n                    } else {\n                        logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                    }\n\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, sourceToMsidMap.get(trackId));\n                } else {\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists) {\n                    const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: getSourceNameForJitsiTrack(this.localEndpointId, mediaType, 0)\n                });\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n    \n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n    \n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n\n    /**\n     * Munges the given media description by removing the SSRCs and related FID groups for the higher layer streams.\n     *\n     * @param description\n     * @returns\n     */\n    mungeRemoteDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n\n        const session = transform.parse(description.sdp);\n\n        for (const media of session.media) {\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n\n            if (media.direction !== MediaDirection.SENDONLY) {\n                continue;\n            }\n\n            // Ignore m-lines that do not have any SSRCs or SSRC groups. These are the ones associated with remote\n            // sources that have left the call. These will be recycled when a new remote source joins the call.\n            if (!media.ssrcGroups?.length || !media?.ssrcs.length) {\n                continue;\n            }\n\n            // Cache the SSRCs and the source groups.\n            const mungedSsrcs = new Set(media.ssrcs.slice());\n            const mungedSsrcGroups = new Set(media.ssrcGroups.slice());\n            const fidGroups = media.ssrcGroups.filter(group => group.semantics === 'FID');\n            const simGroup = media.ssrcGroups.find(group => group.semantics === 'SIM');\n            const primarySsrc = simGroup?.ssrcs.split(' ')[0];;\n\n            // When simulcast and RTX are both enabled.\n            if (fidGroups.length && simGroup) {\n                const fidGroup = fidGroups.find(group => group.ssrcs.includes(primarySsrc));\n                const secondarySsrc = fidGroup.ssrcs.split(' ')[1];\n\n                for (const ssrcGroup of media.ssrcGroups) {\n                    if (ssrcGroup !== fidGroup) {\n                        mungedSsrcGroups.delete(ssrcGroup);\n                    }\n                }\n                for (const ssrc of media.ssrcs) {\n                    if (ssrc.id.toString() !== primarySsrc\n                        && ssrc.id.toString() !== secondarySsrc) {\n                        mungedSsrcs.delete(ssrc);\n                    }\n                }\n\n            // When simulcast is enabled but RTX is disabled.\n            } else if (simGroup) {\n                mungedSsrcGroups.delete(simGroup);\n\n                for (const ssrc of media.ssrcs) {\n                    if (ssrc.id.toString() !== primarySsrc) {\n                        mungedSsrcs.delete(ssrc);\n                    }\n                }\n            }\n\n            media.ssrcs = Array.from(mungedSsrcs);\n            media.ssrcGroups = Array.from(mungedSsrcGroups);\n        }\n\n        return new RTCSessionDescription ({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (this.pc.isSharingLowFpsScreen()\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const track = newTrack?.getTrack() ?? null;\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (this.pc.getLocalTracks(mediaType)?.length && !newTrack.conference) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n                && t.currentDirection === MediaDirection.INACTIVE);\n\n        // For unmute operations, find the transceiver based on the track index in the source name if present, otherwise\n        // it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n\n            const sourceName = newTrack.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = Number(sourceName.split('-')[1].substring(1));\n\n                if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType\n                            && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n\n        if (!transceiver) {\n            return Promise.reject(new Error('replace track failed'));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        // FIXME a hack to send DESKTOP on the 2nd video transceiver\n        if (newTrack.getVideoType() === VideoType.DESKTOP) {\n            const transceiver = this.pc.peerconnection\n                .getTransceivers()\n                .filter(t => t.receiver?.track?.kind === MediaType.VIDEO)[1];\n\n            transceiver.direction = MediaDirection.SENDRECV;\n\n            return transceiver.sender.replaceTrack(newTrack.getTrack())\n                .then(() => {\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n                });\n        }\n\n        return transceiver.sender.replaceTrack(track);\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport { Interop } from '../sdp-interop';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('../sdp-simulcast');\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {JitsiLocalTrack|undefined} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks.concat(\n                        Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksOfMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksOfMediaType.has(track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksOfMediaType.add(remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\n TraceablePeerConnection.prototype._remoteTrackRemoved = function(\n    stream,\n    track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(`${this} Removed track not found for stream[id=${streamId},trackId=${trackId}]`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // TODO try to get rid of this method altogether\n\n    // .find will break the loop once the first match is found\n    for (const endpointTracksByType of this.remoteTracks.values()) {\n        for (const endpointTracksOfMediaType of endpointTracksByType.values()) {\n            for (const mediaTrack of endpointTracksOfMediaType) {\n                // FIXME verify and try to use ===\n                /* eslint-disable eqeqeq */\n                if (mediaTrack.getStreamId() == streamId\n                    && mediaTrack.getTrackId() == trackId) {\n                    return mediaTrack;\n                }\n\n                /* eslint-enable eqeqeq */\n            }\n        }\n    }\n\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const userTracksByMedia = this.remoteTracks.get(owner);\n\n    if (userTracksByMedia) {\n        removedTracks.concat(Array.from(userTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks.concat(Array.from(userTracksByMedia.get(MediaType.VIDEO)));\n\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType()).delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\n// TODO unused method push upstream\n/* TraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n}; */\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        if (webrtcStream || !this.isP2P) {\n            try {\n                this.tpcUtils.addTrack(track, isInitiator);\n            } catch (error) {\n                logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n                return Promise.reject(error);\n            }\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute operation.\n *\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    logger.info(`${this} Adding track=${track} as unmute`);\n\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => this.isP2P);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\n    // before the source signaling which is undesirable.\n    const negotiationNeeded = Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const stream = newTrack?.getOriginalStream();\n        const promise = newTrack && !stream\n\n            // Ignore cases when the track is replaced while the device is in a muted state.\n            // The track will be replaced again on the peerconnection when the user unmutes.\n            ? Promise.resolve()\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\n\n        return promise\n            .then(transceiver => {\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\n                const mediaActive = mediaType === MediaType.AUDIO\n                    ? this.audioTransferActive\n                    : this.videoTransferActive;\n\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\n                // this connection again.\n                if (transceiver && mediaActive) {\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                // Renegotiate only in the case of P2P. We rely on 'negotiationeeded' to be fired for JVB.\n                return configureEncodingsPromise.then(() => this.isP2P || negotiationNeeded);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType)?.[0];\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        if (localVideoTrack) {\n            return this.setSenderVideoConstraints(\n                this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n                localVideoTrack);\n        }\n        const promises = [];\n\n        for (const track of this.getLocalVideoTracks()) {\n            promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n        }\n\n        return Promise.allSettled(promises);\n    }\n\n    let localTrack = localVideoTrack;\n\n    if (!localTrack) {\n        localTrack = this.getLocalVideoTracks()[0];\n    }\n\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight, localTrack);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localDescription = this._mungeCodecOrder(localDescription);\n    }\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n        }\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this._senderMaxHeights.set(localVideoTrack.getSourceName(), frameHeight);\n    } else {\n        this._senderVideoMaxHeight = frameHeight;\n    }\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    // Set the degradation preference.\n    const preference = this.isSharingLowFpsScreen()\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                // Max bitrates are configured on the encodings only for VP8.\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || this.isSharingLowFpsScreen()\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this.isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased()) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain facial expression.\n */\nconst FACIAL_EXPRESSION_MESSAGE_TYPE = 'facial_expression';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACIAL_EXPRESSION_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACIAL_EXPRESSION_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return SariskaMediaTransport.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        const blob = new Blob([\"importScripts('https://sdk.sariska.io/flacEncodeWorker.min.js');\"], {\"type\": 'application/javascript'});\n        const url = window.URL || window.webkitURL;\n        const blobUrl = url.createObjectURL(blob);\n        this._encoder = new Worker(blobUrl);\n        URL.revokeObjectURL(blobUrl);\n    }\n}","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime() {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\n// type SessionEvent = {\n\n//     /**\n//      * The type of the event.\n//      * Should be one of the values in {@code SessionEventType}.\n//      */\n//     type: string,\n\n//     /**\n//      * The timestamp of the event.\n//      */\n//     timestamp: number\n// };\n\n/**\n * Representation of the metadata of a segment.\n */\n// type SegmentInfo = {\n\n//     /**\n//      * The length of gap before this segment, in milliseconds.\n//      * mull if unknown.\n//      */\n//     gapBefore?: ?number,\n\n//     /**\n//      * The duration of this segment, in milliseconds.\n//      * null if unknown or the segment is not finished.\n//      */\n//     duration?: ?number,\n\n//     /**\n//      * The start time, in milliseconds.\n//      */\n//     start?: ?number,\n\n//     /**\n//      * The end time, in milliseconds.\n//      * null if unknown, the segment is not finished, or the recording is\n//      * interrupted (e.g. browser reload).\n//      */\n//     end?: ?number\n// };\n\n/**\n * Representation of metadata of a local recording session.\n */\n// type SessionInfo = {\n\n//     /**\n//      * The session token.\n//      */\n//     sessionToken: string,\n\n//     /**\n//      * The start time of the session.\n//      */\n//     start: ?number,\n\n//     /**\n//      * The recording format.\n//      */\n//     format: string,\n\n//     /**\n//      * Array of segments in the session.\n//      */\n//     segments: SegmentInfo[]\n// }\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken, format) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(){\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken) {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events) {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\n// type RecordingStats = {\n\n//     /**\n//      * Current local recording session token used by the participant.\n//      */\n//     currentSessionToken: number,\n\n//     /**\n//      * Whether local recording is engaged on the participant's device.\n//      */\n//     isRecording: boolean,\n\n//     /**\n//      * Total recorded bytes. (Reserved for future use.)\n//      */\n//     recordedBytes: number,\n\n//     /**\n//      * Total recording duration. (Reserved for future use.)\n//      */\n//     recordedLength: number\n// }\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats() {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return Promise.resolve();\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n        const isSourcesFormat = Object.keys(constraints).includes('onStageSources', 'selectedSources');\n\n        if (!FeatureFlags.isSourceNameSignalingEnabled() && isSourcesFormat) {\n            throw new Error(\n                '\"onStageSources\" and \"selectedSources\" are not supported when sourceNameSignaling is disabled.'\n            );\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled() && isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            for (const track of this._rtc.getLocalVideoTracks()) {\n                const sourceName = track.getSourceName();\n\n                sourceName && this._propagateSendMaxFrameHeight(sourceName);\n            }\n        } else {\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this._conference.getActiveMediaSession()) {\n                    this._configureConstraintsForLocalSources();\n                }\n            });\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const { idealHeight, sourceName } = videoConstraints;\n            const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n            for (const track of localVideoTracks) {\n                // Propagate the sender constraint only if it has changed.\n                if (track.getSourceName() === sourceName\n                    && (!this._sourceSenderConstraints.has(sourceName)\n                    || this._sourceSenderConstraints.get(sourceName) !== idealHeight)) {\n                    this._sourceSenderConstraints.set(sourceName, idealHeight);\n                    logger.debug(`Sender constraints for source:${sourceName} changed to idealHeight:${idealHeight}`);\n                    this._propagateSendMaxFrameHeight(sourceName);\n                }\n            }\n        } else if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n            this._senderVideoConstraints = videoConstraints;\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : sourceName ? this._sourceSenderConstraints.get(sourceName) : this._senderVideoConstraints?.idealHeight\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const promises = [];\n\n            for (const sourceName of this._sourceSenderConstraints.keys()) {\n                promises.push(this._propagateSendMaxFrameHeight(sourceName));\n            }\n\n            return Promise.allSettled(promises);\n        }\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        try {\n            appData = JSON.parse(appData)|| {};\n        } catch(e) {\n            appData = {};\n        }\n        \n        appData[\"base_url\"] = appData[\"base_url\"] ? appData[\"base_url\"] : `${window.location.origin}${window.location.pathname}`;\n        appData[\"token\"] =  this._connection.emuc.xmpp.token;\n        \n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.FACIAL_EXPRESSION_ADDED,\n            this._onFacialExpressionAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Adds a new facial expression with its duration of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The facial expression with its duration.\n     * @returns {void}\n     * @private\n     */\n    _onFacialExpressionAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.addFacialExpression(data.facialExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n\n            speakerStatsToUpdate.setFacialExpressions(newStats[userId].facialExpressions);\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const appData = {};\n        appData[\"baseUrl\"] =  window.location.origin;\n        appData[\"token\"] =  this.chatRoom.connection.emuc.xmpp.token\n\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport VideoType from '../../service/RTC/VideoType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n        room.addPresenceListener('videoType', this._videoTypeHandler);\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && mediaType === MediaType.AUDIO) {\n                        emitAudioMutedEvent(endpointId, newMutedState);\n                    } else {\n                        emitVideoMutedEvent(endpointId, newMutedState);\n                    }\n                }\n\n                const newVideoType = sourceInfoJSON[sourceName].videoType;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n                    emitEventsFromHere && emitVideoTypeEvent(endpointId, newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.error('Requested peer media info, before room was set');\n        };\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const lastPresence = this.chatRoom.getLastPresence(owner);\n\n            if (!lastPresence) {\n                throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\n            }\n\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        return this._remoteSourceState[owner] ? this._remoteSourceState[owner][sourceName] : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { RecordingController } from './modules/local-recording';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\nwindow.APP = {\n    conference: {\n    }\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A coference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n\n\n\n    this.handleSubtitles();\n\n    if (options.config.enableLocalRecording) {\n        this.recordingController = new RecordingController();\n        this.recordingController.registerEvents(this);\n    }\n\n    if (options.config.enableAnalytics) {\n        this.enableAnalytics();\n    }\n\n    if (options.config.iAmRecorder) {\n        this.removeCommand('userinfo');\n        this.sendCommand(\n            'userinfo',\n            {\n                attributes: {\n                    xmlns: 'http://jitsi.org/jitmeet/userinfo',\n                    robot: true\n                }\n            });\n    }\n\n    const self = this;\n\n    window.APP = {\n        conference: {\n            _room: this,\n            get membersCount() {\n                return self.getParticipantsWithoutHidden().length + 1;\n            },\n            getStats() {\n                return self.connectionQuality.getStats();\n            }\n        }\n    };\n    this.localTracksDuration = new LocalTracksDuration(this);\n    this.sessions = {};\n    this.user = options.user;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid) {\n    return Strophe.getNodeFromJid(jid);\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('The conference is has been already left');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave();\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.sendSourceVideoType(\n            getSourceNameForJitsiTrack(this.myUserId(), MediaType.VIDEO, 0),\n            videoType\n        );\n    } else {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            // updates presence when we replace the video tracks desktop with screen and screen with desktop\n            if (oldTrackBelongsToConference && oldTrack?.isVideoTrack()\n\n                // we do not want to send presence update during setEffect switching, which does remove and then add\n                && !(oldTrack?._setEffectInProgress || newTrack?._setEffectInProgress)) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\n        // FIXME once legacy signaling using 'sendCommand' is removed, signalingLayer.setTrackVideoType must be adjusted\n        // to send the presence (not just modify it).\n        this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n\n        // TODO: Optimize to detect whether presence was changed, for now always report changed to send presence\n        return true;\n    }\n\n    const videoTypeTagName = 'videoType';\n\n    // if track is missing we revert to default type Camera, the case where we screenshare and\n    // we return to be video muted\n    const trackVideoType = track ? track.videoType : VideoType.CAMERA;\n\n    // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n    if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n        // we will not use this.sendCommand here to avoid sending the presence immediately, as later we may also set\n        // and the mute status\n        return this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\n    }\n\n    return false;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        // TODO When legacy signaling part is removed, remember to adjust signalingLayer.setTrackMuteStatus, so that\n        // it triggers sending the presence (it only updates it for now, because the legacy code below sends).\n        this._signalingLayer.setTrackMuteStatus(localTrack?.getSourceName(), isMuted);\n    }\n\n    if (!this.room) {\n        return false;\n    }\n\n    if (mediaType === MediaType.AUDIO) {\n        return this.room.addAudioInfoToPresence(isMuted);\n    }\n\n    return this.room.addVideoInfoToPresence(isMuted);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage(track);\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage();\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\n JitsiConference.prototype.getParticipantsWithoutHidden = function() {\n    let participants = this.getParticipants().filter(participant => !participant._hidden);\n\n    participants = participants.filter(participant => !participant?._properties?.features_jigasi);\n\n    return participants;\n};\n\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    const localAudioTracks = jingleSession.peerconnection.getLocalTracks(MediaType.AUDIO);\n    const localVideoTracks = jingleSession.peerconnection.getLocalTracks(MediaType.VIDEO);\n    let presenceChanged = false;\n\n    if (localAudioTracks && localAudioTracks.length) {\n        presenceChanged = this._setTrackMuteStatus(MediaType.AUDIO, localAudioTracks[0], localAudioTracks[0].isMuted());\n    } else if (this._setTrackMuteStatus(MediaType.AUDIO, undefined, true)) {\n        presenceChanged = true;\n    }\n\n    if (localVideoTracks && localVideoTracks.length) {\n        const muteStatusChanged = this._setTrackMuteStatus(\n            MediaType.VIDEO, localVideoTracks[0], localVideoTracks[0].isMuted());\n        const videoTypeChanged = this._setNewVideoType(localVideoTracks[0]);\n\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    } else {\n        const muteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\n        const videoTypeChanged = this._setNewVideoType(); // set back to default video type\n\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a facial expression with its duration to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFacialExpression = function(payload) {\n    this.xmpp.sendFacialExpressionEvent(this.room.roomjid, payload);\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n\n\n/**\n * Gets the local user when joined\n */\n JitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.terminate = function() {\n    this.sendCommand('terminate', {});\n};\n\n\nJitsiConference.prototype.handleSubtitles = function() {\n\n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty('translation_language');\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage.final = json.text;\n                newTranscriptMessage.participantName = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                    newTranscriptMessage = pastMessage;\n                } else {\n                    newTranscriptMessage.participantName = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage.final = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage.stable = text;\n                    newTranscriptMessage.unstable = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage.unstable = text;\n                }\n\n            }\n\n            let finalText = '';\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n\n                finalText = stable + unstable;\n            }\n            const fellowParticipantName =  this.participants[json?.participant?.id]?._identity?.user?.name ||  this?.getLocalUser()?.name;\n            this.eventEmitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, json?.participant?.id, fellowParticipantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n};\n\n// enable analytics\nJitsiConference.prototype.enableAnalytics = function() {\n    this.statistics.addAnalyticsEventListener((eventName, payload) => {\n        let name = '', body = {};\n\n        if (typeof eventName === 'string') {\n            name = eventName;\n            body = payload;\n        } else if (typeof eventName === 'object') {\n            name = eventName.name;\n            body = eventName;\n        }\n\n        const finalPaylaod = {\n            name,\n            action: body.action ? body.action : '',\n            actionSubject: body.actionSubject ? body.actionSubject : '',\n            source: body.source ? body.source : '',\n            attributes: JSON.stringify(payload)\n        };\n\n        this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, finalPaylaod);\n    });\n};\n\nJitsiConference.prototype.startLocalRecording = function(format = 'ogg') {\n    this.recordingController.startRecording(format);\n};\n\nJitsiConference.prototype.stopLocalRecording = function() {\n    this.recordingController.stopRecording();\n};\n\nJitsiConference.prototype.switchFormat = function() {\n    this.recordingController.switchFormat(format);\n};\n\nJitsiConference.prototype.setMuted = function(muted) {\n    this.recordingController.setMuted(muted);\n};\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n    this.recordingController.setMicDevice(micDeviceId);\n};\n\nJitsiConference.prototype.startSIPVideoCall = function(sipAddress, displayName) {\n    if (this.sessions[sipAddress]) {\n        return;\n    }\n    const session = this.createVideoSIPGWSession(sipAddress, displayName);\n\n    this.sessions[sipAddress] = session;\n    session.start();\n};\n\nJitsiConference.prototype.stopSIPVideoCall = function(sipAddress) {\n    if (!this.sessions[sipAddress]) {\n        return;\n    }\n    this.sessions[sipAddress].stop();\n    delete this.sessions[sipAddress];\n};","import Bourne from '@hapi/bourne';\n\n/**\n * A list if keys to ignore when parsing.\n * @type {string[]}\n */\n\nconst blacklist = [ '__proto__', 'constructor', 'prototype' ];\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {URL} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\n\nexport function parseURLParams(dontParse = true) {\n    const paramStr = location.search ? location.search : location.hash;\n    const params = {};\n    const paramParts = paramStr && paramStr.substr(1)\n        .split('&') || []; // Detect and ignore hash params for hash routers.\n\n    if (location.hash && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key || blacklist.includes(key.split('.')[0])) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value)\n                    .replace(/\\\\&/, '&');\n                value = decoded === 'undefined' ? undefined : Bourne.parse(decoded);\n            }\n        } catch (e) {\n            console.log(`Failed to parse URL parameter value: ${String(value)}`);\n            return;\n        }\n\n        params[key] = value;\n    });\n    return params;\n}\n\n\nexport function syncWithURL(conferenceConfig) {\n    const params = parseURLParams();\n    Object.keys(params)\n        .forEach(param => {\n            const key = param.replace('config.', '');\n            switch (key) {\n            case 'analytics.disabled':\n                conferenceConfig.analytics.disabled = params[param];\n                break;\n            case 'startWithAudioMuted':\n                conferenceConfig.startAudioMuted = params[param];\n                break;\n            case 'startWithVideoMuted':\n                conferenceConfig.startVideoMuted = params[param];\n                break;\n            case 'p2p.enabled':\n                conferenceConfig.p2p.enabled = params[param];\n                break;\n            default:\n                conferenceConfig[key] = params[param];\n            }\n        });\n    console.log(\"conferenceConfig\",conferenceConfig);    \n    return conferenceConfig;\n}\n\n\n\n\n\n\n\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: false,\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const devConnectionConfig = {\n    hosts: {\n        domain: 'dev.sariska.io',\n        muc: 'muc.dev.sariska.io'\n    },\n    serviceUrl: 'wss://api.dev.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const conferenceConfig = {\n    enableLocalRecording: true,\n    enableVirtualBackground: false,\n    enableNoiseCancellation: false,\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true,\n    enableNoisyMicDetection: true,\n    createVADProcessor: true,\n    openBridgeChannel: 'websocket',\n    //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n    hiddenDomain: \"recorder.sariska.io\",\n    // startAudioMuted\n    // startVideoMuted\n    enableLayerSuspension: true, // - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping: {\n        pingInterval: -1 // analyticsInterval: 60000,\n    },\n    analytics: {\n        disabled: false\n        // rtcstatsEnabled: true,\n\n        // In order to enable rtcstats one needs to provide a endpoint url.\n        // rtcstatsEndpoint: wss://rtcstats-server-pilot.jitsi.net/,\n\n        // The interval at which rtcstats will poll getStats, defaults to 1000ms.\n        // If the value is set to 0 getStats won't be polled and the rtcstats client\n        // will only send data related to RTCPeerConnection events.\n        // rtcstatsPolIInterval: 1000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { syncWithURL } from \"./modules/util/parseURLParams\";\nimport { connectionConfig, conferenceConfig, devConnectionConfig } from './config';\nexport const DISCO_JIBRI_FEATURE = 'http://jitsi.org/protocol/jibri';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, roomName, isDev) {\n    let options;\n    const jwt = this.parseJwt(token);\n    this.name = roomName;\n    this.user = jwt.context.user;\n    options = isDev ? {...devConnectionConfig} : {...connectionConfig};\n    options.serviceUrl = `${options.serviceUrl}?room=${roomName}`;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n    this.token = token;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (e) {\n      return null;\n    }\n  };\n  \n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    const usernameOverride = jitsiLocalStorage.getItem('xmpp_username_override');\n    const passwordOverride = jitsiLocalStorage.getItem('xmpp_password_override');\n  \n    if (usernameOverride && usernameOverride.length > 0) {\n      options.id = usernameOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    if (passwordOverride && passwordOverride.length > 0) {\n      options.password = passwordOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = { ...conferenceConfig,\n    ...options\n    };\n    options = syncWithURL(options);\n    const name = this.name;\n\n    if (options.iAmRecorder) {\n    this.addFeature(DISCO_JIBRI_FEATURE);\n    }\n\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(browser.isFirefox() || browser.isIosBrowser());\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport SignalingLayerImpl from '../xmpp/SignalingLayerImpl';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new SignalingLayerImpl();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL,\n    timerWorkerScript\n} from './TimeWorker';\n\n/**\n * Represents a modified MediaStream that adds video as pip on a desktop stream.\n * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n * desktop stream.\n */\nexport default class JitsiStreamPresenterEffect {\n    /**\n     * Represents a modified MediaStream that adds a camera track at the\n     * bottom right corner of the desktop track using a HTML canvas.\n     * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n     * video stream.\n     *\n     * @param {MediaStream} videoStream - The video stream which is user for\n     * creating the canvas.\n     */\n    constructor(videoStream) {\n        const videoDiv = document.createElement('div');\n        const firstVideoTrack = videoStream.getVideoTracks()[0];\n        const { height, width, frameRate } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n\n        this._desktopElement = document.createElement('video');\n        this._videoElement = document.createElement('video');\n        videoDiv.appendChild(this._videoElement);\n        videoDiv.appendChild(this._desktopElement);\n        if (document.body !== null) {\n            document.body.appendChild(videoDiv);\n        }\n\n        // Set the video element properties\n        this._frameRate = parseInt(frameRate, 10);\n        this._videoElement.width = parseInt(width, 10);\n        this._videoElement.height = parseInt(height, 10);\n        this._videoElement.autoplay = true;\n        this._videoElement.srcObject = videoStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._videoElement.play();\n\n        // set the style attribute of the div to make it invisible\n        videoDiv.style.display = 'none';\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onVideoFrameTimer = this._onVideoFrameTimer.bind(this);\n    }\n\n    /**\n     * EventHandler onmessage for the videoFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onVideoFrameTimer(response) {\n        if (response.data.id === INTERVAL_TIMEOUT) {\n            this._renderVideo();\n        }\n    }\n\n    /**\n     * Loop function to render the video frame input and draw presenter effect.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderVideo() {\n        // adjust the canvas width/height on every frame incase the window has been resized.\n        const [ track ] = this._desktopStream.getVideoTracks();\n        const { height, width } = track.getSettings() ?? track.getConstraints();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._ctx.drawImage(this._desktopElement, 0, 0, this._canvas.width, this._canvas.height);\n        this._ctx.drawImage(this._videoElement, this._canvas.width - this._videoElement.width, this._canvas.height\n            - this._videoElement.height, this._videoElement.width, this._videoElement.height);\n\n        // draw a border around the video element.\n        this._ctx.beginPath();\n        this._ctx.lineWidth = 2;\n        this._ctx.strokeStyle = '#A9A9A9'; // dark grey\n        this._ctx.rect(this._canvas.width - this._videoElement.width, this._canvas.height - this._videoElement.height,\n            this._videoElement.width, this._videoElement.height);\n        this._ctx.stroke();\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the\n     * specified track, false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'desktop';\n    }\n\n    /**\n     * Starts loop to capture video frame and render presenter effect.\n     *\n     * @param {MediaStream} desktopStream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(desktopStream) {\n        const firstVideoTrack = desktopStream.getVideoTracks()[0];\n        const { height, width } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        // set the desktop element properties.\n        this._desktopStream = desktopStream;\n        this._desktopElement.width = parseInt(width, 10);\n        this._desktopElement.height = parseInt(height, 10);\n        this._desktopElement.autoplay = true;\n        this._desktopElement.srcObject = desktopStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._desktopElement.play();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._videoFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Presenter effect worker' });\n        this._videoFrameTimerWorker.onmessage = this._onVideoFrameTimer;\n        this._videoFrameTimerWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: 1000 / this._frameRate\n        });\n\n        return this._canvas.captureStream(this._frameRate);\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._videoFrameTimerWorker.postMessage({\n            id: CLEAR_INTERVAL\n        });\n        this._videoFrameTimerWorker.terminate();\n    }\n\n}\n","\nvar Module = (function() {\n  var _scriptDir = \"https://sdk.sariska.io/\";\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\nnull;var Module=typeof Module!==\"undefined\"?Module:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":1,\"maximum\":1+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5340496,DYNAMICTOP_PTR=97456;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile=\"rnnoise.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap,\"memory\":wasmMemory,\"table\":wasmTable};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"c\"]).apply(null,arguments)};var _rnnoise_init=Module[\"_rnnoise_init\"]=function(){return(_rnnoise_init=Module[\"_rnnoise_init\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _rnnoise_create=Module[\"_rnnoise_create\"]=function(){return(_rnnoise_create=Module[\"_rnnoise_create\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _rnnoise_destroy=Module[\"_rnnoise_destroy\"]=function(){return(_rnnoise_destroy=Module[\"_rnnoise_destroy\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=function(){return(_rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport rnnoiseWasmInit from 'rnnoise-wasm';\n\nimport RnnoiseProcessor from './RnnoiseProcessor';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream, videoType) {\n        return new Promise((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model, options) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport createTFLiteModule from './tflite';\nimport createTFLiteSIMDModule from './tflite-simd';\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @param {Function} dispatch - The Redux dispatch function.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground, dispatch) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n    let wasmCheck;\n\n    // Checks if WebAssembly feature is supported or enabled by/in the browser.\n    // Conditional import of wasm-check package is done to prevent\n    // the browser from crashing when the user opens the app.\n\n    try {\n        wasmCheck = require('wasm-check');\n        if (wasmCheck?.feature?.simd) {\n            tflite = await createTFLiteSIMDModule();\n        } else {\n            tflite = await createTFLiteModule();\n        }\n    } catch (err) {\n        return;\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}","import Logger from '@jitsi/logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\nimport {initSDKConfig} from './config';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        createPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options = {}) {\n        options = {...initSDKConfig, ...options};\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Configure the feature flags.\n        FeatureFlags.init(options.flags || { });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        if (window.location.href.indexOf(\"iAmRecorder\") >= 0) {\n            return [];\n         }\n\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});","// @flow\n\nimport JitsiStreamPresenterEffect from './JitsiStreamPresenterEffect';\n\n/**\n * Creates a new instance of JitsiStreamPresenterEffect.\n *\n * @param {MediaStream} stream - The video stream which will be used for\n * creating the presenter effect.\n * @returns {Promise<JitsiStreamPresenterEffect>}\n */\nexport function createPresenterEffect(stream) {\n    if (!MediaStreamTrack.prototype.getSettings\n        && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('JitsiStreamPresenterEffect not supported!'));\n    }\n\n    return Promise.resolve(new JitsiStreamPresenterEffect(stream));\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","export default [];\n","export default Object.getPrototypeOf;\n","import arr from \"./arr.js\";\n\nexport default arr.slice;\n","import arr from \"./arr.js\";\n\n// Support: IE 11+\n// IE doesn't have Array#flat; provide a fallback.\nexport default arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n","import arr from \"./arr.js\";\n\nexport default arr.push;\n","import arr from \"./arr.js\";\n\nexport default arr.indexOf;\n","// [[Class]] -> type pairs\nexport default {};\n","import class2type from \"./class2type.js\";\n\nexport default class2type.toString;\n","import class2type from \"./class2type.js\";\n\nexport default class2type.hasOwnProperty;\n","import hasOwn from \"./hasOwn.js\";\n\nexport default hasOwn.toString;\n","import fnToString from \"./fnToString.js\";\n\nexport default fnToString.call( Object );\n","export default window.document;\n","import document from '../var/document.js';\n\nvar preservedScriptAttributes = {\n\ttype: true,\n\tsrc: true,\n\tnonce: true,\n\tnoModule: true\n};\n\nfunction DOMEval( code, node, doc ) {\n\tdoc = doc || document;\n\n\tvar i,\n\t\tscript = doc.createElement( \"script\" );\n\n\tscript.text = code;\n\tif ( node ) {\n\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\tif ( node[ i ] ) {\n\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t}\n\t\t}\n\t}\n\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n}\n\nexport default DOMEval;\n","import class2type from '../var/class2type.js';\nimport toString from '../var/toString.js';\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\treturn typeof obj === \"object\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n\nexport default toType;\n","import arr from \"./var/arr.js\";\nimport getProto from \"./var/getProto.js\";\nimport slice from \"./var/slice.js\";\nimport flat from \"./var/flat.js\";\nimport push from \"./var/push.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport class2type from \"./var/class2type.js\";\nimport toString from \"./var/toString.js\";\nimport hasOwn from \"./var/hasOwn.js\";\nimport fnToString from \"./var/fnToString.js\";\nimport ObjectFunctionString from \"./var/ObjectFunctionString.js\";\nimport support from \"./var/support.js\";\nimport isWindow from \"./var/isWindow.js\";\nimport DOMEval from \"./core/DOMEval.js\";\nimport toType from \"./core/toType.js\";\n\nvar version = \"@VERSION\",\n\n    rhtmlSuffix = /HTML$/i,\n\n    // Define a local copy of jQuery\n    jQuery = function( selector, context ) {\n\n        // The jQuery object is actually just the init constructor 'enhanced'\n        // Need init if jQuery is called (just allow error to be thrown if not included)\n        return new jQuery.fn.init( selector, context );\n    };\n\njQuery.fn = jQuery.prototype = {\n\n    // The current version of jQuery being used\n    jquery: version,\n\n    constructor: jQuery,\n\n    // The default length of a jQuery object is 0\n    length: 0,\n\n    toArray: function() {\n        return slice.call( this );\n    },\n\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function( num ) {\n\n        // Return all the elements in a clean array\n        if ( num == null ) {\n            return slice.call( this );\n        }\n\n        // Return just the one element from the set\n        return num < 0 ? this[ num + this.length ] : this[ num ];\n    },\n\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function( elems ) {\n\n        // Build a new jQuery matched element set\n        var ret = jQuery.merge( this.constructor(), elems );\n\n        // Add the old object onto the stack (as a reference)\n        ret.prevObject = this;\n\n        // Return the newly-formed element set\n        return ret;\n    },\n\n    // Execute a callback for every element in the matched set.\n    each: function( callback ) {\n        return jQuery.each( this, callback );\n    },\n\n    map: function( callback ) {\n        return this.pushStack( jQuery.map( this, function( elem, i ) {\n            return callback.call( elem, i, elem );\n        } ) );\n    },\n\n    slice: function() {\n        return this.pushStack( slice.apply( this, arguments ) );\n    },\n\n    first: function() {\n        return this.eq( 0 );\n    },\n\n    last: function() {\n        return this.eq( -1 );\n    },\n\n    even: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return ( i + 1 ) % 2;\n        } ) );\n    },\n\n    odd: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return i % 2;\n        } ) );\n    },\n\n    eq: function( i ) {\n        var len = this.length,\n            j = +i + ( i < 0 ? len : 0 );\n        return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n    },\n\n    end: function() {\n        return this.prevObject || this.constructor();\n    }\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n    var options, name, src, copy, copyIsArray, clone,\n        target = arguments[ 0 ] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    // Handle a deep copy situation\n    if ( typeof target === \"boolean\" ) {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[ i ] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if ( typeof target !== \"object\" && typeof target !== \"function\" ) {\n        target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if ( i === length ) {\n        target = this;\n        i--;\n    }\n\n    for ( ; i < length; i++ ) {\n\n        // Only deal with non-null/undefined values\n        if ( ( options = arguments[ i ] ) != null ) {\n\n            // Extend the base object\n            for ( name in options ) {\n                copy = options[ name ];\n\n                // Prevent Object.prototype pollution\n                // Prevent never-ending loop\n                if ( name === \"__proto__\" || target === copy ) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n                    ( copyIsArray = Array.isArray( copy ) ) ) ) {\n                    src = target[ name ];\n\n                    // Ensure proper type for the source value\n                    if ( copyIsArray && !Array.isArray( src ) ) {\n                        clone = [];\n                    } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n                        clone = {};\n                    } else {\n                        clone = src;\n                    }\n                    copyIsArray = false;\n\n                    // Never move original objects, clone them\n                    target[ name ] = jQuery.extend( deep, clone, copy );\n\n                // Don't bring in undefined values\n                } else if ( copy !== undefined ) {\n                    target[ name ] = copy;\n                }\n            }\n        }\n    }\n\n    // Return the modified object\n    return target;\n};\n\njQuery.extend( {\n\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n\n    error: function( msg ) {\n        throw new Error( msg );\n    },\n\n    noop: function() {},\n\n    isPlainObject: function( obj ) {\n        var proto, Ctor;\n\n        // Detect obvious negatives\n        // Use toString instead of jQuery.type to catch host objects\n        if ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n            return false;\n        }\n\n        proto = getProto( obj );\n\n        // Objects with no prototype (e.g., `Object.create( null )`) are plain\n        if ( !proto ) {\n            return true;\n        }\n\n        // Objects with prototype are plain iff they were constructed by a global Object function\n        Ctor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n        return typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n    },\n\n    isEmptyObject: function( obj ) {\n        var name;\n\n        for ( name in obj ) {\n            return false;\n        }\n        return true;\n    },\n\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function( code, options, doc ) {\n        DOMEval( code, { nonce: options && options.nonce }, doc );\n    },\n\n    each: function( obj, callback ) {\n        var length, i = 0;\n\n        if ( isArrayLike( obj ) ) {\n            length = obj.length;\n            for ( ; i < length; i++ ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        } else {\n            for ( i in obj ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        }\n\n        return obj;\n    },\n\n\n    // Retrieve the text value of an array of DOM nodes\n    text: function( elem ) {\n        var node,\n            ret = \"\",\n            i = 0,\n            nodeType = elem.nodeType;\n\n        if ( !nodeType ) {\n\n            // If no nodeType, this is expected to be an array\n            while ( ( node = elem[ i++ ] ) ) {\n\n                // Do not traverse comment nodes\n                ret += jQuery.text( node );\n            }\n        } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n            return elem.textContent;\n        } else if ( nodeType === 3 || nodeType === 4 ) {\n            return elem.nodeValue;\n        }\n\n        // Do not include comment or processing instruction nodes\n\n        return ret;\n    },\n\n\n    // results is for internal usage only\n    makeArray: function( arr, results ) {\n        var ret = results || [];\n\n        if ( arr != null ) {\n            if ( isArrayLike( Object( arr ) ) ) {\n                jQuery.merge( ret,\n                    typeof arr === \"string\" ?\n                        [ arr ] : arr\n                );\n            } else {\n                push.call( ret, arr );\n            }\n        }\n\n        return ret;\n    },\n\n    inArray: function( elem, arr, i ) {\n        return arr == null ? -1 : indexOf.call( arr, elem, i );\n    },\n\n    isXMLDoc: function( elem ) {\n        var namespace = elem.namespaceURI,\n            docElem = ( elem.ownerDocument || elem ).documentElement;\n\n        // Assume HTML when documentElement doesn't yet exist, such as inside\n        // document fragments.\n        return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n    },\n\n    merge: function( first, second ) {\n        var len = +second.length,\n            j = 0,\n            i = first.length;\n\n        for ( ; j < len; j++ ) {\n            first[ i++ ] = second[ j ];\n        }\n\n        first.length = i;\n\n        return first;\n    },\n\n    grep: function( elems, callback, invert ) {\n        var callbackInverse,\n            matches = [],\n            i = 0,\n            length = elems.length,\n            callbackExpect = !invert;\n\n        // Go through the array, only saving the items\n        // that pass the validator function\n        for ( ; i < length; i++ ) {\n            callbackInverse = !callback( elems[ i ], i );\n            if ( callbackInverse !== callbackExpect ) {\n                matches.push( elems[ i ] );\n            }\n        }\n\n        return matches;\n    },\n\n    // arg is for internal usage only\n    map: function( elems, callback, arg ) {\n        var length, value,\n            i = 0,\n            ret = [];\n\n        // Go through the array, translating each of the items to their new values\n        if ( isArrayLike( elems ) ) {\n            length = elems.length;\n            for ( ; i < length; i++ ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n\n        // Go through every key on the object,\n        } else {\n            for ( i in elems ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n        }\n\n        // Flatten any nested arrays\n        return flat( ret );\n    },\n\n    // A global GUID counter for objects\n    guid: 1,\n\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n    jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n    function( _i, name ) {\n        class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n    } );\n\nfunction isArrayLike( obj ) {\n\n    var length = !!obj && obj.length,\n        type = toType( obj );\n\n    if ( typeof obj === \"function\" || isWindow( obj ) ) {\n        return false;\n    }\n\n    return type === \"array\" || length === 0 ||\n        typeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\nexport default jQuery;\n","export default function isWindow( obj ) {\n\treturn obj != null && obj === obj.window;\n}\n","// All support tests are defined in their respective modules.\nexport default {};\n","function nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\n\nexport default nodeName;\n","import document from \"./document.js\";\n\nexport default document.documentElement;\n","import arr from \"./arr.js\";\n\nexport default arr.pop;\n","// https://www.w3.org/TR/css3-selectors/#whitespace\nexport default \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n","import document from \"./document.js\";\n\nexport default document.documentMode;\n","import isIE from '../var/isIE.js';\nimport whitespace from \"./var/whitespace.js\";\n\nvar rbuggyQSA = isIE && new RegExp(\n\n\t// Support: IE 9 - 11+\n\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\":enabled|:disabled|\" +\n\n\t// Support: IE 11+\n\t// IE 11 doesn't find elements on a `[name='']` query in some cases.\n\t// Adding a temporary attribute to the document before the selection works\n\t// around the issue.\n\t\"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\twhitespace + \"*(?:''|\\\"\\\")\"\n\n);\n\nexport default rbuggyQSA;\n","import jQuery from '../core.js';\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\tbup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\tadown.contains ?\n\t\t\tadown.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n","import jQuery from '../core.js';\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n","import arr from \"./arr.js\";\n\nexport default arr.sort;\n","import jQuery from '../core.js';\nimport document from '../var/document.js';\nimport sort from '../var/sort.js';\n\nlet hasDuplicate;\n\n// Document order sorting\nfunction sortOrder(a, b) {\n\n    // Flag for duplicate removal\n    if (a === b) {\n        hasDuplicate = true;\n\n        return 0;\n    }\n\n    // Sort on method existence if only one input has compareDocumentPosition\n    let compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n    if (compare) {\n        return compare;\n    }\n\n    // Calculate position if both inputs belong to the same document\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    compare = (a.ownerDocument || a) == (b.ownerDocument || b)\n        ? a.compareDocumentPosition(b)\n\n    // Otherwise we know they are disconnected\n        : 1;\n\n    // Disconnected nodes\n    if (compare & 1) {\n\n        // Choose the first element that is related to the document\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (a == document || a.ownerDocument == document\n\t\t\t&& jQuery.contains(document, a)) {\n            return -1;\n        }\n\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (b == document || b.ownerDocument == document\n\t\t\t&& jQuery.contains(document, b)) {\n            return 1;\n        }\n\n        // Maintain original order\n        return 0;\n    }\n\n    return compare & 4 ? -1 : 1;\n}\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function(results) {\n    let elem,\n        duplicates = [],\n        j = 0,\n        i = 0;\n\n    hasDuplicate = false;\n\n    sort.call(results, sortOrder);\n\n    if (hasDuplicate) {\n        while (elem = results[i++]) {\n            if (elem === results[i]) {\n                j = duplicates.push(i);\n            }\n        }\n        while (j--) {\n            results.splice(duplicates[j], 1);\n        }\n    }\n\n    return results;\n};\n","import jQuery from \"./core.js\";\nimport nodeName from \"./core/nodeName.js\";\nimport document from \"./var/document.js\";\nimport documentElement from \"./var/documentElement.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport pop from \"./var/pop.js\";\nimport push from \"./var/push.js\";\nimport whitespace from \"./selector/var/whitespace.js\";\nimport rbuggyQSA from \"./selector/rbuggyQSA.js\";\nimport isIE from \"./var/isIE.js\";\n\n// The following utils are attached directly to the jQuery object.\nimport \"./selector/contains.js\";\nimport \"./selector/escapeSelector.js\";\nimport \"./selector/uniqueSort.js\";\n\nvar preferredDoc = document,\n    matches = documentElement.matches || documentElement.msMatchesSelector;\n\n( function() {\n\nvar i,\n    Expr,\n    outermostContext,\n\n    // Local document vars\n    document,\n    documentElement,\n    documentIsHTML,\n\n    // Instance-specific data\n    expando = jQuery.expando,\n    dirruns = 0,\n    done = 0,\n    classCache = createCache(),\n    tokenCache = createCache(),\n    compilerCache = createCache(),\n    nonnativeSelectorCache = createCache(),\n\n    booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n        \"loop|multiple|open|readonly|required|scoped\",\n\n    // Regular expressions\n\n    // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n    // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n        // Operator (capture 2)\n        \"*([*^$|!~]?=)\" + whitespace +\n\n        // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n        \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n        whitespace + \"*\\\\]\",\n\n    pseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n        // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n        // 1. quoted (capture 3; capture 4 or capture 5)\n        \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n        // 2. simple (capture 6)\n        \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n        // 3. anything else (capture 2)\n        \".*\" +\n        \")\\\\)|)\",\n\n    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n    rtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n    rcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n    rcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n        whitespace + \"*\" ),\n    rdescend = new RegExp( whitespace + \"|>\" ),\n\n    rpseudo = new RegExp( pseudos ),\n    ridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n    matchExpr = {\n        ID: new RegExp( \"^#(\" + identifier + \")\" ),\n        CLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n        TAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n        ATTR: new RegExp( \"^\" + attributes ),\n        PSEUDO: new RegExp( \"^\" + pseudos ),\n        CHILD: new RegExp(\n            \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n                whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n                whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n        bool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n        // For use in libraries implementing .is()\n        // We use this for POS matching in `select`\n        needsContext: new RegExp( \"^\" + whitespace +\n            \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n            \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n    },\n\n    rinputs = /^(?:input|select|textarea|button)$/i,\n    rheader = /^h\\d$/i,\n\n    // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n    rsibling = /[+~]/,\n\n    // CSS escapes\n    // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n    funescape = function( escape, nonHex ) {\n        var high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n        if ( nonHex ) {\n\n            // Strip the backslash prefix from a non-hex escape sequence\n            return nonHex;\n        }\n\n        // Replace a hexadecimal escape sequence with the encoded Unicode code point\n        // Support: IE <=11+\n        // For values outside the Basic Multilingual Plane (BMP), manually construct a\n        // surrogate pair\n        return high < 0 ?\n            String.fromCharCode( high + 0x10000 ) :\n            String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n    },\n\n    // Used for iframes; see `setDocument`.\n    // Support: IE 9 - 11+\n    // Removing the function wrapper causes a \"Permission Denied\"\n    // error in IE.\n    unloadHandler = function() {\n        setDocument();\n    },\n\n    inDisabledFieldset = addCombinator(\n        function( elem ) {\n            return elem.disabled === true && nodeName( elem, \"fieldset\" );\n        },\n        { dir: \"parentNode\", next: \"legend\" }\n    );\n\nfunction selectorError( msg ) {\n    throw new Error( \"Syntax error, unrecognized expression: \" + msg );\n}\n\nfunction find( selector, context, results, seed ) {\n    var m, i, elem, nid, match, groups, newSelector,\n        newContext = context && context.ownerDocument,\n\n        // nodeType defaults to 9, since context defaults to document\n        nodeType = context ? context.nodeType : 9;\n\n    results = results || [];\n\n    // Return early from calls with invalid selector or context\n    if ( typeof selector !== \"string\" || !selector ||\n        nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n        return results;\n    }\n\n    // Try to shortcut find operations (as opposed to filters) in HTML documents\n    if ( !seed ) {\n        setDocument( context );\n        context = context || document;\n\n        if ( documentIsHTML ) {\n\n            // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n            // (excepting DocumentFragment context, where the methods don't exist)\n            if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n                // ID selector\n                if ( ( m = match[ 1 ] ) ) {\n\n                    // Document context\n                    if ( nodeType === 9 ) {\n                        if ( ( elem = context.getElementById( m ) ) ) {\n                            push.call( results, elem );\n                        }\n                        return results;\n\n                    // Element context\n                    } else {\n                        if ( newContext && ( elem = newContext.getElementById( m ) ) &&\n                            jQuery.contains( context, elem ) ) {\n\n                            push.call( results, elem );\n                            return results;\n                        }\n                    }\n\n                // Type selector\n                } else if ( match[ 2 ] ) {\n                    push.apply( results, context.getElementsByTagName( selector ) );\n                    return results;\n\n                // Class selector\n                } else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n                    push.apply( results, context.getElementsByClassName( m ) );\n                    return results;\n                }\n            }\n\n            // Take advantage of querySelectorAll\n            if ( !nonnativeSelectorCache[ selector + \" \" ] &&\n                ( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n                newSelector = selector;\n                newContext = context;\n\n                // qSA considers elements outside a scoping root when evaluating child or\n                // descendant combinators, which is not what we want.\n                // In such cases, we work around the behavior by prefixing every selector in the\n                // list with an ID selector referencing the scope context.\n                // The technique has to be used as well when a leading combinator is used\n                // as such selectors are not recognized by querySelectorAll.\n                // Thanks to Andrew Dupont for this technique.\n                if ( nodeType === 1 &&\n                    ( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n                    // Expand context for sibling selectors\n                    newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n                        context;\n\n                    // Outside of IE, if we're not changing the context we can\n                    // use :scope instead of an ID.\n                    if ( newContext !== context || isIE ) {\n\n                        // Capture the context ID, setting it first if necessary\n                        if ( ( nid = context.getAttribute( \"id\" ) ) ) {\n                            nid = jQuery.escapeSelector( nid );\n                        } else {\n                            context.setAttribute( \"id\", ( nid = expando ) );\n                        }\n                    }\n\n                    // Prefix every selector in the list\n                    groups = tokenize( selector );\n                    i = groups.length;\n                    while ( i-- ) {\n                        groups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n                            toSelector( groups[ i ] );\n                    }\n                    newSelector = groups.join( \",\" );\n                }\n\n                try {\n                    push.apply( results,\n                        newContext.querySelectorAll( newSelector )\n                    );\n                    return results;\n                } catch ( qsaError ) {\n                    nonnativeSelectorCache( selector, true );\n                } finally {\n                    if ( nid === expando ) {\n                        context.removeAttribute( \"id\" );\n                    }\n                }\n            }\n        }\n    }\n\n    // All others\n    return select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *  deleting the oldest entry\n */\nfunction createCache() {\n    var keys = [];\n\n    function cache( key, value ) {\n\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n            // Only keep the most recent entries\n            delete cache[ keys.shift() ];\n        }\n        return ( cache[ key + \" \" ] = value );\n    }\n    return cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n    fn[ expando ] = true;\n    return fn;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n    return function( elem ) {\n        return nodeName( elem, \"input\" ) && elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n    return function( elem ) {\n        return ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n            elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n    // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n    return function( elem ) {\n\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if ( \"form\" in elem ) {\n\n            // Check for inherited disabledness on relevant non-disabled elements:\n            // * listed form-associated elements in a disabled fieldset\n            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n            // * option elements in a disabled optgroup\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n            // All such elements have a \"form\" property.\n            if ( elem.parentNode && elem.disabled === false ) {\n\n                // Option elements defer to a parent optgroup if present\n                if ( \"label\" in elem ) {\n                    if ( \"label\" in elem.parentNode ) {\n                        return elem.parentNode.disabled === disabled;\n                    } else {\n                        return elem.disabled === disabled;\n                    }\n                }\n\n                // Support: IE 6 - 11+\n                // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n                return elem.isDisabled === disabled ||\n\n                    // Where there is no isDisabled, check manually\n                    elem.isDisabled !== !disabled &&\n                        inDisabledFieldset( elem ) === disabled;\n            }\n\n            return elem.disabled === disabled;\n\n        // Try to winnow out elements that can't be disabled before trusting the disabled property.\n        // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n        // even exist on them, let alone have a boolean value.\n        } else if ( \"label\" in elem ) {\n            return elem.disabled === disabled;\n        }\n\n        // Remaining elements are neither :enabled nor :disabled\n        return false;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n    return markFunction( function( argument ) {\n        argument = +argument;\n        return markFunction( function( seed, matches ) {\n            var j,\n                matchIndexes = fn( [], seed.length, argument ),\n                i = matchIndexes.length;\n\n            // Match elements found at the specified indexes\n            while ( i-- ) {\n                if ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n                    seed[ j ] = !( matches[ j ] = seed[ j ] );\n                }\n            }\n        } );\n    } );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n    return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n */\nfunction setDocument( node ) {\n    var subWindow,\n        doc = node ? node.ownerDocument || node : preferredDoc;\n\n    // Return early if doc is invalid or already selected\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( doc == document || doc.nodeType !== 9 ) {\n        return;\n    }\n\n    // Update global variables\n    document = doc;\n    documentElement = document.documentElement;\n    documentIsHTML = !jQuery.isXMLDoc( document );\n\n    // Support: IE 9 - 11+\n    // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( isIE && preferredDoc != document &&\n        ( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n        subWindow.addEventListener( \"unload\", unloadHandler );\n    }\n}\n\nfind.matches = function( expr, elements ) {\n    return find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n    setDocument( elem );\n\n    if ( documentIsHTML &&\n        !nonnativeSelectorCache[ expr + \" \" ] &&\n        ( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n        try {\n            return matches.call( elem, expr );\n        } catch ( e ) {\n            nonnativeSelectorCache( expr, true );\n        }\n    }\n\n    return find( expr, document, null, [ elem ] ).length > 0;\n};\n\nExpr = jQuery.expr = {\n\n    // Can be adjusted by the user\n    cacheLength: 50,\n\n    createPseudo: markFunction,\n\n    match: matchExpr,\n\n    find: {\n        ID: function( id, context ) {\n            if ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n                var elem = context.getElementById( id );\n                return elem ? [ elem ] : [];\n            }\n        },\n\n        TAG: function( tag, context ) {\n            if ( typeof context.getElementsByTagName !== \"undefined\" ) {\n                return context.getElementsByTagName( tag );\n\n                // DocumentFragment nodes don't have gEBTN\n            } else {\n                return context.querySelectorAll( tag );\n            }\n        },\n\n        CLASS: function( className, context ) {\n            if ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n                return context.getElementsByClassName( className );\n            }\n        }\n    },\n\n    relative: {\n        \">\": { dir: \"parentNode\", first: true },\n        \" \": { dir: \"parentNode\" },\n        \"+\": { dir: \"previousSibling\", first: true },\n        \"~\": { dir: \"previousSibling\" }\n    },\n\n    preFilter: {\n        ATTR: function( match ) {\n            match[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n            // Move the given value to match[3] whether quoted or unquoted\n            match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n                .replace( runescape, funescape );\n\n            if ( match[ 2 ] === \"~=\" ) {\n                match[ 3 ] = \" \" + match[ 3 ] + \" \";\n            }\n\n            return match.slice( 0, 4 );\n        },\n\n        CHILD: function( match ) {\n\n            /* matches from matchExpr[\"CHILD\"]\n                1 type (only|nth|...)\n                2 what (child|of-type)\n                3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n                4 xn-component of xn+y argument ([+-]?\\d*n|)\n                5 sign of xn-component\n                6 x of xn-component\n                7 sign of y-component\n                8 y of y-component\n            */\n            match[ 1 ] = match[ 1 ].toLowerCase();\n\n            if ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n                // nth-* requires argument\n                if ( !match[ 3 ] ) {\n                    selectorError( match[ 0 ] );\n                }\n\n                // numeric x and y parameters for Expr.filter.CHILD\n                // remember that false/true cast respectively to 0/1\n                match[ 4 ] = +( match[ 4 ] ?\n                    match[ 5 ] + ( match[ 6 ] || 1 ) :\n                    2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n                );\n                match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n            // other types prohibit arguments\n            } else if ( match[ 3 ] ) {\n                selectorError( match[ 0 ] );\n            }\n\n            return match;\n        },\n\n        PSEUDO: function( match ) {\n            var excess,\n                unquoted = !match[ 6 ] && match[ 2 ];\n\n            if ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n                return null;\n            }\n\n            // Accept quoted arguments as-is\n            if ( match[ 3 ] ) {\n                match[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n            // Strip excess characters from unquoted arguments\n            } else if ( unquoted && rpseudo.test( unquoted ) &&\n\n                // Get excess from tokenize (recursively)\n                ( excess = tokenize( unquoted, true ) ) &&\n\n                // advance to the next closing parenthesis\n                ( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n                // excess is a negative index\n                match[ 0 ] = match[ 0 ].slice( 0, excess );\n                match[ 2 ] = unquoted.slice( 0, excess );\n            }\n\n            // Return only captures needed by the pseudo filter method (type and argument)\n            return match.slice( 0, 3 );\n        }\n    },\n\n    filter: {\n        ID: function( id ) {\n            var attrId = id.replace( runescape, funescape );\n            return function( elem ) {\n                return elem.getAttribute( \"id\" ) === attrId;\n            };\n        },\n\n        TAG: function( nodeNameSelector ) {\n            var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n            return nodeNameSelector === \"*\" ?\n\n                function() {\n                    return true;\n                } :\n\n                function( elem ) {\n                    return nodeName( elem, expectedNodeName );\n                };\n        },\n\n        CLASS: function( className ) {\n            var pattern = classCache[ className + \" \" ];\n\n            return pattern ||\n                ( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n                    \"(\" + whitespace + \"|$)\" ) ) &&\n                classCache( className, function( elem ) {\n                    return pattern.test(\n                        typeof elem.className === \"string\" && elem.className ||\n                            typeof elem.getAttribute !== \"undefined\" &&\n                                elem.getAttribute( \"class\" ) ||\n                            \"\"\n                    );\n                } );\n        },\n\n        ATTR: function( name, operator, check ) {\n            return function( elem ) {\n                var result = jQuery.attr( elem, name );\n\n                if ( result == null ) {\n                    return operator === \"!=\";\n                }\n                if ( !operator ) {\n                    return true;\n                }\n\n                result += \"\";\n\n                if ( operator === \"=\" ) {\n                    return result === check;\n                }\n                if ( operator === \"!=\" ) {\n                    return result !== check;\n                }\n                if ( operator === \"^=\" ) {\n                    return check && result.indexOf( check ) === 0;\n                }\n                if ( operator === \"*=\" ) {\n                    return check && result.indexOf( check ) > -1;\n                }\n                if ( operator === \"$=\" ) {\n                    return check && result.slice( -check.length ) === check;\n                }\n                if ( operator === \"~=\" ) {\n                    return ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n                        .indexOf( check ) > -1;\n                }\n                if ( operator === \"|=\" ) {\n                    return result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n                }\n\n                return false;\n            };\n        },\n\n        CHILD: function( type, what, _argument, first, last ) {\n            var simple = type.slice( 0, 3 ) !== \"nth\",\n                forward = type.slice( -4 ) !== \"last\",\n                ofType = what === \"of-type\";\n\n            return first === 1 && last === 0 ?\n\n                // Shortcut for :nth-*(n)\n                function( elem ) {\n                    return !!elem.parentNode;\n                } :\n\n                function( elem, _context, xml ) {\n                    var cache, outerCache, node, nodeIndex, start,\n                        dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                        parent = elem.parentNode,\n                        name = ofType && elem.nodeName.toLowerCase(),\n                        useCache = !xml && !ofType,\n                        diff = false;\n\n                    if ( parent ) {\n\n                        // :(first|last|only)-(child|of-type)\n                        if ( simple ) {\n                            while ( dir ) {\n                                node = elem;\n                                while ( ( node = node[ dir ] ) ) {\n                                    if ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) {\n\n                                        return false;\n                                    }\n                                }\n\n                                // Reverse direction for :only-* (if we haven't yet done so)\n                                start = dir = type === \"only\" && !start && \"nextSibling\";\n                            }\n                            return true;\n                        }\n\n                        start = [ forward ? parent.firstChild : parent.lastChild ];\n\n                        // non-xml :nth-child(...) stores cache data on `parent`\n                        if ( forward && useCache ) {\n\n                            // Seek `elem` from a previously-cached index\n                            outerCache = parent[ expando ] || ( parent[ expando ] = {} );\n                            cache = outerCache[ type ] || [];\n                            nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                            diff = nodeIndex && cache[ 2 ];\n                            node = nodeIndex && parent.childNodes[ nodeIndex ];\n\n                            while ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n                                // Fallback to seeking `elem` from the start\n                                ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                // When found, cache indexes on `parent` and break\n                                if ( node.nodeType === 1 && ++diff && node === elem ) {\n                                    outerCache[ type ] = [ dirruns, nodeIndex, diff ];\n                                    break;\n                                }\n                            }\n\n                        } else {\n\n                            // Use previously-cached element index if available\n                            if ( useCache ) {\n                                outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n                                cache = outerCache[ type ] || [];\n                                nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                                diff = nodeIndex;\n                            }\n\n                            // xml :nth-child(...)\n                            // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n                            if ( diff === false ) {\n\n                                // Use the same loop as above to seek `elem` from the start\n                                while ( ( node = ++nodeIndex && node && node[ dir ] ||\n                                    ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                    if ( ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) &&\n                                        ++diff ) {\n\n                                        // Cache the index of each encountered element\n                                        if ( useCache ) {\n                                            outerCache = node[ expando ] ||\n                                                ( node[ expando ] = {} );\n                                            outerCache[ type ] = [ dirruns, diff ];\n                                        }\n\n                                        if ( node === elem ) {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        // Incorporate the offset, then check against cycle size\n                        diff -= last;\n                        return diff === first || ( diff % first === 0 && diff / first >= 0 );\n                    }\n                };\n        },\n\n        PSEUDO: function( pseudo, argument ) {\n\n            // pseudo-class names are case-insensitive\n            // https://www.w3.org/TR/selectors/#pseudo-classes\n            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n            // Remember that setFilters inherits from pseudos\n            var args,\n                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n                    selectorError( \"unsupported pseudo: \" + pseudo );\n\n            // The user may use createPseudo to indicate that\n            // arguments are needed to create the filter function\n            // just as jQuery does\n            if ( fn[ expando ] ) {\n                return fn( argument );\n            }\n\n            // But maintain support for old signatures\n            if ( fn.length > 1 ) {\n                args = [ pseudo, pseudo, \"\", argument ];\n                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n                    markFunction( function( seed, matches ) {\n                        var idx,\n                            matched = fn( seed, argument ),\n                            i = matched.length;\n                        while ( i-- ) {\n                            idx = indexOf.call( seed, matched[ i ] );\n                            seed[ idx ] = !( matches[ idx ] = matched[ i ] );\n                        }\n                    } ) :\n                    function( elem ) {\n                        return fn( elem, 0, args );\n                    };\n            }\n\n            return fn;\n        }\n    },\n\n    pseudos: {\n\n        // Potentially complex pseudos\n        not: markFunction( function( selector ) {\n\n            // Trim the selector passed to compile\n            // to avoid treating leading and trailing\n            // spaces as combinators\n            var input = [],\n                results = [],\n                matcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n            return matcher[ expando ] ?\n                markFunction( function( seed, matches, _context, xml ) {\n                    var elem,\n                        unmatched = matcher( seed, null, xml, [] ),\n                        i = seed.length;\n\n                    // Match elements unmatched by `matcher`\n                    while ( i-- ) {\n                        if ( ( elem = unmatched[ i ] ) ) {\n                            seed[ i ] = !( matches[ i ] = elem );\n                        }\n                    }\n                } ) :\n                function( elem, _context, xml ) {\n                    input[ 0 ] = elem;\n                    matcher( input, null, xml, results );\n\n                    // Don't keep the element (issue #299)\n                    input[ 0 ] = null;\n                    return !results.pop();\n                };\n        } ),\n\n        has: markFunction( function( selector ) {\n            return function( elem ) {\n                return find( selector, elem ).length > 0;\n            };\n        } ),\n\n        contains: markFunction( function( text ) {\n            text = text.replace( runescape, funescape );\n            return function( elem ) {\n                return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n            };\n        } ),\n\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // https://www.w3.org/TR/selectors/#lang-pseudo\n        lang: markFunction( function( lang ) {\n\n            // lang value must be a valid identifier\n            if ( !ridentifier.test( lang || \"\" ) ) {\n                selectorError( \"unsupported lang: \" + lang );\n            }\n            lang = lang.replace( runescape, funescape ).toLowerCase();\n            return function( elem ) {\n                var elemLang;\n                do {\n                    if ( ( elemLang = documentIsHTML ?\n                        elem.lang :\n                        elem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n                        elemLang = elemLang.toLowerCase();\n                        return elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n                    }\n                } while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n                return false;\n            };\n        } ),\n\n        // Miscellaneous\n        target: function( elem ) {\n            var hash = window.location && window.location.hash;\n            return hash && hash.slice( 1 ) === elem.id;\n        },\n\n        root: function( elem ) {\n            return elem === documentElement;\n        },\n\n        focus: function( elem ) {\n            return elem === document.activeElement &&\n                document.hasFocus() &&\n                !!( elem.type || elem.href || ~elem.tabIndex );\n        },\n\n        // Boolean properties\n        enabled: createDisabledPseudo( false ),\n        disabled: createDisabledPseudo( true ),\n\n        checked: function( elem ) {\n\n            // In CSS3, :checked should return both checked and selected elements\n            // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n            return ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n                ( nodeName( elem, \"option\" ) && !!elem.selected );\n        },\n\n        selected: function( elem ) {\n\n            // Support: IE <=11+\n            // Accessing the selectedIndex property\n            // forces the browser to treat the default option as\n            // selected when in an optgroup.\n            if ( isIE && elem.parentNode ) {\n                // eslint-disable-next-line no-unused-expressions\n                elem.parentNode.selectedIndex;\n            }\n\n            return elem.selected === true;\n        },\n\n        // Contents\n        empty: function( elem ) {\n\n            // https://www.w3.org/TR/selectors/#empty-pseudo\n            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n            //   but not by others (comment: 8; processing instruction: 7; etc.)\n            // nodeType < 6 works because attributes (2) do not appear as children\n            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n                if ( elem.nodeType < 6 ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        parent: function( elem ) {\n            return !Expr.pseudos.empty( elem );\n        },\n\n        // Element/input types\n        header: function( elem ) {\n            return rheader.test( elem.nodeName );\n        },\n\n        input: function( elem ) {\n            return rinputs.test( elem.nodeName );\n        },\n\n        button: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n                nodeName( elem, \"button\" );\n        },\n\n        text: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"text\";\n        },\n\n        // Position-in-collection\n        first: createPositionalPseudo( function() {\n            return [ 0 ];\n        } ),\n\n        last: createPositionalPseudo( function( _matchIndexes, length ) {\n            return [ length - 1 ];\n        } ),\n\n        eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n            return [ argument < 0 ? argument + length : argument ];\n        } ),\n\n        even: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 0;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        odd: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 1;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        lt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i;\n\n            if ( argument < 0 ) {\n                i = argument + length;\n            } else if ( argument > length ) {\n                i = length;\n            } else {\n                i = argument;\n            }\n\n            for ( ; --i >= 0; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        gt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i = argument < 0 ? argument + length : argument;\n            for ( ; ++i < length; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } )\n    }\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n    Expr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n    Expr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n    var matched, match, tokens, type,\n        soFar, groups, preFilters,\n        cached = tokenCache[ selector + \" \" ];\n\n    if ( cached ) {\n        return parseOnly ? 0 : cached.slice( 0 );\n    }\n\n    soFar = selector;\n    groups = [];\n    preFilters = Expr.preFilter;\n\n    while ( soFar ) {\n\n        // Comma and first run\n        if ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n            if ( match ) {\n\n                // Don't consume trailing commas as valid\n                soFar = soFar.slice( match[ 0 ].length ) || soFar;\n            }\n            groups.push( ( tokens = [] ) );\n        }\n\n        matched = false;\n\n        // Combinators\n        if ( ( match = rcombinators.exec( soFar ) ) ) {\n            matched = match.shift();\n            tokens.push( {\n                value: matched,\n\n                // Cast descendant combinators to space\n                type: match[ 0 ].replace( rtrim, \" \" )\n            } );\n            soFar = soFar.slice( matched.length );\n        }\n\n        // Filters\n        for ( type in Expr.filter ) {\n            if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n                ( match = preFilters[ type ]( match ) ) ) ) {\n                matched = match.shift();\n                tokens.push( {\n                    value: matched,\n                    type: type,\n                    matches: match\n                } );\n                soFar = soFar.slice( matched.length );\n            }\n        }\n\n        if ( !matched ) {\n            break;\n        }\n    }\n\n    // Return the length of the invalid excess\n    // if we're just parsing\n    // Otherwise, throw an error or return tokens\n    if ( parseOnly ) {\n        return soFar.length;\n    }\n\n    return soFar ?\n        selectorError( selector ) :\n\n        // Cache the tokens\n        tokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n    var i = 0,\n        len = tokens.length,\n        selector = \"\";\n    for ( ; i < len; i++ ) {\n        selector += tokens[ i ].value;\n    }\n    return selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n    var dir = combinator.dir,\n        skip = combinator.next,\n        key = skip || dir,\n        checkNonElements = base && key === \"parentNode\",\n        doneName = done++;\n\n    return combinator.first ?\n\n        // Check against closest ancestor/preceding element\n        function( elem, context, xml ) {\n            while ( ( elem = elem[ dir ] ) ) {\n                if ( elem.nodeType === 1 || checkNonElements ) {\n                    return matcher( elem, context, xml );\n                }\n            }\n            return false;\n        } :\n\n        // Check against all ancestor/preceding elements\n        function( elem, context, xml ) {\n            var oldCache, outerCache,\n                newCache = [ dirruns, doneName ];\n\n            // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n            if ( xml ) {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        if ( matcher( elem, context, xml ) ) {\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n                        if ( skip && nodeName( elem, skip ) ) {\n                            elem = elem[ dir ] || elem;\n                        } else if ( ( oldCache = outerCache[ key ] ) &&\n                            oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n                            // Assign to newCache so results back-propagate to previous elements\n                            return ( newCache[ 2 ] = oldCache[ 2 ] );\n                        } else {\n\n                            // Reuse newcache so results back-propagate to previous elements\n                            outerCache[ key ] = newCache;\n\n                            // A match means we're done; a fail means we have to keep checking\n                            if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n}\n\nfunction elementMatcher( matchers ) {\n    return matchers.length > 1 ?\n        function( elem, context, xml ) {\n            var i = matchers.length;\n            while ( i-- ) {\n                if ( !matchers[ i ]( elem, context, xml ) ) {\n                    return false;\n                }\n            }\n            return true;\n        } :\n        matchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n    var i = 0,\n        len = contexts.length;\n    for ( ; i < len; i++ ) {\n        find( selector, contexts[ i ], results );\n    }\n    return results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n    var elem,\n        newUnmatched = [],\n        i = 0,\n        len = unmatched.length,\n        mapped = map != null;\n\n    for ( ; i < len; i++ ) {\n        if ( ( elem = unmatched[ i ] ) ) {\n            if ( !filter || filter( elem, context, xml ) ) {\n                newUnmatched.push( elem );\n                if ( mapped ) {\n                    map.push( i );\n                }\n            }\n        }\n    }\n\n    return newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n    if ( postFilter && !postFilter[ expando ] ) {\n        postFilter = setMatcher( postFilter );\n    }\n    if ( postFinder && !postFinder[ expando ] ) {\n        postFinder = setMatcher( postFinder, postSelector );\n    }\n    return markFunction( function( seed, results, context, xml ) {\n        var temp, i, elem, matcherOut,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n\n            // Get initial elements from seed or context\n            elems = seed ||\n                multipleContexts( selector || \"*\",\n                    context.nodeType ? [ context ] : context, [] ),\n\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n            matcherIn = preFilter && ( seed || !selector ) ?\n                condense( elems, preMap, preFilter, context, xml ) :\n                elems;\n\n        if ( matcher ) {\n\n            // If we have a postFinder, or filtered seed, or non-seed postFilter\n            // or preexisting results,\n            matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n                // ...intermediate processing is necessary\n                [] :\n\n                // ...otherwise use results directly\n                results;\n\n            // Find primary matches\n            matcher( matcherIn, matcherOut, context, xml );\n        } else {\n            matcherOut = matcherIn;\n        }\n\n        // Apply postFilter\n        if ( postFilter ) {\n            temp = condense( matcherOut, postMap );\n            postFilter( temp, [], context, xml );\n\n            // Un-match failing elements by moving them back to matcherIn\n            i = temp.length;\n            while ( i-- ) {\n                if ( ( elem = temp[ i ] ) ) {\n                    matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n                }\n            }\n        }\n\n        if ( seed ) {\n            if ( postFinder || preFilter ) {\n                if ( postFinder ) {\n\n                    // Get the final matcherOut by condensing this intermediate into postFinder contexts\n                    temp = [];\n                    i = matcherOut.length;\n                    while ( i-- ) {\n                        if ( ( elem = matcherOut[ i ] ) ) {\n\n                            // Restore matcherIn since elem is not yet a final match\n                            temp.push( ( matcherIn[ i ] = elem ) );\n                        }\n                    }\n                    postFinder( null, ( matcherOut = [] ), temp, xml );\n                }\n\n                // Move matched elements from seed to results to keep them synchronized\n                i = matcherOut.length;\n                while ( i-- ) {\n                    if ( ( elem = matcherOut[ i ] ) &&\n                        ( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n                        seed[ temp ] = !( results[ temp ] = elem );\n                    }\n                }\n            }\n\n        // Add elements to results, through postFinder if defined\n        } else {\n            matcherOut = condense(\n                matcherOut === results ?\n                    matcherOut.splice( preexisting, matcherOut.length ) :\n                    matcherOut\n            );\n            if ( postFinder ) {\n                postFinder( null, results, matcherOut, xml );\n            } else {\n                push.apply( results, matcherOut );\n            }\n        }\n    } );\n}\n\nfunction matcherFromTokens( tokens ) {\n    var checkContext, matcher, j,\n        len = tokens.length,\n        leadingRelative = Expr.relative[ tokens[ 0 ].type ],\n        implicitRelative = leadingRelative || Expr.relative[ \" \" ],\n        i = leadingRelative ? 1 : 0,\n\n        // The foundational matcher ensures that elements are reachable from top-level context(s)\n        matchContext = addCombinator( function( elem ) {\n            return elem === checkContext;\n        }, implicitRelative, true ),\n        matchAnyContext = addCombinator( function( elem ) {\n            return indexOf.call( checkContext, elem ) > -1;\n        }, implicitRelative, true ),\n        matchers = [ function( elem, context, xml ) {\n            var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n                ( checkContext = context ).nodeType ?\n                    matchContext( elem, context, xml ) :\n                    matchAnyContext( elem, context, xml ) );\n\n            // Avoid hanging onto element (issue #299)\n            checkContext = null;\n            return ret;\n        } ];\n\n    for ( ; i < len; i++ ) {\n        if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n            matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n        } else {\n            matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n            // Return special upon seeing a positional matcher\n            if ( matcher[ expando ] ) {\n\n                // Find the next relative operator (if any) for proper handling\n                j = ++i;\n                for ( ; j < len; j++ ) {\n                    if ( Expr.relative[ tokens[ j ].type ] ) {\n                        break;\n                    }\n                }\n                return setMatcher(\n                    i > 1 && elementMatcher( matchers ),\n                    i > 1 && toSelector(\n\n                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n                        tokens.slice( 0, i - 1 )\n                            .concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n                    ).replace( rtrim, \"$1\" ),\n                    matcher,\n                    i < j && matcherFromTokens( tokens.slice( i, j ) ),\n                    j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n                    j < len && toSelector( tokens )\n                );\n            }\n            matchers.push( matcher );\n        }\n    }\n\n    return elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n    var bySet = setMatchers.length > 0,\n        byElement = elementMatchers.length > 0,\n        superMatcher = function( seed, context, xml, results, outermost ) {\n            var elem, j, matcher,\n                matchedCount = 0,\n                i = \"0\",\n                unmatched = seed && [],\n                setMatched = [],\n                contextBackup = outermostContext,\n\n                // We must always have either seed elements or outermost context\n                elems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n                // Use integer dirruns iff this is the outermost matcher\n                dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 );\n\n            if ( outermost ) {\n\n                // Support: IE 11+\n                // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                // two documents; shallow comparisons work.\n                // eslint-disable-next-line eqeqeq\n                outermostContext = context == document || context || outermost;\n            }\n\n            // Add elements passing elementMatchers directly to results\n            for ( ; ( elem = elems[ i ] ) != null; i++ ) {\n                if ( byElement && elem ) {\n                    j = 0;\n\n                    // Support: IE 11+\n                    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                    // two documents; shallow comparisons work.\n                    // eslint-disable-next-line eqeqeq\n                    if ( !context && elem.ownerDocument != document ) {\n                        setDocument( elem );\n                        xml = !documentIsHTML;\n                    }\n                    while ( ( matcher = elementMatchers[ j++ ] ) ) {\n                        if ( matcher( elem, context || document, xml ) ) {\n                            push.call( results, elem );\n                            break;\n                        }\n                    }\n                    if ( outermost ) {\n                        dirruns = dirrunsUnique;\n                    }\n                }\n\n                // Track unmatched elements for set filters\n                if ( bySet ) {\n\n                    // They will have gone through all possible matchers\n                    if ( ( elem = !matcher && elem ) ) {\n                        matchedCount--;\n                    }\n\n                    // Lengthen the array for every element, matched or not\n                    if ( seed ) {\n                        unmatched.push( elem );\n                    }\n                }\n            }\n\n            // `i` is now the count of elements visited above, and adding it to `matchedCount`\n            // makes the latter nonnegative.\n            matchedCount += i;\n\n            // Apply set filters to unmatched elements\n            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n            // no element matchers and no seed.\n            // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n            // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n            // numerically zero.\n            if ( bySet && i !== matchedCount ) {\n                j = 0;\n                while ( ( matcher = setMatchers[ j++ ] ) ) {\n                    matcher( unmatched, setMatched, context, xml );\n                }\n\n                if ( seed ) {\n\n                    // Reintegrate element matches to eliminate the need for sorting\n                    if ( matchedCount > 0 ) {\n                        while ( i-- ) {\n                            if ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n                                setMatched[ i ] = pop.call( results );\n                            }\n                        }\n                    }\n\n                    // Discard index placeholder values to get only actual matches\n                    setMatched = condense( setMatched );\n                }\n\n                // Add matches to results\n                push.apply( results, setMatched );\n\n                // Seedless set matches succeeding multiple successful matchers stipulate sorting\n                if ( outermost && !seed && setMatched.length > 0 &&\n                    ( matchedCount + setMatchers.length ) > 1 ) {\n\n                    jQuery.uniqueSort( results );\n                }\n            }\n\n            // Override manipulation of globals by nested matchers\n            if ( outermost ) {\n                dirruns = dirrunsUnique;\n                outermostContext = contextBackup;\n            }\n\n            return unmatched;\n        };\n\n    return bySet ?\n        markFunction( superMatcher ) :\n        superMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n    var i,\n        setMatchers = [],\n        elementMatchers = [],\n        cached = compilerCache[ selector + \" \" ];\n\n    if ( !cached ) {\n\n        // Generate a function of recursive functions that can be used to check each element\n        if ( !match ) {\n            match = tokenize( selector );\n        }\n        i = match.length;\n        while ( i-- ) {\n            cached = matcherFromTokens( match[ i ] );\n            if ( cached[ expando ] ) {\n                setMatchers.push( cached );\n            } else {\n                elementMatchers.push( cached );\n            }\n        }\n\n        // Cache the compiled function\n        cached = compilerCache( selector,\n            matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n        // Save selector and tokenization\n        cached.selector = selector;\n    }\n    return cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n    var i, tokens, token, type, find,\n        compiled = typeof selector === \"function\" && selector,\n        match = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n    results = results || [];\n\n    // Try to minimize operations if there is only one selector in the list and no seed\n    // (the latter of which guarantees us context)\n    if ( match.length === 1 ) {\n\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[ 0 ] = match[ 0 ].slice( 0 );\n        if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n                context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n            context = ( Expr.find.ID(\n                token.matches[ 0 ].replace( runescape, funescape ),\n                context\n            ) || [] )[ 0 ];\n            if ( !context ) {\n                return results;\n\n            // Precompiled matchers will still verify ancestry, so step up a level\n            } else if ( compiled ) {\n                context = context.parentNode;\n            }\n\n            selector = selector.slice( tokens.shift().value.length );\n        }\n\n        // Fetch a seed set for right-to-left matching\n        i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n        while ( i-- ) {\n            token = tokens[ i ];\n\n            // Abort if we hit a combinator\n            if ( Expr.relative[ ( type = token.type ) ] ) {\n                break;\n            }\n            if ( ( find = Expr.find[ type ] ) ) {\n\n                // Search, expanding context for leading sibling combinators\n                if ( ( seed = find(\n                    token.matches[ 0 ].replace( runescape, funescape ),\n                    rsibling.test( tokens[ 0 ].type ) &&\n                        testContext( context.parentNode ) || context\n                ) ) ) {\n\n                    // If seed is empty or no tokens remain, we can return early\n                    tokens.splice( i, 1 );\n                    selector = seed.length && toSelector( tokens );\n                    if ( !selector ) {\n                        push.apply( results, seed );\n                        return results;\n                    }\n\n                    break;\n                }\n            }\n        }\n    }\n\n    // Compile and execute a filtering function if one is not provided\n    // Provide `match` to avoid retokenization if we modified the selector above\n    ( compiled || compile( selector, match ) )(\n        seed,\n        context,\n        !documentIsHTML,\n        results,\n        !context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n    );\n    return results;\n}\n\n// Initialize against the default document\nsetDocument();\n\njQuery.find = find;\n\n} )();\n","import jQuery from '../core.js';\nimport toType from './toType.js';\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function(elems, fn, key, value, chainable, emptyGet, raw) {\n    let i = 0,\n        len = elems.length,\n        bulk = key == null;\n\n    // Sets many values\n    if (toType(key) === 'object') {\n        chainable = true;\n        for (i in key) {\n            access(elems, fn, i, key[i], true, emptyGet, raw);\n        }\n\n        // Sets one value\n    } else if (value !== undefined) {\n        chainable = true;\n\n        if (typeof value !== 'function') {\n            raw = true;\n        }\n\n        if (bulk) {\n\n            // Bulk operations run against the entire set\n            if (raw) {\n                fn.call(elems, value);\n                fn = null;\n\n                // ...except when executing function values\n            } else {\n                bulk = fn;\n                fn = function(elem, _key, value) {\n                    return bulk.call(jQuery(elem), value);\n                };\n            }\n        }\n\n        if (fn) {\n            for (; i < len; i++) {\n                fn(\n\t\t\t\t\telems[i], key, raw\n\t\t\t\t\t    ? value\n\t\t\t\t\t    : value.call(elems[i], i, fn(elems[i], key))\n                );\n            }\n        }\n    }\n\n    if (chainable) {\n        return elems;\n    }\n\n    // Gets\n    if (bulk) {\n        return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n};\n\nexport default access;\n","// Only count HTML whitespace\n// Other whitespace should count in values\n// https://infra.spec.whatwg.org/#ascii-whitespace\nexport default ( /[^\\x20\\t\\r\\n\\f]+/g );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport nodeName from \"../core/nodeName.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = elem.getAttribute( name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Support: IE <=11+\n// An input loses its value after becoming a radio\nif ( isIE ) {\n\tjQuery.attrHooks.type = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( value === \"radio\" && nodeName( elem, \"input\" ) ) {\n\t\t\t\tvar val = elem.value;\n\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\tif ( val ) {\n\t\t\t\t\telem.value = val;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tjQuery.attrHooks[ name ] = {\n\t\tget: function( elem ) {\n\t\t\tvar ret,\n\t\t\t\tisXML = jQuery.isXMLDoc( elem ),\n\t\t\t\tlowercaseName = name.toLowerCase();\n\n\t\t\tif ( !isXML ) {\n\t\t\t\tret = elem.getAttribute( name ) != null ?\n\t\t\t\t\tlowercaseName :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\tset: function( elem, value, name ) {\n\t\t\tif ( value === false ) {\n\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t} else {\n\t\t\t\telem.setAttribute( name, name );\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t};\n} );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = elem.getAttribute( \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\n\t\t\t\t\t// href-less anchor's `tabIndex` property value is `0` and\n\t\t\t\t\t// the `tabindex` attribute value: `null`. We want `-1`.\n\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11+\n// Accessing the selectedIndex property forces the browser to respect\n// setting selected on the option. The getter ensures a default option\n// is selected when in an optgroup. ESLint rule \"no-unused-expressions\"\n// is disabled for this code since it considers such accessions noop.\nif ( isIE ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n","import rnothtmlwhite from '../var/rnothtmlwhite.js';\n\n// Strip and collapse whitespace according to HTML spec\n// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\nfunction stripAndCollapse( value ) {\n\tvar tokens = value.match( rnothtmlwhite ) || [];\n\treturn tokens.join( \" \" );\n}\n\nexport default stripAndCollapse;\n","// rsingleTag matches a string consisting of a single HTML element with no attributes\n// and captures the element's name\nexport default ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n","import jQuery from \"../../core.js\";\n\nimport \"../../selector.js\";\n\nexport default jQuery.expr.match.needsContext;\n","import jQuery from \"../core.js\";\nimport indexOf from \"../var/indexOf.js\";\nimport rneedsContext from \"./var/rneedsContext.js\";\n\nimport \"../selector.js\";\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( typeof qualifier === \"function\" ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n","// Initialize a jQuery object\nimport jQuery from '../core.js';\nimport document from '../var/document.js';\n\nimport rsingleTag from './var/rsingleTag.js';\n\nimport '../traversing/findFilter.js';\n\n// A central reference to the root jQuery(document)\nlet rootjQuery,\n\n    // A simple way to check for HTML strings\n    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n    // Strict HTML recognition (#11290: must start with <)\n    // Shortcut simple #id case for speed\n    rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n    init = jQuery.fn.init = function(selector, context, root) {\n        let elem, match;\n\n        // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n        if (!selector) {\n            return this;\n        }\n\n        // Method init() accepts an alternate rootjQuery\n        // so migrate can support jQuery.sub (gh-2101)\n        root = root || rootjQuery;\n\n        // Handle HTML strings\n        if (typeof selector === 'string') {\n            if (selector[0] === '<'\n\t\t\t\t&& selector[selector.length - 1] === '>'\n\t\t\t\t&& selector.length >= 3) {\n\n                // Assume that strings that start and end with <> are HTML and skip the regex check\n                match = [ null, selector, null ];\n\n            } else {\n                match = rquickExpr.exec(selector);\n            }\n\n            // Match html or make sure no context is specified for #id\n            if (match && (match[1] || !context)) {\n\n                // HANDLE: $(html) -> $(array)\n                if (match[1]) {\n                    context = context instanceof jQuery ? context[0] : context;\n\n                    // Option to run scripts is true for back-compat\n                    // Intentionally let the error be thrown if parseHTML is not present\n                    jQuery.merge(this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[1],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n                    ));\n\n                    // HANDLE: $(html, props)\n                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n                        for (match in context) {\n\n                            // Properties of context are called as methods if possible\n                            if (typeof this[match] === 'function') {\n                                this[match](context[match]);\n\n                                // ...and otherwise set as attributes\n                            } else {\n                                this.attr(match, context[match]);\n                            }\n                        }\n                    }\n\n                    return this;\n\n                    // HANDLE: $(#id)\n                }\n                elem = document.getElementById(match[2]);\n\n                if (elem) {\n\n                    // Inject the element directly into the jQuery object\n                    this[0] = elem;\n                    this.length = 1;\n                }\n\n                return this;\n\n\n                // HANDLE: $(expr, $(...))\n            } else if (!context || context.jquery) {\n                return (context || root).find(selector);\n\n                // HANDLE: $(expr, context)\n                // (which is just equivalent to: $(context).find(expr)\n            }\n\n            return this.constructor(context).find(selector);\n\n\n            // HANDLE: $(DOMElement)\n        } else if (selector.nodeType) {\n            this[0] = selector;\n            this.length = 1;\n\n            return this;\n\n            // HANDLE: $(function)\n            // Shortcut for document ready\n        } else if (typeof selector === 'function') {\n            return root.ready !== undefined\n                ? root.ready(selector)\n\n            // Execute immediately if ready is not present\n                : selector(jQuery);\n        }\n\n        return jQuery.makeArray(selector, this);\n    };\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery(document);\n","import jQuery from \"../core.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\n\nimport \"../core/init.js\";\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\t// Toggle individual class names\n\t\t\ti = 0;\n\t\t\tself = jQuery( this );\n\t\t\tclassNames = classesToArray( value );\n\n\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t// Check each className given, space separated list\n\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\tself.removeClass( className );\n\t\t\t\t} else {\n\t\t\t\t\tself.addClass( className );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n","import jQuery from \"../core.js\";\n\n(global => {\n    if (typeof global.$ === 'undefined') {\n        global.$ = jQuery;\n    }\n})(global || window || this); // eslint-disable-line no-invalid-this","import jQuery from \"../core.js\";\nimport isIE from \"../var/isIE.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport nodeName from \"../core/nodeName.js\";\n\nimport \"../core/init.js\";\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = typeof value === \"function\";\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( option.selected &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery( option ).val(), values ) > -1\n\t\t\t\t\t) ) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\nif ( isIE ) {\n\tjQuery.valHooks.option = {\n\t\tget: function( elem ) {\n\n\t\t\tvar val = elem.getAttribute( \"value\" );\n\t\t\treturn val != null ?\n\t\t\t\tval :\n\n\t\t\t\t// Support: IE <=10 - 11+\n\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t}\n\t};\n}\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n} );\n","import jQuery from '../core.js';\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11+\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n","import jQuery from \"./core.js\";\nimport access from \"./core/access.js\";\nimport \"./core/init.js\";\n\n\njQuery.fn.extend( {\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t}\n} );\n\n\n\nexport default jQuery;\n","import jQuery from './core.js';\n\nimport './selector.js';\nimport './attributes.js';\nimport './core/parseXML.js';\nimport './exports/global.js';\nimport './manipulation.js';\n\nwindow.$ = jQuery\nexport default jQuery;\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./SariskaMediaTransport').default;\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive' || mLine.mid == '3')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n        this._facialExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the facial expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFacialExpressions() {\n        return this._facialExpressions;\n    }\n\n    /**\n     * Sets the facial expressions of the user.\n     *\n     * @param {Object} facialExpressions - object with facial expressions.\n     * @returns {void}\n     */\n    setFacialExpressions(facialExpressions) {\n        this._facialExpressions = facialExpressions;\n    }\n\n    /**\n     * Adds a new facial expression to speaker stats.\n     *\n     * @param  {string} facialExpression\n     * @param {number} duration\n     */\n    addFacialExpression(facialExpression, duration) {\n        this._facialExpressions[facialExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","var createTFLiteSIMDModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,s={};for(o in a)a.hasOwnProperty(o)&&(s[o]=a[o]);var u,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!u&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||k(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in s)s.hasOwnProperty(o)&&(a[o]=s[o]);s=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&k(\"no native wasm support detected\");var _=!1;var A,I,M,E,R=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function S(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&R)return R.decode(e.subarray(n,a));for(var o=\"\";n<a;){var s=e[n++];if(128&s){var u=63&e[n++];if(192!=(224&s)){var i=63&e[n++];if((s=224==(240&s)?(15&s)<<12|u<<6|i:(7&s)<<18|u<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(s);else{var c=s-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&s)<<6|u)}else o+=String.fromCharCode(s)}return o}function O(e){A=e,a.HEAP8=I=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=E=new Int32Array(e),a.HEAPU8=M=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var C,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,D=null,L=null;function k(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function U(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var j=\"data:application/octet-stream;base64,\";function F(e){return U(e,j)}var q=\"file://\";function B(e){return U(e,q)}var N,G=\"https://sdk.sariska.io/tflite-simd.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){k(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?C.get(t)():C.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}F(G)||(G=G),N=u?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return E[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),O(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(S(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,E[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?S(M,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){k()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return E[n>>2]=t/1e3|0,E[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){M.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=M.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;E[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)I[n++>>0]=e.charCodeAt(r);t||(I[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();E[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),E[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var s=E[n+8*o>>2],u=E[n+(8*o+4)>>2],i=0;i<u;i++)Z.printChar(e,M[s+i]);a+=u}return E[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,O((v=a.asm.q).buffer),C=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),L)){var n=L;L=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),k(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||F(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(L=function e(){$||ae(),$||(L=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteSIMDModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteSIMDModule}):\"object\"==typeof exports&&(exports.createTFLiteSIMDModule=createTFLiteSIMDModule);","var createTFLiteModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,u={};for(o in a)a.hasOwnProperty(o)&&(u[o]=a[o]);var s,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,s=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!s&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||U(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in u)u.hasOwnProperty(o)&&(a[o]=u[o]);u=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&U(\"no native wasm support detected\");var _=!1;var A,E,R,I,M=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function O(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&M)return M.decode(e.subarray(n,a));for(var o=\"\";n<a;){var u=e[n++];if(128&u){var s=63&e[n++];if(192!=(224&u)){var i=63&e[n++];if((u=224==(240&u)?(15&u)<<12|s<<6|i:(7&u)<<18|s<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(u);else{var c=u-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&u)<<6|s)}else o+=String.fromCharCode(u)}return o}function C(e){A=e,a.HEAP8=E=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=I=new Int32Array(e),a.HEAPU8=R=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var S,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,L=null,k=null;function U(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function j(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var F=\"data:application/octet-stream;base64,\";function D(e){return j(e,F)}var q=\"file://\";function B(e){return j(e,q)}var N,G=\"https://sdk.sariska.io/tflite.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){U(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?S.get(t)():S.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}D(G)||(G=G),N=s?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return I[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),C(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(O(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,I[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?O(R,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){U()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return I[n>>2]=t/1e3|0,I[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){R.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=R.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;I[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)E[n++>>0]=e.charCodeAt(r);t||(E[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();I[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),I[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var u=I[n+8*o>>2],s=I[n+(8*o+4)>>2],i=0;i<s;i++)Z.printChar(e,R[u+i]);a+=s}return I[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,C((v=a.asm.q).buffer),S=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==L&&(clearInterval(L),L=null),k)){var n=k;k=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),U(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||D(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(k=function e(){$||ae(),$||(k=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteModule}):\"object\"==typeof exports&&(exports.createTFLiteModule=createTFLiteModule);","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","/**\n * Enumeration of the media direction types.\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\n */\nconst MediaDirection = {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY: 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY: 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV: 'sendrecv'\n};\n\nmodule.exports = MediaDirection;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED: 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS: 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT: 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR: 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD: 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR: 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE: 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR: 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED: 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED: 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM: 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT: 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED: 'xmpp.breakout-rooms.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff ouput\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(global = global || self, factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\n\t/**\n\t* StropheJS - Stream Management XEP-0198\n\t*\n\t* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n\t* Note: Resumption is not supported in this current implementation.\n\t*\n\t* Reference: http://xmpp.org/extensions/xep-0198.html\n\t*\n\t* @class streamManagement\n\t*/\n\tstrophe_js.Strophe.addConnectionPlugin('streamManagement', {\n\n\t\t/**\n\t\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t\t*/\n\t\tlogging: false,\n\n\t\t/**\n\t\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tautoSendCountOnEveryIncomingStanza: false,\n\n\t\t/**\n\t\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t\t* number of stanzas sent. Set to 0 to disable.\n\t\t* @default 5\n\t\t* @public\n\t\t*/\n\t\trequestResponseInterval: 5,\n\n\t\t/**\n\t\t* @property {Pointer} _c: Strophe connection instance.\n\t\t* @private\n\t\t*/\n\t\t_c: null,\n\n\t\t/**\n\t\t* @property {String} _NS XMPP Namespace.\n\t\t* @private\n\t\t*/\n\t\t_NS: 'urn:xmpp:sm:3',\n\n\t\t/**\n\t\t* @property {Boolean} _isStreamManagementEnabled\n\t\t* @private\n\t\t*/\n\t\t_isStreamManagementEnabled: false,\n\n\t\t/**\n\t\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t\t* from the server.\n\t\t* @private\n\t\t*/\n\t\t_serverProcesssedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t\t* the server.\n\t\t* @private\n\t\t*/\n\t\t_clientProcessedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientSentStanzasCounter\n\t\t* @private\n\t\t*/\n\t\t_clientSentStanzasCounter: null,\n\n\t\t/**\n\t\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t\t* @method _originalXMLOutput\n\t\t* @type {Handler}\n\t\t* @private\n\t\t*/\n\t\t_originalXMLOutput: null,\n\n\t\t/**\n\t\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t\t* @private\n\t\t*/\n\t\t_requestHandler: null,\n\n\t\t/**\n\t\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t\t* @private\n\t\t*/\n\t\t_incomingHandler: null,\n\n\t\t/**\n\t\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t\t*/\n\t\t_requestResponseIntervalCount: 0,\n\n\t\t/**\n\t\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t\t * management namespace.\n\t\t */\n\t\t_isSupported: false,\n\n\t\t/**\n\t\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t\t*/\n\t\t_unacknowledgedStanzas: [],\n\n\t\t/**\n\t\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t\t* Provides the packet id of the stanza as a parameter.\n\t\t* @private\n\t\t*/\n\t\t_acknowledgedStanzaListeners: [],\n\n\t\taddAcknowledgedStanzaListener: function(listener) {\n\t\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t\t},\n\n\t\tenable: function(resume) {\n\t\t\tif (!this._isSupported) {\n\t\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t\t} else if (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._c.send(strophe_js.$build('enable', { xmlns: this._NS, resume }));\n\t\t\tthis._c.flush();\n\t\t\tthis._c.pause();\n\t\t},\n\n\t\tgetResumeToken: function() {\n\t\t\treturn this._resumeToken;\n\t\t},\n\n\t\tisSupported() {\n\t\t\treturn this._isSupported;\n\t\t},\n\n\t\tresume: function() {\n\t\t\tif (!this.getResumeToken()) {\n\t\t\t\tthrow new Error('No resume token');\n\t\t\t}\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t\t}\n\n\t\t\tthis._c.options.explicitResourceBinding = true;\n\t\t\tthis._resuming = true;\n\n\t\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t\t},\n\n\t\trequestAcknowledgement: function() {\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\tthis._c.send(strophe_js.$build('r', { xmlns: this._NS }));\n\t\t},\n\n\t\tgetOutgoingCounter: function() {\n\t\t\treturn this._clientSentStanzasCounter;\n\t\t},\n\n\t\tgetIncomingCounter: function() {\n\t\t\treturn this._clientProcessedStanzasCounter;\n\t\t},\n\n\t\tinit: function(conn) {\n\t\t\tthis._c = conn;\n\t\t\tstrophe_js.Strophe.addNamespace('SM', this._NS);\n\n\t\t\t// Storing original xmlOutput function to use additional logic\n\t\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\t\tthis._originalConnect = this._c.connect;\n\t\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\t\tthis._originalDisconnect = this._c.disconnect;\n\t\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t\t},\n\n\t\t_interceptDisconnect: function() {\n\t\t\tthis._resumeToken = undefined;\n\t\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptDoDisconnect: function() {\n\t\t\tif (this.getResumeToken()\n\t\t\t\t\t&& !this._resuming\n\t\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\t\tthis._resumeState = {\n\t\t\t\t\thandlers: this._c.handlers,\n\t\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t\t};\n\t\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t\t}\n\n\t\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\t\tthis._c._data = [];\n\n\t\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptConnectArgs: function() {\n\t\t\tthis._connectArgs = arguments;\n\n\t\t\tthis._originalConnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t\t},\n\n\t\tstatusChanged: function (status) {\n\t\t\tthis._connectionStatus = status;\n\t\t\tif (!this.getResumeToken()\n\t\t\t\t&& (status === strophe_js.Strophe.Status.CONNECTED || status === strophe_js.Strophe.Status.DISCONNECTED)) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM reset state');\n\n\t\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t\t// FIXME not described in JSDocs\n\t\t\t\tthis._resuming = false;\n\n\t\t\t\tif (status === strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\t\tthis._isSupported = false;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\t\tif (this._requestHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t\t}\n\n\t\t\t\tif (this._incomingHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t\t}\n\n\t\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t\t// FIXME handler instances stored, but never used\n\t\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t\t} else if (status === strophe_js.Strophe.Status.BINDREQUIRED)  {\n\t\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t\t// Restore Strophe handlers\n\t\t\t\tfor (const property in this._resumeState) {\n\t\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t\t}\n\n\t\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\t\tthis._c.send(strophe_js.$build('resume', {\n\t\t\t\t\txmlns: this._NS,\n\t\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\t\tprevid: this._resumeToken\n\t\t\t\t}));\n\t\t\t\tthis._c.flush();\n\t\t\t} else if (status === strophe_js.Strophe.Status.ERROR) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM cleared resume token on error');\n\t\t\t\tthis._resumeToken = undefined;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* This method overrides the send method implemented by Strophe.Connection\n\t\t* to count outgoing stanzas\n\t\t*\n\t\t* @method Send\n\t\t* @public\n\t\t*/\n\t\txmlOutput: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'presence') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'message')) {\n\t\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t\t}\n\n\t\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t\t},\n\n\t\t_handleEnabled: function(elem) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\t// FIXME fail if requested, but not enabled\n\t\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\t\tthis._c.resume();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumeFailed: function(elem) {\n\t\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.ERROR, error, elem);\n\t\t\tthis._c._doDisconnect();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumed: function(elem) {\n\t\t\t// FIXME check if in the correct state\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\tthis._resuming = false;\n\t\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\t\tthis._c.authenticated = true;\n\t\t\tthis._c.restored = true;\n\n\t\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\t\tthis._c.send(stanza);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.CONNECTED, null);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_incomingStanzaHandler: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') || strophe_js.Strophe.isTagEqual(elem, 'presence') || strophe_js.Strophe.isTagEqual(elem, 'message'))  {\n\t\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\t\tif (delta < 0) {\n\t\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < delta; i++) {\n\t\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tstrophe_js.Strophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t},\n\n\t\t_handleServerRequestHandler: function() {\n\t\t\tthis._answerProcessedStanzas();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleServerAck: function(elem){\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_answerProcessedStanzas: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._c.send(strophe_js.$build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t\t}\n\t\t},\n\n\t\t_increaseSentStanzasCounter: function(elem) {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (this._connectionStatus === strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_increaseReceivedStanzasCounter: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t\t}\n\t\t},\n\n\t\t_throwError: function(msg) {\n\t\t\tstrophe_js.Strophe.error(msg);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t});\n\n})));\n//# sourceMappingURL=strophe.stream-management.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";function e(e,r){if(!s)return!1;const n=e.buffer;let u=g.get(n);if(null==u){if((u=t.validate(n))&&r)try{new t.Instance(new t.Module(n)).exports[0]()}catch(e){u=!1}g.set(n,u)}return u}const t=WebAssembly,r=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),n=(...e)=>Uint32Array.of(1836278016,1,...e),u=(...e)=>n(1610679297,33751040,...e,40239360,259),i=(...e)=>r(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),o=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),a=(...e)=>o(...e,2842,4096,28164,28001,357,260,256,560,259,0),s=\"object\"==typeof t,f=e=>s&&\"function\"==typeof e,g=new WeakMap,l=n(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=o(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),p=n(1610679297,33751040,134873089,100664833,185276736),y=r(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),b=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),m=a(3082,2561,17152,0,0,252),A=a(2058,1537,16640,49152),d=u(101318657,301990913,268438272,1835101700,17039717),U=i(5,4,1,3,1,1,10,7,1,5,0,254,3,0),x=u(84344833,6357249,17369600,4259847,186257917,1845758464),w=i(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>s&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return f(t.instantiateStreaming)},feature:{get bigInt(){return e(l,!0)},get bulk(){return e(c)},get exceptions(){return e(p)},get mutableGlobal(){return e(y)},get multiValue(){return e(b)},get saturateConversions(){return e(m)},get signExtensions(){return e(A)},get tailCall(){return e(d)},get threads(){return e(U)},get simd(){return e(x)},get references(){return e(w)},get typeReflection(){return f(t.Memory.type)},get funcReferences(){return f(t.Function)}}};","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","internals","parse","text","args","firstOptions","reviver","length","undefined","options","obj","JSON","protoAction","match","scan","next","nodes","node","Object","prototype","hasOwnProperty","call","SyntaxError","__proto__","key","value","push","safeParse","ignoreError","Logger","LogCollector","logStorage","this","stringifyObjects","storeInterval","maxEntryLength","keys","levels","forEach","logLevel","_log","apply","arguments","bind","storeLogsIntervalID","queue","totalLen","outputCache","stringify","someObject","error","formatLogMessage","msg","i","len","arg","ERROR","timestamp","prevMessage","prevMessageText","count","_flush","start","_reschedulePublishInterval","window","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","consoleTransport","console","globalTransports","addGlobalTransport","transport","indexOf","removeGlobalTransport","transportIdx","splice","globalOptions","getCallerInfo","callerInfo","methodName","fileLocation","line","column","Error","stack","split","m","substr","log","logger","level","Array","slice","disableCallerInfo","transports","concat","t","l","logPrefixes","Date","toISOString","id","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","transform","transformUtils","parseSsrcs","writeSsrcs","getSsrcAttribute","mLine","ssrc","attributeName","ssrcs","filter","ssrcInfo","attribute","map","Simulcast","numOfLayers","ssrcCache","processVideo","session","action","isArray","media","type","validateDescription","desc","sdp","clearSsrcCache","setSsrcCache","_parseSimLayers","simGroup","ssrcGroups","find","group","semantics","ssrcStr","parseInt","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","ssrcMap","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","values","join","_generateSourceData","primarySsrc","addAssociatedStream","primarySsrcCname","primarySsrcMsid","usesUnifiedPlan","msid","simSsrcs","simSsrc","Math","floor","random","_restoreSimulcast","numSsrcs","index","array","numGroups","fidGroup","mungeRemoteDescription","enableConferenceFlag","explodeRemoteSimulcast","sources","order","j","simulcastSsrcs","parts","cname","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","info","nuke","implodeRemoteSimulcast","invalid","some","assertGoogConference","xGoogleFlag","removeGoogConference","RTCSessionDescription","write","mungeLocalDescription","direction","source","previous_async","async","only_once","fn","called","noConflict","_toString","toString","_isArray","_each","arr","iterator","_map","results","x","a","_keys","k","process","nextTick","setImmediate","each","callback","completed","done","err","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","v","mapSeries","mapLimit","_mapLimit","doParallelLimit","reduce","memo","inject","foldl","reduceRight","reversed","reverse","foldr","_filter","sort","b","filterSeries","select","selectSeries","_reject","reject","rejectSeries","_detect","main_callback","result","detect","detectSeries","any","every","all","sortBy","criteria","left","right","auto","tasks","remainingTasks","listeners","addListener","unshift","taskComplete","theCallback","task","taskCallback","safeResults","rkey","requires","abs","ready","listener","removeListener","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","data","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","r","cb","y","concatSeries","whilst","test","doWhilst","until","doUntil","worker","concurrency","_insert","q","pos","drain","item","saturated","workers","empty","paused","kill","shift","idle","pause","resume","priorityQueue","_compareTasks","priority","sequence","compare","beg","end","mid","_binarySearch","cargo","payload","working","drained","ts","ds","_console_fn","name","dir","memoize","hasher","queues","memoized","pop","unmemoized","unmemoize","counter","timesSeries","seq","fns","that","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","FACIAL_EXPRESSION_ADDED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","SUBTITLES_RECEIVED","ANALYTICS_EVENT_RECEIVED","TRACK_UPDATED","CALLSTATS_SCRIPT_URL","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","devices","gum","constraints","JitsiTrackErrors","message","constraintName","constraint","video","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","create","constructor","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","CONNECTION_DISCONNECTED","ICE_DURATION","createConferenceEvent","attributes","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","version","_detectNWJS","_detectReactNative","product","DummyLocalStorage","EventEmitter","super","defineProperty","enumerable","configurable","writable","clear","_storage","getItem","keyName","setItem","keyValue","removeItem","n","serialize","JitsiLocalStorage","localStorage","_localStorageDisabled","ignore","warn","isLocalStorageDisabled","emit","dontEmitChangedEvent","localStorageContent","jitsiLocalStorage","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","getBrowserName","getBrowserVersion","Number","_detectChromiumBased","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","platform","Boolean","isEngine","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","matches","isSupported","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","addEventListener","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","stream","ReadableStream","postMessage","supportsAudioRed","codecs","codec","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","versions","chromium","ua","reset","disposed","analyticsHandlers","Set","cache","permanentProperties","conferenceName","addPermanentProperties","browser","dispose","size","handler","setAnalyticsHandlers","handlers","_setUserProperties","event","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","e","require","wrtcFuncNames","reportType","_fabrics","CallStats","backend","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","originalMethod","theArguments","GlobalOnErrorHandler","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","then","addresses","catch","devicesData","_reportEvent","conferenceID","overall","comment","Promise","resolve","sendUserFeedback","status","reason","mute","tpc","remoteUserID","add","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","context","LocalStatsCollector","interval","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","Uint8Array","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","emitter","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","list","entries","getEntries","max","duration","observer","observe","buffered","startTime","now","longTasksIntervalId","_lastTimeStamp","rate","StatisticsEvents","stopObserver","disconnect","AUDIO","PRESENTER","VIDEO","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","bandwidth","packetLoss","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","Map","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","errorCallback","callErrorHandler","startAudioLevelStats","audioLevels","getAudioLevels","getStats","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","track","getTrackBySSRC","isAudioTrack","participantId","getParticipantId","width","height","userResolutions","userFramerates","codecDesc","userCodecs","audio","total","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","isNaN","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","byteSentStats","nominated","state","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","get","remoteCandidateId","localUsedCandidate","localCandidateId","ip","address","port","localip","protocol","conferenceStatsTransport","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","set","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","bytesSent","codecId","codecShortType","kind","MediaType","remoteSource","localVideoTracks","getLocalTracks","getLocalSSRC","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","trackIdentifier","getSsrcByTrackId","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","ScriptUtil","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","init","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","analyticsEventEmitter","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","on","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","JitsiConferenceEvents","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","removeAllListeners","stopLocalStats","startCallStats","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","userId","sendGetUserMediaFailed","formatJitsiTrackErrorForCallStats","sendLog","globalSubSet","csPerStats","sendApplicationLog","sendFeedback","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","addAnalyticsEventListener","removeAnalyticsEventListener","JitsiConferenceEventManager","xmppListeners","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","EventEmitterForwarder","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","getParticipantById","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","forward","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","JitsiConferenceErrors","bridgeDown","createBridgeDownEvent","_onConferenceRestarted","connection","emuc","doLeave","roomjid","_onIceConnectionFailed","createFocusLeftEvent","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","setProperty","tagName","substring","onMemberKicked","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","role","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","_status","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","participants","_hidden","lastDominantSpeaker","performance","ufrag","isVideoTrack","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","config","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","p","getJid","enabled","setupStatisticsListeners","setAudioLevel","startSilent","onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","ParticipantConnectionStatus","ACTIVE","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","off","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","timeout","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","JitsiParticipant","displayName","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","_features","getConference","getProperty","getTracks","jitsiTrack","isWebRTCTrackMuted","oldValue","getDisplayName","getStatsID","isHidden","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","promise","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","removeEventListener","kJitsiE2EE","Symbol","E2EEcontext","sharedKey","baseUrl","ljm","document","querySelector","idx","src","lastIndexOf","workerUrl","workerBlob","Blob","URL","createObjectURL","_worker","Worker","onerror","operation","cleanup","cleanupAll","handleReceiver","receiver","receiverStreams","readableStream","readable","writableStream","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","v4","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","d","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","body","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","newValue","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","events","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","crypto","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","hash","ArrayBuffer","ratchet","getRandomValues","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","_","el","getAttribute","category","Caps","disco","rooms","externalFeatures","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","f","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","response","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","accumulatedValue","tmp","sortedFeatures","b64_sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","min","minDelay","base","pow","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","url","service","search","pattern","oldToken","replace","cancel","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","includes","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","c","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","Events","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","readyState","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_maybeStartWSKeepAlive","plugin","addHandler","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","enable","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","send","stanza","elem","errback","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","newList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","_setMainRoomJid","_mainRoomJid","getMainRoomJid","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","myroomjid","addMessageListener","removeMessageHandler","leave","setLobbyRoomJid","joined","email","roomName","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","username","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","sessionId","createExpBackoffTimer","step","Moderator","origin","location","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","focus","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","attr","parseConfigOptions","authenticationEnabled","IDENTITY_UPDATED","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","anonymousdomain","waitMs","retrySec","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","str","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","parser","packet2JSON","xmlElement","child","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","ChatRoom","password","XMPP","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","JitsiTranscriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","getElementsByTagName","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","isTranscriber","innerHTML","toLowerCase","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","user","tag","groupInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","flags","_sourceNameSignaling","sourceNameSignaling","_sendMultipleVideoStreams","sendMultipleVideoStreams","isMultiStreamSupportEnabled","isSourceNameSignalingEnabled","_createSourceExtension","owner","sourceCompactJson","$build","s","FeatureFlags","_createSsrcGroupExtension","ssrcGroupCompactJson","_getOrCreateRtpDescription","jingle","description","content","appendChild","expandSourcesFromJson","jsonMessageXml","audioRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","ScreenObtainer","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","parseMLine","proto","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","pt","params","parseExtmap","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","generateSsrc","RandomUtil","ssrcLine","parseGroupSsrcs","ssrcGroup","getMedia","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","rtp","payloadTypes","payloads","payloadIndex","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","fmtp","rtxApts","rtxPts","keepPts","MediaDirection","rtcpFb","SDP","mediaI","raw","arrayEquals","array1","array2","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","clonedeep","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","sourceName","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpport","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fb","hasAttribute","fromJingle","contents","jingle2media","sctp","payloadType","setAttribute","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","AsyncQueue","_queue","_processQueueTasks","_stopped","finishedCallback","shutdown","PENDING","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","JingleSessionState","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","enableUnifiedOnChrome","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","H264","createPeerConnection","onicecandidate","ev","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","candidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setSSRCOwner","setTrackSourceName","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","localTrack","addTrack","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","videoActive","setMediaTransferActive","jitsiLocalTrack","getLocalVideoTracks","getSourceName","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","close","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","removedAnySSRCs","ctx","sourceInfo","request","errResponse","errorElSel","code","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","integerHash","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","href","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","trace","errStatusCapture","exec","createConnection","bosh","deploymentInfo","details","shard_changed","suspend_time","time_since_last_success","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","caps","initFeaturesList","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","deleteHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","endsWith","region","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","sync","p2pStunServers","stunServers","iceTransportPolicy","headersArr","trim","header","sendFacialExpressionEvent","expression","facialExpression","jsonString","users","created_timestamp","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","TypeError","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","once","mode","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","sendSourceVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","videoConstraints","idealHeight","onclose","jsonObject","DEFAULT_CONSTRAINTS","ideal","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","createElement","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","getStreamID","getTrackID","element","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","pcConstraints","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","enumerateDevices","_getUserMedia","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","facingMode","CameraFacingMode","micDeviceId","assign","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","MediaStream","desktopVideoTracks","desktopVideoStream","avStream","audioTracks","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","googSuspendBelowMinBitrate","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","trackId","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","getSettings","metadata","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackAsUnmute","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","successCallback","_removeLocalTrackAsMute","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","streamInfo","cont","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","removeTrack","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","setSourceName","unmute","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","SignalingLayer","getSSRCOwner","getPeerSourceInfo","getTrackSourceName","opts","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","sessionVersion","resultSdp","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","mediaSection","sourceToMsidMap","trackToMsid","streamAndTrackIDs","mediaDirection","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_getSsrcAttribute","_generateNewSsrcsForSimulcast","addAssociatedAttributes","_generateSsrc","mungedSsrcs","mungedSsrcGroups","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","REMOTE_TRACK_MUTE","REMOTE_TRACK_UNMUTE","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","VP8","localStreamEncodingsConfig","maxBitrate","scaleResolutionDownBy","_getStreamEncodings","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","getTransceivers","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","sendEncodings","addTransceiver","calculateEncodingsActiveState","localVideoTrack","newHeight","encoding","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","transceiver","currentDirection","trackIndex","setEncodings","parameters","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","SignalingEvents","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_capScreenshareBitrate","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","time","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","names","_processStat","stat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getReceiversByEndpointIds","endpoints","receivers","getRemoteTracks","remoteTrackIds","getReceivers","audioReceivers","getSynchronizationSources","tracks","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","toUpperCase","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksOfMediaType","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","endpointTracksByType","endpointTracksOfMediaType","mediaTrack","_removeRemoteTrack","toBeRemoved","removeRemoteTracks","removedTracks","userTracksByMedia","userTracksByMediaType","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingScreen","DESKTOP","_mungeCodecOrder","codecPreference","VP9","bitrates","hdBitrate","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","addStream","_removeStream","removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","getSenders","negotiationNeeded","mediaActive","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","_initializeDtlsTransport","onstatechange","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","CAMERA","layer","sendTones","tones","interToneGap","rtpSender","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","ULPFEC","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","usernameFragment","activeStreams","currNumSsrcs","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","setNewReceiverVideoConstraints","setVideoType","sendSourceVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","sdpSemantics","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","target","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","DetectionEvents","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","createE2eRttEvent","E2ePing","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","RecordingAdapter","exportRecordedData","setMicDevice","_getAudioStream","SariskaMediaTransport","OggAdapter","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","format","shouldEnable","_stream","MediaRecorder","ondataavailable","_saveMediaData","AbstractAudioContextAdapter","_sampleRate","_replaceMic","newStream","newSource","WavAdapter","_wavBuffers","_wavLength","_data","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","buffer","view","DataView","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","setUint8","output","offset","inputBuffers","input","sampleCount","bufferCount","o","setInt16","floatTo16BitPCM","string","lng","charCodeAt","FlacAdapter","_onWorkerMessage","_encoder","_stopPromiseResolver","command","_loadWebWorker","_initWorkerPromiseResolver","bps","buf","blob","blobUrl","webkitURL","revokeObjectURL","highPrecisionTime","timing","navigationStart","SessionEventType","freeze","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","LOCAL_STORAGE_KEY","sessionManager","_loadMetadata","dataStr","dataObject","Bourne","_sessionsMetadata","_saveMetadata","createSession","sessionToken","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","beginSegment","getCurrentSegmentIndex","endSegment","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","currentEvent","COMMAND_START","COMMAND_STOP","COMMAND_PING","PROPERTY_STATS","RECORDING_FORMATS","ControllerState","IDLE","STARTING","RECORDING","STOPPING","FAILED","RecordingController","registerEvents","getParticipantsStats","_onStartCommand","_onStopCommand","_onPingCommand","_doStartRecording","_doStopRecording","_updateStats","_switchToNewSession","_registered","addCommandListener","sendCommandOnce","onStateChanged","delegate","_onStateChanged","onNotify","_onNotify","onWarning","_onWarning","startRecording","switchFormat","removeCommand","sendCommand","_getRandomToken","_format","stopRecording","_currentSessionToken","downloadRecordedData","_adapters","fileName","base64Url","style","click","removeChild","downloadBlob","_micDeviceId","String","_state","_isMuted","newFormat","getLocalStats","currentSessionToken","isRecording","recordedBytes","recordedLength","recordingStats","isSelf","localId","_changeState","messageKey","messageParams","_createRecordingAdapter","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","isEndpointsFormat","isSourcesFormat","p2pSession","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","getActiveMediaSession","_senderVideoConstraints","sendMaxFrameHeight","_selectSendMaxFrameHeight","activeMediaSession","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","pathname","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFacialExpressionAdd","oldDominantSpeaker","newDominantSpeaker","setDominantSpeaker","savedUser","markAsHasLeft","newName","setDisplayName","addFacialExpression","newStats","speakerStatsToUpdate","newParticipant","totalDominantSpeakerTime","setFacialExpressions","facialExpressions","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","instantiateTrackRecorder","updateNames","originalStream","dataEvent","recorderToRemove","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","SphinxService","recordingResult","verify","formatResponse","audioBlob","sphinxURL","toReturn","getURL","audioFileBlob","XMLHttpRequest","onreadystatechange","DONE","responseText","open","setRequestHeader","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","processVersions","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","setTrackMuteStatus","setTrackVideoType","existingName","INITIAL_STATE","localTracksDuration","startedTime","camera","desktop","FINAL_STATE","calculateLocalTrackDuration","newDuration","LocalTracksDuration","newLocalTracksDuration","createLocalTracksDurationEvent","APP","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_audioSenderLimitReached","_videoSenderLimitReached","handleSubtitles","enableLocalRecording","recordingController","enableAnalytics","iAmRecorder","robot","_room","membersCount","getParticipantsWithoutHidden","resourceCreator","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","CONFERENCE_PROPERTIES_CHANGED","_sendConferenceJoinAnalyticsEvent","MEETING_ID_SET","_removeLocalSourceOnReject","_updateRoomPresence","SESSION_ACCEPT","SOURCE_ADD","SOURCE_ADD_ERROR","SOURCE_REMOVE","_registerRtcListeners","receiveVideoController","sendVideoController","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","_sendBridgeVideoTypeMessage","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","removeCommandListener","sendTextMessage","sendPrivateTextMessage","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","_fireAudioLevelChangeEvent","activeTpc","_fireMuteChangeEvent","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldTrackBelongsToConference","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","_setNewVideoType","videoTypeTagName","trackVideoType","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","RangeError","isVideoActive","features_jigasi","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","first","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","presenceChanged","muteStatusChanged","videoTypeChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFacialExpression","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","getLocalUser","pastMessage","JSON_TYPE_TRANSCRIPTION_RESULT","JSON_TYPE_TRANSLATION_RESULT","translationLanguage","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","final","transcript","is_interim","stability","stable","unstable","finalText","fellowParticipantName","finalPaylaod","startLocalRecording","stopLocalRecording","startSIPVideoCall","stopSIPVideoCall","blacklist","syncWithURL","conferenceConfig","dontParse","paramStr","paramParts","firstParam","part","param","decoded","parseURLParams","initSDKConfig","connectionConfig","clientNode","devConnectionConfig","enableVirtualBackground","enableNoiseCancellation","openBridgeChannel","enableLayerSuspension","DISCO_JIBRI_FEATURE","JitsiConnection","isDev","jwt","parseJwt","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","atob","usernameOverride","passwordOverride","setToken","initJitsiConference","getLogs","DEVICE_LIST_CHANGED","PERMISSIONS_CHANGED","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","JitsiMediaDevicesEvents","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","timerWorkerScript","JitsiStreamPresenterEffect","videoDiv","firstVideoTrack","_canvas","_ctx","getContext","_desktopElement","_videoElement","_frameRate","autoplay","play","display","_onVideoFrameTimer","_renderVideo","_desktopStream","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","_videoFrameTimerWorker","captureStream","Module","readyPromiseResolve","moduleOverrides","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","arguments_","importScripts","readBinary","scriptDirectory","currentScript","xhr","responseType","wasmBinary","wasmMemory","out","WebAssembly","HEAPU8","HEAP32","wasmTable","Table","ABORT","updateGlobalBufferAndViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float64Array","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","func","Memory","byteLength","DYNAMICTOP_PTR","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","abort","RuntimeError","isDataURI","filename","prefix","path","wasmBinaryFile","getBinary","emscripten_realloc_buffer","grow","___wasm_call_ctors","calledRun","asmLibraryArg","dest","num","copyWithin","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","receiveInstance","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","binary","instantiate","instantiateStreaming","instantiateAsync","createWasm","run","doRun","postRun","preRun","runCaller","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_context","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","HEAPF32","_convertTo16BitPCM","f32Array","_rnnoise_destroy","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","_handleWorkerAction","_initScreenshotCapture","_streamWorker","desktopTrack","_streamHeight","_streamWidth","storedCanvasContext","getImageData","_storedImageData","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","ImageData","onloadeddata","segmentationDimensions","getAnalyticsAttributesFromOptions","video_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","_selfCloseConnection","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","createPresenterEffect","MediaStreamTrack","createRnnoiseProcessor","rnnoiseWasmInit","mod","createScreenshotCaptureEffect","createVirtualBackgroundEffect","dispatch","tflite","wasmCheck","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","ok","arrayBuffer","_loadModel","constants","recording","BUSY","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errors","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","createAnalyticsEvent","createNetworkInfoEvent","hint","contentHint","precallTest","util","AuthUtil","flat","class2type","hasOwn","fnToString","preservedScriptAttributes","nonce","noModule","rhtmlSuffix","jQuery","selector","isArrayLike","toType","isWindow","jquery","toArray","pushStack","prevObject","eq","last","even","grep","_elem","odd","extend","copy","copyIsArray","deep","isPlainObject","expando","noop","Ctor","getProto","ObjectFunctionString","isEmptyObject","globalEval","doc","script","head","parentNode","DOMEval","nodeType","nodeValue","makeArray","inArray","isXMLDoc","namespace","namespaceURI","docElem","ownerDocument","documentElement","second","invert","callbackExpect","guid","support","_i","isIE","RegExp","adown","bup","contains","compareDocumentPosition","rcssescape","fcssescape","ch","asCodePoint","sel","hasDuplicate","sortOrder","duplicates","preferredDoc","msMatchesSelector","Expr","outermostContext","documentIsHTML","dirruns","classCache","createCache","tokenCache","compilerCache","nonnativeSelectorCache","identifier","whitespace","pseudos","rwhitespace","rtrim","rcomma","rcombinators","rdescend","rpseudo","ridentifier","matchExpr","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","rinputs","rheader","rquickExpr","rsibling","runescape","funescape","escape","nonHex","fromCharCode","unloadHandler","setDocument","inDisabledFieldset","addCombinator","selectorError","seed","nid","newSelector","newContext","getElementById","getElementsByClassName","rbuggyQSA","testContext","tokenize","toSelector","querySelectorAll","qsaError","removeAttribute","tokens","compiled","relative","compile","cacheLength","markFunction","createInputPseudo","createButtonPseudo","createDisabledPseudo","isDisabled","createPositionalPseudo","argument","matchIndexes","subWindow","defaultView","top","expr","elements","matchesSelector","createPseudo","className","preFilter","excess","unquoted","attrId","nodeNameSelector","expectedNodeName","operator","check","_argument","simple","ofType","outerCache","nodeIndex","parent","useCache","firstChild","lastChild","childNodes","pseudo","setFilters","not","matcher","unmatched","lang","elemLang","activeElement","hasFocus","tabIndex","checked","selected","selectedIndex","nextSibling","button","_matchIndexes","lt","gt","nth","radio","checkbox","file","image","parseOnly","soFar","preFilters","cached","combinator","checkNonElements","doneName","oldCache","newCache","elementMatcher","matchers","condense","newUnmatched","mapped","setMatcher","postFilter","postFinder","postSelector","matcherOut","preMap","postMap","preexisting","contexts","multipleContexts","matcherIn","matcherFromTokens","checkContext","leadingRelative","implicitRelative","matchContext","matchAnyContext","setMatchers","elementMatchers","bySet","byElement","superMatcher","outermost","matchedCount","setMatched","contextBackup","dirrunsUnique","matcherFromGroupMatchers","filters","access","chainable","emptyGet","bulk","removeAttr","hooks","nType","attrHooks","attrNames","rnothtmlwhite","val","isXML","lowercaseName","rfocusable","rclickable","removeProp","propHooks","tabindex","propFix","winnow","qualifier","is","rneedsContext","rootjQuery","getClass","classesToArray","global","rsingleTag","addClass","classes","cur","curValue","clazz","finalValue","stripAndCollapse","removeClass","toggleClass","stateVal","classNames","hasClass","valueIsFunction","valHooks","option","one","optionSet","isLocalStats","_userId","_isLocalStats","_dominantSpeakerStart","_hasLeft","_facialExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","getFacialExpressions","u","onload","readbuffer","read","scriptArgs","quit","print","printErr","g","h","w","thisProgram","noExitRuntime","A","I","M","E","R","TextDecoder","S","subarray","decode","O","HEAP8","HEAP16","HEAPU16","HEAPU32","HEAPF64","INITIAL_MEMORY","C","T","P","H","ne","W","D","L","onAbort","U","preloadedImages","preloadedAudios","F","B","N","G","z","X","hrtime","dateNow","Y","J","te","K","Q","V","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Z","mappings","printChar","varargs","getStr","get64","ee","onExit","re","hardwareConcurrency","asm","monitorRunDependencies","instantiateWasm","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","___errno_location","ae","onRuntimeInitialized","preInit","getTokenAuthUrl","urlPattern","roleUpgrade","srcEvent","Function","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","currentExecutingScript","loadScript","prepend","relativeURL","loadCallback","referenceNode","scriptEl","scriptSrc","baseScriptSrc","insertBefore","char","generateUsername","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","RECVONLY","SENDONLY","SENDRECV","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_REMOVED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","SETTINGS_ERROR_RECEIVED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","ICE_RESTARTING","ICE_RESTART_SUCCESS","LOCAL_ROLE_CHANGED","INVITE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOIN_IN_PROGRESS","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","REMOTE_STATS","RENEGOTIATION_FAILED","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_ERROR","SESSION_ACCEPT_TIMEOUT","SOURCE_REMOVE_ERROR","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_RECEIVED","BREAKOUT_ROOMS_EVENT","START_MUTED_FROM_FOCUS","TRANSPORT_INFO","JSON_MESSAGE_RECEIVED","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","toStringTag","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","versionName","vendor","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","thrownErr","near","far","ReflectOwnKeys","Reflect","ReflectApply","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","_addListener","existing","warning","newListener","warned","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","prependListener","prependOnceListener","position","originalListener","spliceOne","rawListeners","eventNames","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","getMapData","getValue","isFunction","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","delta","colorDelta","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","grammar","reg","subtype","sessionConfig","raddr","maxMessageSize","dir2","writer","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","SDPUtils","localCName","generateIdentifier","splitLines","splitSections","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","writeCandidate","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","algorithm","getDtlsParameters","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","sctpPort","sctpMapLines","writeSctpDescription","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","netType","addressType","isValidSDP","charAt","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","str_hmac_sha1","str_sha1","utils","cookies","cookieName","expires","cookieObj","isObj","cookieValue","unescape","cookie","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","css","validTag","validAttribute","validCSS","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNode","isTagEqual","_xmlGenerator","_makeGenerator","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlTextNode","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","loadXML","getText","copyElement","createHtml","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","lineNumber","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","impNode","xmlGen","importNode","newElem","fragment","xhtml","Handler","ns","matchBare","matchBareFromJid","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","TimedHandler","period","lastCalled","Connection","_this2","Websocket","Bosh","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","mechanisms","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","authzid","servtype","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","xmlOutput","nextValidRid","_queueData","_this3","timeoutHandler","deleteTimedHandler","addTimedHandler","_this4","iqtype","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","statusChanged","_dataRecv","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_i5","_hand","_connect_cb","_callback","bodyWrap","mech","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","_onLegacyAuthIQResult","_auth2_cb","_this7","serverSignature","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","_this8","_i6","_thand","SASLMechanism","auth_str","test_cnonce","cnonce","Hi","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","dead","age","timeDead","_newXHR","getResponse","responseXML","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","Strophe$2","$build$2","new_service","_buildStream","_check_streamerror","connectstatus","errorString","_onOpen","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","_streamWrap","CLOSED","closeString","rawStanza","startString","strophe_js","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","byteToHex","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","ceil","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","stringToBytes","uuidToBytes","DNS","rnds","_sha","validate","Instance","of","supportStreaming","bigInt","exceptions","mutableGlobal","multiValue","saturateConversions","signExtensions","tailCall","threads","references","typeReflection","funcReferences","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","compactObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","webkitGetUserMedia","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","Event","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","getConfiguration","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","commonShim","browserShim","adapterFactory","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}