(()=>{"use strict";var e={};function t(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}e.d=(t,i)=>{for(var s in i)e.o(i,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:i[s]})},e.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);const i="WORKER_LIBFLAC_READY";var s;self.FLAC_SCRIPT_LOCATION="https://sdk.sariska.io/",importScripts("https://sdk.sariska.io/libflac4-1.3.2.min.js");const n={0:"FLAC__STREAM_ENCODER_OK",1:"FLAC__STREAM_ENCODER_UNINITIALIZED",2:"FLAC__STREAM_ENCODER_OGG_ERROR",3:"FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR",4:"FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA",5:"FLAC__STREAM_ENCODER_CLIENT_ERROR",6:"FLAC__STREAM_ENCODER_IO_ERROR",7:"FLAC__STREAM_ENCODER_FRAMING_ERROR",8:"FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR"},_=Object.freeze({UNINTIALIZED:"uninitialized",WORKING:"working",FINISHED:"finished"});class o{constructor(e){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:16,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:4096;if(t(this,"_encoderId",0),t(this,"_sampleRate",void 0),t(this,"_bitDepth",void 0),t(this,"_bufferSize",void 0),t(this,"_flacBuffers",[]),t(this,"_flacLength",0),t(this,"_state",_.UNINTIALIZED),t(this,"_data",null),t(this,"_onMetadataAvailable",(()=>{})),!s.isReady())throw new Error("libflac is not ready yet!");if(this._sampleRate=e,this._bitDepth=i,this._bufferSize=n,this._encoderId=s.init_libflac_encoder(this._sampleRate,1,this._bitDepth,5,0,!0,0),0===this._encoderId)throw new Error("Failed to create libflac encoder.");if(0!==s.init_encoder_stream(this._encoderId,this._onEncodedData.bind(this),this._onMetadataAvailable.bind(this)))throw new Error("Failed to initialise libflac encoder.");this._state=_.WORKING}encode(e){if(this._state!==_.WORKING)throw new Error("Encoder is not ready or has finished.");if(!s.isReady())throw new Error("Flac not ready");const t=e.length,i=new Int32Array(t),o=new DataView(i.buffer);let a=0;for(let i=0;i<t;i++)o.setInt32(a,32767*e[i],!0),a+=4;if(1!==s.FLAC__stream_encoder_process_interleaved(this._encoderId,i,i.length)){const e=s.FLAC__stream_encoder_get_state(this._encoderId);console.error("Error during encoding",n[e])}}finish(){if(this._state===_.WORKING){this._state=_.FINISHED;const e=s.FLAC__stream_encoder_finish(this._encoderId);console.log("Flac encoding finished: ",e),s.FLAC__stream_encoder_delete(this._encoderId),this._data=this._exportFlacBlob()}}getBlob(){return this._state===_.FINISHED?this._data:null}_exportFlacBlob(){const e=function(e,t){const i=new Uint8Array(t);let s=0;const n=e.length;for(let t=0;t<n;t++){const n=e[t];i.set(n,s),s+=n.length}return i}(this._flacBuffers,this._flacLength);return new Blob([e],{type:"audio/flac"})}_onEncodedData(e,t){this._flacBuffers.push(e),this._flacLength+=e.byteLength}}let a=null;self.onmessage=function(e){switch(e.data.command){case"MAIN_THREAD_INIT":{const t=e.data.config.bps,n=e.data.config.sampleRate;s.isReady()?(a=new o(n,t),self.postMessage({command:i})):s.onready=function(){setTimeout((()=>{a=new o(n,t),self.postMessage({command:i})}),0)};break}case"MAIN_THREAD_NEW_DATA_ARRIVED":null===a?console.error("flacEncoderWorker received data when the encoder is not ready."):a.encode(e.data.buf);break;case"MAIN_THREAD_FINISH":if(null!==a){a.finish();const e=a.getBlob();self.postMessage({command:"WORKER_BLOB_READY",buf:e}),a=null}}}})();
//# sourceMappingURL=flacEncodeWorker.min.map