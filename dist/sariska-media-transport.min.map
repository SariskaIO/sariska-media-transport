{"version":3,"sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/./src/JitsiConferenceEvents.js","webpack://SariskaMediaTransport/./src/service/xmpp/XMPPEvents.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/./node_modules/jitsi-meet-logger/lib/index.js","webpack://SariskaMediaTransport/./src/modules/browser/index.js","webpack://SariskaMediaTransport/./src/service/RTC/MediaType.js","webpack://SariskaMediaTransport/./src/dom/var/getProto.js","webpack://SariskaMediaTransport/./src/dom/var/slice.js","webpack://SariskaMediaTransport/./src/dom/var/flat.js","webpack://SariskaMediaTransport/./src/dom/var/hasOwn.js","webpack://SariskaMediaTransport/./src/dom/var/fnToString.js","webpack://SariskaMediaTransport/./src/dom/var/ObjectFunctionString.js","webpack://SariskaMediaTransport/./src/dom/core/DOMEval.js","webpack://SariskaMediaTransport/./src/dom/core.js","webpack://SariskaMediaTransport/./src/dom/var/isWindow.js","webpack://SariskaMediaTransport/./src/dom/var/support.js","webpack://SariskaMediaTransport/./src/modules/statistics/statistics.js","webpack://SariskaMediaTransport/./src/service/RTC/RTCEvents.js","webpack://SariskaMediaTransport/./src/service/statistics/AnalyticsEvents.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./src/service/RTC/MediaDirection.js","webpack://SariskaMediaTransport/./src/modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./src/modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./src/modules/RTC/RTC.js","webpack://SariskaMediaTransport/./src/service/RTC/VideoType.js","webpack://SariskaMediaTransport/./src/JitsiTrackErrors.js","webpack://SariskaMediaTransport/./src/JitsiTrackEvents.js","webpack://SariskaMediaTransport/./src/JitsiConferenceErrors.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDP.js","webpack://SariskaMediaTransport/./src/service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./src/JitsiTrackError.js","webpack://SariskaMediaTransport/./src/modules/util/Listenable.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./src/modules/detection/DetectionEvents.js","webpack://SariskaMediaTransport/./src/modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/VideoSIPGWConstants.js","webpack://SariskaMediaTransport/./src/JitsiConnectionEvents.js","webpack://SariskaMediaTransport/./src/service/statistics/Events.js","webpack://SariskaMediaTransport/./src/dom/var/document.js","webpack://SariskaMediaTransport/./src/dom/var/arr.js","webpack://SariskaMediaTransport/./src/modules/settings/Settings.js","webpack://SariskaMediaTransport/./src/modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./src/modules/util/MathUtil.js","webpack://SariskaMediaTransport/./src/service/connectivity/ConnectionQualityEvents.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSessionState.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/constants.js","webpack://SariskaMediaTransport/./src/dom/core/nodeName.js","webpack://SariskaMediaTransport/./src/dom/var/documentElement.js","webpack://SariskaMediaTransport/./src/dom/var/pop.js","webpack://SariskaMediaTransport/./src/dom/selector/var/whitespace.js","webpack://SariskaMediaTransport/./src/dom/var/isIE.js","webpack://SariskaMediaTransport/./src/dom/selector/rbuggyQSA.js","webpack://SariskaMediaTransport/./src/dom/selector/contains.js","webpack://SariskaMediaTransport/./src/dom/selector/escapeSelector.js","webpack://SariskaMediaTransport/./src/dom/var/sort.js","webpack://SariskaMediaTransport/./src/dom/selector/uniqueSort.js","webpack://SariskaMediaTransport/./src/dom/selector.js","webpack://SariskaMediaTransport/./src/dom/core/access.js","webpack://SariskaMediaTransport/./src/dom/var/rnothtmlwhite.js","webpack://SariskaMediaTransport/./src/dom/attributes/attr.js","webpack://SariskaMediaTransport/./src/dom/attributes/prop.js","webpack://SariskaMediaTransport/./src/dom/core/stripAndCollapse.js","webpack://SariskaMediaTransport/./src/dom/core/var/rsingleTag.js","webpack://SariskaMediaTransport/./src/dom/traversing/var/rneedsContext.js","webpack://SariskaMediaTransport/./src/dom/traversing/findFilter.js","webpack://SariskaMediaTransport/./src/dom/core/init.js","webpack://SariskaMediaTransport/./src/dom/attributes/classes.js","webpack://SariskaMediaTransport/./src/dom/attributes/val.js","webpack://SariskaMediaTransport/./src/dom/attributes.js","webpack://SariskaMediaTransport/./src/dom/core/parseXML.js","webpack://SariskaMediaTransport/./src/dom/manipulation.js","webpack://SariskaMediaTransport/./src/dom/jquery.js","webpack://SariskaMediaTransport/./src/modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./src/dom/var/push.js","webpack://SariskaMediaTransport/./src/modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./src/JitsiConnectionErrors.js","webpack://SariskaMediaTransport/./src/modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/./src/service/RTC/SignalingEvents.js","webpack://SariskaMediaTransport/(webpack)/buildin/global.js","webpack://SariskaMediaTransport/./src/modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./src/dom/var/class2type.js","webpack://SariskaMediaTransport/./src/dom/var/indexOf.js","webpack://SariskaMediaTransport/./src/modules/statistics/constants.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./node_modules/process/browser.js","webpack://SariskaMediaTransport/./src/modules/util/Deferred.js","webpack://SariskaMediaTransport/./src/service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./src/JitsiMediaDevicesEvents.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./src/modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./src/modules/connectivity/ParticipantConnectionStatus.js","webpack://SariskaMediaTransport/./src/config/index.js","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./src/modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./src/service/RTC/BridgeVideoType.js","webpack://SariskaMediaTransport/./src/modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./src/modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./src/SariskaMediaTransport.js","webpack://SariskaMediaTransport/./src/modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./src/modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/presenter/JitsiStreamPresenterEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/presenter/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./src/dom/var/toString.js","webpack://SariskaMediaTransport/./src/dom/core/toType.js","webpack://SariskaMediaTransport/./src/modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./src/JitsiTranscriptionStatus.js","webpack://SariskaMediaTransport/./src/modules/xmpp/MediaSessionEvents.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./src/service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./src/modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./src/modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./src/service/e2eping/E2ePingEvents.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./src/modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./src/modules/local-recording/session/index.js","webpack://SariskaMediaTransport/./src/JitsiMediaDevices.js","webpack://SariskaMediaTransport/./src/service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./src/modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./src/modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./src/modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./src/modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/rng.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/v4.js","webpack://SariskaMediaTransport/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://SariskaMediaTransport/(webpack)/buildin/module.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./src/modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./src/modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./src/JitsiConference.js","webpack://SariskaMediaTransport/./src/JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./src/modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./src/modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./src/modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./src/modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./src/modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./src/JitsiParticipant.js","webpack://SariskaMediaTransport/./src/authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./src/modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./src/modules/util/Retry.js","webpack://SariskaMediaTransport/./src/modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./src/modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./src/modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./src/modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./src/modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./src/modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./node_modules/async/lib/async.js","webpack://SariskaMediaTransport/./src/modules/util/StringUtils.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./src/modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./src/service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./src/modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./src/modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./src/modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./src/modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./src/modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./src/modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./src/modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./src/modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./src/modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./src/modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./src/modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./src/modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./src/modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./src/modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./src/modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./src/modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./src/modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./src/modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./src/modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./src/modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./src/modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./src/modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./src/modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./src/modules/util/createAnalyticsEvent.js","webpack://SariskaMediaTransport/./src/modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./node_modules/rnnoise-wasm/dist/index.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/tflite.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/tflite-simd.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://SariskaMediaTransport/./src/modules/util/parseURLParams.js","webpack://SariskaMediaTransport/./src/JitsiConnection.js","webpack://SariskaMediaTransport/./src/index.js","webpack://SariskaMediaTransport/./src/dom/exports/global.js","webpack://SariskaMediaTransport/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://SariskaMediaTransport/(webpack)/buildin/amd-options.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./src/service/statistics/constants.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-stream-management/lib/strophe.stream-management.js","webpack://SariskaMediaTransport/./node_modules/timers-browserify/main.js","webpack://SariskaMediaTransport/./node_modules/setimmediate/setImmediate.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./src/modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./src/modules/transcription/word.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","SUBTITLES_RECEIVED","TRACK_UPDATED","ANALYTICS_EVENT_RECEIVED","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_FAILED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","LOCAL_ROLE_CHANGED","MEETING_ID_SET","INVITE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_RECEIVED","START_MUTED_FROM_FOCUS","TRANSPORT_INFO","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","BrowserCapabilities","AUDIO","PRESENTER","VIDEO","flat","array","apply","class2type","hasOwn","fnToString","preservedScriptAttributes","src","noModule","DOMEval","script","head","removeChild","rhtmlSuffix","jQuery","selector","context","fn","isArrayLike","toType","isWindow","jquery","toArray","slice","pushStack","elems","ret","merge","prevObject","each","first","eq","last","even","grep","_elem","odd","end","extend","copy","copyIsArray","clone","target","deep","isPlainObject","expando","isReady","noop","Ctor","getProto","ObjectFunctionString","isEmptyObject","globalEval","makeArray","results","inArray","isXMLDoc","namespace","namespaceURI","docElem","ownerDocument","second","invert","callbackExpect","guid","support","require","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","configParams","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","CALLSTATS_SCRIPT_URL","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","longTasksStatsInterval","analytics","analyticsEventEmitter","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","supportsPerformanceObserver","performanceObserverStats","PerformanceObserverStats","JitsiConferenceEvents","startObserver","stopObserver","getLongTasksStats","removeLongTasksStatsListener","setSpeakerList","speakerList","values","isP2P","dispose","size","emit","callStats","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","addAnalyticsEventListener","removeAnalyticsEventListener","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferCodec","codecName","matchingPayloadTypes","rtp","codec","payload","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","H264","fmtp","item","config","includes","rtxApts","rtxPts","keepPts","MediaDirection","INACTIVE","rtcpFb","RECVONLY","SENDONLY","SENDRECV","usesAdapter","DEFAULT_CONSTRAINTS","video","height","ideal","max","width","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","stereo","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","audio","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","RTCUtils","Listenable","super","origAttachMediaStream","audioQuality","clearInterval","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","getStreamID","getTrackID","srcObject","res","rtcUtils","isDeviceChangeAvailable","getAudioOutputDevice","catch","ex","GlobalOnErrorHandler","callUnhandledRejectionHandler","promise","pcConstraints","isChromiumBased","optional","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","enumerateDevices","ds","supportsDeviceChangeEvent","navigator","mediaDevices","addEventListener","setInterval","then","devices","_getUserMedia","umDevices","Promise","resolve","reject","gumTimeout","timeoutExpired","JitsiTrackErrors","getUserMedia","jitsiError","_getDesktopMedia","isSupported","obtainStream","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","sourceType","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","Resolutions","resolution","isWebKitBased","cameraDeviceId","facingMode","CameraFacingMode","USER","autoGainControl","micDeviceId","echoCancellation","noiseSuppression","assign","channelCount","getConstraints","desktopStream","sourceId","desktopAudioTracks","desktopAudioStream","MediaStream","track","desktopVideoTracks","desktopVideoStream","videoType","VideoType","DESKTOP","avStream","audioTracks","audioStream","effects","videoTracks","videoStream","CAMERA","stopMediaStream","deviceType","isIosBrowser","mediaStream","getTracks","release","isDesktopSharingEnabled","setAudioOutputDevice","setDesktopSharingFrameRate","maxFps","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","some","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","callErrorHandler","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","getSettings","safeCounterIncrement","JitsiLocalTrack","rtcId","RTC","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","NONE","addListener","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","wsUrl","BridgeChannel","logError","msgType","_receiverVideoConstraints","sendNewReceiverVideoConstraintsMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","sendSetLastNMessage","sendVideoTypeMessage","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","onCallEnded","setNewReceiverVideoConstraints","isOpen","setReceiverVideoConstraint","maxFrameHeight","setVideoType","selectEndpoints","ids","eventType","createPeerConnection","signaling","iceConfig","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","usesUnifiedPlan","sdpSemantics","forceTurnRelay","iceTransportPolicy","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLocalVideoTrack","localVideo","getLocalTracks","MediaType","getLocalAudioTrack","localAudio","getLocalEndpointId","myUserId","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","setVideoMute","videoTrack","removeLocalTrack","pos","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","sendEndpointStatsMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","ReflectOwnKeys","R","Reflect","ReflectApply","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","number","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","streamCount","payloadType","__","parameter","hdrExt","OPUS","VP8","VP9","TRACK_ERROR_TO_MESSAGE_MAP","constraint","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","removeEventListener","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","FAILURE_REGEX","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","FEATURE_JIGASI","FEATURE_E2EE","XMPP","token","roomName","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","xmppPing","hosts","enableWebsocketResume","serviceUrl","shard","websocketKeepAlive","websocketKeepAliveUrl","XmppConnection","createConnection","bosh","deploymentInfo","Events","CONN_SHARD_CHANGED","shard_changed","suspend_time","ping","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","caps","Caps","initFeaturesList","addFeature","disableRtx","isVersionLessThan","enableOpusRed","supportsAudioRed","enableRemb","enableTcc","enableLipSync","rayo","E2EEncryption","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","_sysMessageHandler","_stropheConn","sendDiscoInfo","getStunAndTurnCredentials","_resetState","getFeaturesAndIdentities","identities","PING","_processDiscoInfoIdentities","errmsg","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","lastFailedRawMessage","getLastFailedMessage","_parseConnectionFailedMessage","identity","avModerationComponentAddress","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","processLobbyFeatures","f","fr","endsWith","_onPrivateMessage","exec","_onSystemMessage","foundIceServers","onReceiveStunAndTurnCredentials","parseDiscoInfo","attaching","anonymousdomain","configDomain","hostname","createRoom","onCreateResource","roomjid","customDomain","muc","mucNickname","randomHexString","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","pingDomain","getSessions","sessions","ev","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2p","p2pStunServers","stunServers","MucConnectionPlugin","JingleConnectionPlugin","RayoConnectionPlugin","headersArr","trim","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","WRONG_STATE","DISPLAY_NAME_REQUIRED","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","_callStatsUserName","_machineId","_p8","_storage","jitsiLocalStorage","externalStorage","username","UsernameGenerator","generateUsername","generateCallStatsUserName","amDid","jitsiMeetId","generateJitsiMeetId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","RunningAverage","average","addNext","getAverage","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","argsTag","mapTag","objectTag","setTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","IE_PROTO","nativeObjectToString","reIsNative","RegExp","Buffer","Uint8Array","propertyIsEnumerable","symToStringTag","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","isObject","isMasked","isFunction","baseKeys","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","LARGE_ARRAY_SIZE","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","rbuggyQSA","isIE","whitespace","contains","adown","bup","compareDocumentPosition","rcssescape","fcssescape","ch","asCodePoint","escapeSelector","sel","hasDuplicate","sortOrder","compare","uniqueSort","duplicates","preferredDoc","msMatchesSelector","Expr","outermostContext","documentIsHTML","dirruns","done","classCache","createCache","tokenCache","compilerCache","nonnativeSelectorCache","identifier","pseudos","rwhitespace","rtrim","rcomma","rcombinators","rdescend","rpseudo","ridentifier","matchExpr","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","rinputs","rheader","rquickExpr","rsibling","runescape","funescape","nonHex","high","unloadHandler","setDocument","inDisabledFieldset","addCombinator","disabled","dir","selectorError","seed","nid","newSelector","newContext","getElementById","getElementsByClassName","testContext","tokenize","toSelector","querySelectorAll","qsaError","tokens","compiled","relative","compile","select","cache","cacheLength","markFunction","createInputPseudo","createButtonPseudo","createDisabledPseudo","isDisabled","createPositionalPseudo","argument","matchIndexes","subWindow","defaultView","top","expr","elements","matchesSelector","createPseudo","className","preFilter","excess","unquoted","attrId","nodeNameSelector","expectedNodeName","pattern","operator","check","what","_argument","simple","forward","ofType","_context","xml","outerCache","nodeIndex","parent","useCache","diff","lastChild","pseudo","setFilters","not","input","matcher","unmatched","lang","elemLang","focus","activeElement","hasFocus","href","tabIndex","enabled","checked","selected","selectedIndex","empty","nextSibling","button","_matchIndexes","lt","gt","nth","radio","checkbox","file","image","submit","parseOnly","soFar","preFilters","cached","combinator","base","skip","checkNonElements","doneName","oldCache","newCache","elementMatcher","matchers","condense","newUnmatched","mapped","setMatcher","postFilter","postFinder","postSelector","temp","matcherOut","preMap","postMap","preexisting","contexts","multipleContexts","matcherIn","matcherFromTokens","checkContext","leadingRelative","implicitRelative","matchContext","matchAnyContext","setMatchers","elementMatchers","bySet","byElement","superMatcher","outermost","matchedCount","setMatched","contextBackup","dirrunsUnique","matcherFromGroupMatchers","filters","access","chainable","emptyGet","bulk","_key","removeAttr","hooks","nType","prop","attrHooks","attrNames","rnothtmlwhite","val","isXML","lowercaseName","rfocusable","rclickable","removeProp","propFix","propHooks","tabindex","stripAndCollapse","winnow","qualifier","is","rneedsContext","rootjQuery","getClass","classesToArray","parseHTML","rsingleTag","ready","addClass","classes","cur","curValue","clazz","finalValue","removeClass","toggleClass","stateVal","classNames","hasClass","valueIsFunction","valHooks","option","one","optionSet","parseXML","SS_DEFAULT_FRAME_RATE","ScreenObtainer","_createObtainStreamMethod","isNWJS","JitsiMeetNW","obtainDesktopStream","isElectron","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","getName","_getAudioConstraints","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamType","screenShareAudio","audioConstraints","optionalConstraints","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","errorCallback","getDisplayMedia","frameRate","cursor","errorDetails","errorName","errorMsg","errorStack","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","applicationVersion","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","isChrome","isOpera","isIExplorer","isSafari","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionEqualTo","DummyLocalStorage","configurable","writable","keyName","keyValue","JitsiLocalStorage","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","getConnectionPluginDefinition","ConnectionPluginListenable","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","CONN_STATUS_CHANGED","_options","pingOptions","_usesWebsocket","_rawInputTracker","LastSuccessTracker","startTracking","_resumeTask","ResumeTask","_deferredIQs","PingConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_status","OPEN","disco","_maybeStartWSKeepAlive","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","cancel","startInterval","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","streamManagement","getResumeToken","intervalWithJitter","url","fetch","responseShard","timeLeft","sendIQ2","sendBeacon","schedule","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","g","randomElement","randomHexDigit","randomAlphanumStr","SPEAKERS_AUDIO_LEVELS","funcTag","genTag","reFlags","cloneableTags","addMapEntry","pair","addSetEntry","arrayReduce","accumulator","initAccum","isHostObject","overArg","getPrototype","objectCreate","isArrayLikeObject","assignValue","baseClone","isDeep","isFull","initCloneArray","copyArray","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","copySymbols","baseAssign","cloneFunc","cloneArrayBuffer","dataView","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","props","arrayEach","subValue","arrayBuffer","newValue","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","nextTick","title","env","argv","versions","cwd","chdir","umask","Deferred","clearRejectTimeout","_timeout","setRejectTimeout","ms","ENVIRONMENT","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","1","2","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","maxMessageSize","sctpPort","sctpMapLines","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","MAIN_THREAD_FINISH","MAIN_THREAD_INIT","MAIN_THREAD_NEW_DATA_ARRIVED","WORKER_LIBFLAC_READY","WORKER_BLOB_READY","RecordingAdapter","exportRecordedData","setMuted","setMicDevice","_getAudioStream","SariskaMediaTransport","createLocalTracks","currentExecutingScript","relativeURL","loadCallback","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ParticipantConnectionStatus","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","initSDKConfig","connectionConfig","clientNode","conferenceConfig","enableLocalRecording","enableVirtualBackground","enableNoiseCancellation","enableTalkWhileMuted","enableNoAudioDetection","enableNoisyMicDetection","createVADProcessor","openBridgeChannel","hiddenDomain","enableLayerSuspension","e2eping","pingInterval","internals","firstOptions","reviver","protoAction","scan","nodes","SyntaxError","__proto__","safeParse","ignoreError","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","DESKTOP_HIGH_FPS","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","getFeatures","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","keyInfo","base64js","fromByteArray","keyIndex","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","toByteArray","lastKey","isEqual","oldValue","isE2EEEnabled","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiConnection","ProxyConnectionService","createPresenterEffect","createRnnoiseProcessor","createScreenshotCaptureEffect","createVirtualBackgroundEffect","constants","recording","recordingConstants","sipVideoGW","VideoSIPGWConstants","transcriptionStatus","JitsiTranscriptionStatus","detection","DetectionEvents","JitsiMediaDevicesEvents","connectionQuality","ConnectionQualityEvents","E2ePingEvents","JitsiConferenceErrors","errorTypes","logLevels","JitsiMediaDevices","Settings","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","logObject","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","emitEvent","mStream","getOriginalStream","currentlyAvailableMediaDevices","_setRealDeviceIdFromDeviceList","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","sampleRate","vadProcessor","TrackVADEmitter","createAudioMixer","AudioMixer","getActiveAudioDevice","isMultipleAudioInputSupported","isCollectingLocalStats","LocalStatsCollector","isLocalStatsSupported","lineno","colno","setNetworkInfo","createAnalyticsEvent","hint","contentHint","precallTest","util","AuthUtil","_conferenceJoined","_enabled","_enabling","_e2eeCtx","E2EEContext","_olmAdapter","_ratchetKey","debounce","_ratchetKeyImpl","_rotateKey","_rotateKeyImpl","_onParticipantJoined","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","_onOlmIdKeyReady","_onParticipantE2EEChannelReady","_onParticipantKeyUpdated","testing","disableE2EE","supportsInsertableStreams","enableEncodedTransformSupport","supportsEncodedTransform","isEnabled","initSessions","cleanup","setLocalParticipantProperty","_restartMediaSessions","_generateKey","updateKey","setKey","crypto","getRandomValues","_getMediaSessions","_setupSenderE2EEForTrack","material","importKey","newKey","ratchet","findReceiverForTrack","handleReceiver","sender","findSenderForTrack","handleSender","doesVideoMuteByStreamRemove","isVideoTrack","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","videoQuality","supportsUnifiedPlan","enableUnifiedOnChrome","disableSimulcast","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","startSilent","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","supportsRestartByTerminate","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","owner","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","addTracks","localTrack","addTrack","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","RTCSessionDescription","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","remove","newFingerprint","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","videoActive","setMediaTransferActive","setSenderVideoDegradationPreference","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","removeRemoteTracks","newLocalSDP","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","offerIq","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","SIM_LAYER_RIDS","TPCUtils","videoBitrates","localStreamEncodingsConfig","active","low","scaleResolutionDownBy","standard","_findTransceiver","transceiver","getTransceivers","getTrackId","_getStreamEncodings","isSimulcastOn","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","getTrack","transceiverInit","sendEncodings","addTransceiver","getLocalStreamHeightConstraints","localVideoHeightConstraints","encoding","localSSRCs","_addedStreams","setEncodings","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","every","timerWorkerScript","URL","createObjectURL","Blob","JitsiStreamPresenterEffect","videoDiv","firstVideoTrack","_canvas","_ctx","getContext","_desktopElement","_videoElement","_frameRate","autoplay","play","display","_onVideoFrameTimer","_renderVideo","_desktopStream","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","jitsiLocalTrack","startEffect","_videoFrameTimerWorker","Worker","postMessage","timeMs","captureStream","stopEffect","MediaStreamTrack","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","pcmSample","HEAPF32","_convertTo16BitPCM","f32Array","_rnnoise_destroy","getSampleLength","getRequiredPCMFrequency","_destroyed","calculateAudioFrameVAD","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","rnnoiseWasmInit","mod","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","_handleWorkerAction","_initScreenshotCapture","_streamWorker","desktopTrack","_streamHeight","_streamWidth","storedCanvasContext","getImageData","_storedImageData","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","ImageData","onloadeddata","models","segmentationDimensions","model96","model144","dispatch","tflite","wasmCheck","feature","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","ok","HEAPU8","_loadModel","downloadBlob","base64Url","download","click","AudioContext","webkitAudioContext","interval","intervalId","intervalMilis","suspend","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","animateLevel","ON","OFF","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","getVideoType","isWebRTCTrackMuted","isLocalAudioTrack","getStreamId","getTrackLabel","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","supportsReceiverStats","getMSID","trackId","procNodeSampleRate","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","_vadSampleSize","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","vadScore","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","AudioContextImpl","E2E_RTT_CHANGED","AbstractAudioContextAdapter","_sampleRate","_stream","_replaceMic","newStream","newSource","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","_eventEmitter","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","IDENTITY_UPDATED","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","textEncoder","TextEncoder","subtle","deriveBits","encode","keyBytes","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","category","rooms","externalFeatures","_addChatRoom","_removeChatRoom","CAPS","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","removeFromPresence","children","addOrReplaceInPresence","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","_identities","_features","VADAudioAnalyser","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","origin","errorIq","msCrypto","rnds8","rng","byteToHex","buf","bth","rnds","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","mimeType","ondataavailable","dataEvent","removeTrack","recorderToRemove","revokeObjectURL","getRecordingResults","getFileType","RECORDING_FORMATS","ControllerState","freeze","IDLE","STARTING","RECORDING","STOPPING","FAILED","RecordingController","registerEvents","getParticipantsStats","_onStartCommand","_onStopCommand","_onPingCommand","_doStartRecording","_doStopRecording","_updateStats","_switchToNewSession","_registered","_conference","addCommandListener","isModerator","sendCommandOnce","delegate","_onStateChanged","_onNotify","_onWarning","startRecording","switchFormat","removeCommand","sendCommand","sessionToken","_getRandomToken","_format","stopRecording","_currentSessionToken","downloadRecordedData","_adapters","filename","_micDeviceId","_state","_isMuted","newFormat","getLocalStats","currentSessionToken","recordedBytes","recordedLength","members","member","recordingStats","Bourne","getProperty","isSelf","localId","_changeState","sessionManager","beginSegment","endSegment","messageKey","messageParams","_createRecordingAdapter","createSession","OggAdapter","FlacAdapter","WavAdapter","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","shouldEnable","_saveMediaData","_wavBuffers","_wavLength","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","view","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","setUint8","inputBuffers","sampleCount","bufferCount","setInt16","floatTo16BitPCM","lng","_onWorkerMessage","_encoder","_stopPromiseResolver","command","_loadWebWorker","_initWorkerPromiseResolver","bps","blobUrl","webkitURL","highPrecisionTime","timing","navigationStart","SessionEventType","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","_loadMetadata","dataStr","dataObject","_sessionsMetadata","_saveMetadata","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","getCurrentSegmentIndex","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","duration","currentEvent","APP","JitsiConference","eventManager","JitsiConferenceEventManager","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","isVideoMutedByFocus","mutedVideoByFocusActor","wasStopped","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","handleSubtitles","recordingController","enableAnalytics","iAmRecorder","robot","_room","getStats","localTracksDuration","LocalTracksDuration","resourceCreator","setupXMPPListeners","codecSettings","disabledCodec","enforcePreferredCodec","jvbCodec","p2pCodec","codecSelection","CodecSelection","_statsCurrentId","statisticsId","callStatsUserName","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","E2ePing","setupRTCListeners","receiveVideoController","ReceiveVideoController","sendVideoController","SendVideoController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","setupChatRoomListeners","setupStatisticsListeners","supportsVADDetection","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","vadNoiseDetection","VADNoiseDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","getPreferredCodec","transcriptionLanguage","replaceParticipant","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","_sendBridgeVideoTypeMessage","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getPerformanceStats","longTasksStats","eventId","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","sendPrivateTextMessage","sendPrivateMessage","setSubject","subject","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","_getInitialLocalTracks","isStartAudioMuted","isStartVideoMuted","_setConference","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","videoTypeTagName","getFromPresence","_addLocalTrackAsUnmute","addAsUnmutePromises","_removeLocalTrackAsMute","removeAsMutePromises","getRole","isHidden","lock","lockRoom","unlock","selectParticipant","selectParticipants","lastN","isInteger","isVideoActive","getParticipantsWithoutHidden","_hidden","getParticipantCount","countHidden","grantOwner","setAffiliation","revokeOwner","isMyself","isMembersOnly","kickParticipant","kick","_sessionInitiateTimeout","muteMediaType","onMemberJoined","nick","statsID","botType","fullJid","isReplaceParticipant","JitsiParticipant","setRole","setBotType","setFeatures","setIsReplacing","_updateFeatures","_maybeStartOrStopP2P","_onMucJoined","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","getBotType","mediaSessions","removePromises","removedTracks","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","setIsReplaced","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","peerConnection","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","getConnectionTimes","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","overallFeedback","detailedFeedback","getSsrcByTrack","getLocalSSRC","getSSRC","remoteUserId","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onConferenceRestarted","restartInProgress","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","hasFeature","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","setReceiverConstraints","videoConstraints","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","meetingId","perf","toggleE2EE","setEnabled","isLobbySupported","getLobby","membersOnlyEnabled","enableLobby","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","isAVModerationSupported","getAVModeration","enableAVModeration","disableAVModeration","avModerationApprove","approve","getLocalUser","pastMessage","translationLanguage","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","transcript","is_interim","stability","finalText","final","stable","unstable","finalPaylaod","startLocalRecording","stopLocalRecording","startSIPVideoCall","stopSIPVideoCall","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","setParticipantPropertyListener","recorderSession","AuthenticationEvents","txt","myJid","ts","updated","dominant","previous","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","_onByteSentStatsReceived","maxTouchPoints","platform","isEngine","RTCRtpTransceiver","isTwa","matchMedia","_getChromiumBasedVersion","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","ondevicechange","supportsLocalCandidateRttStatistics","PerformanceObserver","supportedEntryTypes","supportsRTTStatistics","RTCRtpScriptTransform","RTCRtpSender","createEncodedStreams","ReadableStream","chromium","ua","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","92","93","versionName","94","vendor","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","statsInterval","longTasks","maxDuration","performanceStatsInterval","avgRatePerMinute","maxDurationMs","longTaskEventHandler","getEntries","task","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","localCandidateType","candidateType","remoteCandidateType","networkType","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","framesPerSecond","bytesSent","codecId","codecShortType","remoteSource","localVideoTracks","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","isReplacing","isReplaced","_jid","_id","_role","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","getConference","jitsiTrack","isAudioMuted","_isMediaTypeMuted","newRole","newIsReplacing","newIsReplaced","newFeatures","_botType","newBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","kJitsiE2EE","E2EEcontext","baseUrl","ljm","workerBlob","_worker","operation","receiverStreams","readableStream","readable","writableStream","senderStreams","stropheConnection","_resumeRetryN","_retryDelay","_cancelResume","_networkOnlineListener","_scheduleResume","_resumeTimeout","getJitterDelay","retryDelay","_resumeConnection","resumeToken","oldToken","retry","minDelay","LastRequestTracker","_lastSuccess","_lastFailedMessage","xmppConnection","originalRawInput","rawMessage","ConnectionPlugin","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","_addPingExecutionTimestamp","_lastServerCheck","pingIntervals","maxInterval","previousTS","currentInterval","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","onMuteVideo","ChatRoom","doLeave","createNonAnonymousRoom","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","lobby","Lobby","avModeration","AVModeration","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","xns","presenceUpdateTime","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","disableDiscoInfo","getForm","form","formSubmit","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","att","phone","pin","processNode","var","focusFeatures","tagHandlers","onParticipantLeft","skipEvents","onMucMemberLeft","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","subjectText","stamp","dateParts","passwordSelect","lobbyRoomNode","lobbyRoomJid","grantIQ","kickIQ","onError","onNotSupported","formsubmit","setMembersOnly","formToSubmit","addToPresence","matchingNodes","handlerIdx","getMemberRole","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","addVideoInfoToPresence","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","isSipGatewayEnabled","iqToFocus","clean","onMucLeft","doReject","_xmpp","_mainRoom","_momderationEnabledByType","_whitelistAudio","_whitelistVideo","jidToWhitelist","newWhitelists","whitelists","fireEventApprovedJids","oldList","approved","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","audioPacketDelay","startBitrate","minBitrate","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","expandSourcesFromJson","jsonMessageXml","videoRtpDescription","getOrCreateRtpDescription","audioRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","createSourceExtension","createSsrcGroupExtension","sourceCompactJson","ssrcGroupCompactJson","getSemantics","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","startMuted","successTime","me","v2Res","v2Err","v1Res","v1Err","iceservers","dict","credential","useTurnUdp","updateLog","_queue","_processQueueTasks","_stopped","kill","previous_async","only_once","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","idle","priorityQueue","_compareTasks","sequence","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","getState","addSources","removeSources","SignalingLayer","ssrcOwners","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getPeerMediaInfo","getSSRCOwner","StropheLogger","logIncoming","logOutgoing","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","_getCodecMimeType","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","_onMediaSessionStared","mediaSession","currentCodec","selectedCodec","remoteParticipants","remote","peerMediaInfo","peerCodec","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","colibriClass","msgPayload","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","previousSpeakers","endpoint","jsonObject","_setEffectInProgress","effect","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_originalStream","_stopStreamEffect","_switchStreamEffect","setEffect","cont","_queueSetMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","successCallback","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","_capScreenshareBitrate","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","senderVideoMaxHeight","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","stat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_getReceiversByEndpointIds","endpoints","receivers","remoteTrackIds","getReceivers","_setVideoType","setMute","getSynchronizationSources","endpointTrackMap","mediaTrack","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","onaddtrack","onremovetrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","_extractSSRCMap","groupsMap","groupSSRCs","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","_adjustRemoteMediaDirection","_isSharingLowFpsScreen","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","promiseChain","_assertTrackBelongs","webRtcStream","addStream","_removeStream","removeStream","doesBelong","defaultCodec","lowFps","isMediaStreamInPc","findSenderByKind","getSenders","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","toUnifiedPlan","localVideoTrack","videoSender","preference","degradationPreference","presenterEnabled","scaleFactor","layer","currentDescription","mungeRemoteDescription","newHeight","encodingsEnabledState","ldStreamIndex","highResolutionEncoding","interToneGap","rtpSender","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","_processLocalSSRCsMap","handleFailure","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","localEndpointId","_addMutedLocalVideoTracksToSDP","localVideos","isCamera","isInPeerConnection","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","msidLine","generatedMsid","sessionDesc","audioMLine","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","kSimulcastFormats","layers","targetRN","getTarget","millisSinceStart","videoQualitySettings","simulcastFormat","targetHeight","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","reloadClient","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","_rtc","startLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","p2pSession","layerSuspensionEnabled","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","INITIAL_STATE","startedTime","camera","FINAL_STATE","calculateLocalTrackDuration","newDuration","newLocalTracksDuration","createLocalTracksDurationEvent","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","jitsiConnection","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","getTokenAuthUrl","urlPattern","roleUpgrade","createNetworkInfoEvent","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","Module","readyPromiseResolve","moduleOverrides","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","arguments_","importScripts","readBinary","scriptDirectory","currentScript","responseType","wasmBinary","wasmMemory","WebAssembly","HEAP32","wasmTable","Table","ABORT","updateGlobalBufferAndViews","Int8Array","Int16Array","Int32Array","Uint16Array","Float64Array","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","Memory","DYNAMICTOP_PTR","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","RuntimeError","isDataURI","wasmBinaryFile","getBinary","emscripten_realloc_buffer","grow","___wasm_call_ctors","calledRun","asmLibraryArg","copyWithin","requestedSize","oldSize","multiple","cutDown","overGrownHeapSize","receiveInstance","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","binary","instantiate","instantiateStreaming","instantiateAsync","createWasm","doRun","postRun","preRun","runCaller","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","delta","colorDelta","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","readbuffer","read","scriptArgs","quit","print","printErr","thisProgram","noExitRuntime","A","E","I","M","TextDecoder","O","subarray","decode","C","HEAP8","HEAP16","HEAPU16","HEAPU32","HEAPF64","INITIAL_MEMORY","S","T","P","H","ne","W","L","onAbort","preloadedImages","preloadedAudios","D","B","N","G","X","hrtime","dateNow","Y","J","te","K","Q","V","strings","LOGNAME","PATH","PWD","HOME","LANG","languages","Z","mappings","printChar","varargs","getStr","get64","ee","onExit","re","hardwareConcurrency","asm","monitorRunDependencies","instantiateWasm","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","___errno_location","ae","onRuntimeInitialized","preInit","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","blacklist","syncWithURL","dontParse","paramStr","paramParts","firstParam","decoded","parseURLParams","jwt","parseJwt","errType","ANALYTICS_CONNECTION_DISCONNECTED","usernameOverride","passwordOverride","setToken","initJitsiConference","getLogs","metadata","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","thrownErr","near","far","strophe_js","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","Timeout","clearFn","_clearFn","scope","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","enableConferenceFlag","order","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","validate","Instance","of","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","compactObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","webkitGetUserMedia","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","Event","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","getConfiguration","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","adapter","commonShim","browserShim","adapterFactory"],"mappings":"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KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,EAAE,OAAO,IAAI,KAAK,IAAI,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,EAAE,OAAO,GAAG,KAAK,EAAE,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","file":"sariska-media-transport.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 181);\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * Indicates that a message from the local user or from the Prosody backend\n * was received on the data channel.\n */\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n\n/**\n * The local participant was approved to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\n\n/**\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n * or undefined if that participant has left the meeting.\n *\n * @param {options} event - {\n *     {boolean} enabled,\n *     {MediaType} mediaType,\n *     {JitsiParticipant} actor\n * }.\n */\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\n\n/**\n * AV Moderation, report for user being approved to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\n\n\n\nexport const SUBTITLES_RECEIVED = 'conference.subtitles.received';\n\n\nexport const TRACK_UPDATED = 'conference.track.updated';\n\n\nexport const ANALYTICS_EVENT_RECEIVED = 'analytics.event.received';\n\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","export default Object.getPrototypeOf;\n","import arr from \"./arr.js\";\n\nexport default arr.slice;\n","import arr from \"./arr.js\";\n\n// Support: IE 11+\n// IE doesn't have Array#flat; provide a fallback.\nexport default arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n","import class2type from \"./class2type.js\";\n\nexport default class2type.hasOwnProperty;\n","import hasOwn from \"./hasOwn.js\";\n\nexport default hasOwn.toString;\n","import fnToString from \"./fnToString.js\";\n\nexport default fnToString.call( Object );\n","import document from '../var/document.js';\n\nvar preservedScriptAttributes = {\n\ttype: true,\n\tsrc: true,\n\tnonce: true,\n\tnoModule: true\n};\n\nfunction DOMEval( code, node, doc ) {\n\tdoc = doc || document;\n\n\tvar i,\n\t\tscript = doc.createElement( \"script\" );\n\n\tscript.text = code;\n\tif ( node ) {\n\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\tif ( node[ i ] ) {\n\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t}\n\t\t}\n\t}\n\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n}\n\nexport default DOMEval;\n","import arr from \"./var/arr.js\";\nimport getProto from \"./var/getProto.js\";\nimport slice from \"./var/slice.js\";\nimport flat from \"./var/flat.js\";\nimport push from \"./var/push.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport class2type from \"./var/class2type.js\";\nimport toString from \"./var/toString.js\";\nimport hasOwn from \"./var/hasOwn.js\";\nimport fnToString from \"./var/fnToString.js\";\nimport ObjectFunctionString from \"./var/ObjectFunctionString.js\";\nimport support from \"./var/support.js\";\nimport isWindow from \"./var/isWindow.js\";\nimport DOMEval from \"./core/DOMEval.js\";\nimport toType from \"./core/toType.js\";\n\nvar version = \"@VERSION\",\n\n    rhtmlSuffix = /HTML$/i,\n\n    // Define a local copy of jQuery\n    jQuery = function( selector, context ) {\n\n        // The jQuery object is actually just the init constructor 'enhanced'\n        // Need init if jQuery is called (just allow error to be thrown if not included)\n        return new jQuery.fn.init( selector, context );\n    };\n\njQuery.fn = jQuery.prototype = {\n\n    // The current version of jQuery being used\n    jquery: version,\n\n    constructor: jQuery,\n\n    // The default length of a jQuery object is 0\n    length: 0,\n\n    toArray: function() {\n        return slice.call( this );\n    },\n\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function( num ) {\n\n        // Return all the elements in a clean array\n        if ( num == null ) {\n            return slice.call( this );\n        }\n\n        // Return just the one element from the set\n        return num < 0 ? this[ num + this.length ] : this[ num ];\n    },\n\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function( elems ) {\n\n        // Build a new jQuery matched element set\n        var ret = jQuery.merge( this.constructor(), elems );\n\n        // Add the old object onto the stack (as a reference)\n        ret.prevObject = this;\n\n        // Return the newly-formed element set\n        return ret;\n    },\n\n    // Execute a callback for every element in the matched set.\n    each: function( callback ) {\n        return jQuery.each( this, callback );\n    },\n\n    map: function( callback ) {\n        return this.pushStack( jQuery.map( this, function( elem, i ) {\n            return callback.call( elem, i, elem );\n        } ) );\n    },\n\n    slice: function() {\n        return this.pushStack( slice.apply( this, arguments ) );\n    },\n\n    first: function() {\n        return this.eq( 0 );\n    },\n\n    last: function() {\n        return this.eq( -1 );\n    },\n\n    even: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return ( i + 1 ) % 2;\n        } ) );\n    },\n\n    odd: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return i % 2;\n        } ) );\n    },\n\n    eq: function( i ) {\n        var len = this.length,\n            j = +i + ( i < 0 ? len : 0 );\n        return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n    },\n\n    end: function() {\n        return this.prevObject || this.constructor();\n    }\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n    var options, name, src, copy, copyIsArray, clone,\n        target = arguments[ 0 ] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    // Handle a deep copy situation\n    if ( typeof target === \"boolean\" ) {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[ i ] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if ( typeof target !== \"object\" && typeof target !== \"function\" ) {\n        target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if ( i === length ) {\n        target = this;\n        i--;\n    }\n\n    for ( ; i < length; i++ ) {\n\n        // Only deal with non-null/undefined values\n        if ( ( options = arguments[ i ] ) != null ) {\n\n            // Extend the base object\n            for ( name in options ) {\n                copy = options[ name ];\n\n                // Prevent Object.prototype pollution\n                // Prevent never-ending loop\n                if ( name === \"__proto__\" || target === copy ) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n                    ( copyIsArray = Array.isArray( copy ) ) ) ) {\n                    src = target[ name ];\n\n                    // Ensure proper type for the source value\n                    if ( copyIsArray && !Array.isArray( src ) ) {\n                        clone = [];\n                    } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n                        clone = {};\n                    } else {\n                        clone = src;\n                    }\n                    copyIsArray = false;\n\n                    // Never move original objects, clone them\n                    target[ name ] = jQuery.extend( deep, clone, copy );\n\n                // Don't bring in undefined values\n                } else if ( copy !== undefined ) {\n                    target[ name ] = copy;\n                }\n            }\n        }\n    }\n\n    // Return the modified object\n    return target;\n};\n\njQuery.extend( {\n\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n\n    error: function( msg ) {\n        throw new Error( msg );\n    },\n\n    noop: function() {},\n\n    isPlainObject: function( obj ) {\n        var proto, Ctor;\n\n        // Detect obvious negatives\n        // Use toString instead of jQuery.type to catch host objects\n        if ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n            return false;\n        }\n\n        proto = getProto( obj );\n\n        // Objects with no prototype (e.g., `Object.create( null )`) are plain\n        if ( !proto ) {\n            return true;\n        }\n\n        // Objects with prototype are plain iff they were constructed by a global Object function\n        Ctor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n        return typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n    },\n\n    isEmptyObject: function( obj ) {\n        var name;\n\n        for ( name in obj ) {\n            return false;\n        }\n        return true;\n    },\n\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function( code, options, doc ) {\n        DOMEval( code, { nonce: options && options.nonce }, doc );\n    },\n\n    each: function( obj, callback ) {\n        var length, i = 0;\n\n        if ( isArrayLike( obj ) ) {\n            length = obj.length;\n            for ( ; i < length; i++ ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        } else {\n            for ( i in obj ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        }\n\n        return obj;\n    },\n\n\n    // Retrieve the text value of an array of DOM nodes\n    text: function( elem ) {\n        var node,\n            ret = \"\",\n            i = 0,\n            nodeType = elem.nodeType;\n\n        if ( !nodeType ) {\n\n            // If no nodeType, this is expected to be an array\n            while ( ( node = elem[ i++ ] ) ) {\n\n                // Do not traverse comment nodes\n                ret += jQuery.text( node );\n            }\n        } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n            return elem.textContent;\n        } else if ( nodeType === 3 || nodeType === 4 ) {\n            return elem.nodeValue;\n        }\n\n        // Do not include comment or processing instruction nodes\n\n        return ret;\n    },\n\n\n    // results is for internal usage only\n    makeArray: function( arr, results ) {\n        var ret = results || [];\n\n        if ( arr != null ) {\n            if ( isArrayLike( Object( arr ) ) ) {\n                jQuery.merge( ret,\n                    typeof arr === \"string\" ?\n                        [ arr ] : arr\n                );\n            } else {\n                push.call( ret, arr );\n            }\n        }\n\n        return ret;\n    },\n\n    inArray: function( elem, arr, i ) {\n        return arr == null ? -1 : indexOf.call( arr, elem, i );\n    },\n\n    isXMLDoc: function( elem ) {\n        var namespace = elem.namespaceURI,\n            docElem = ( elem.ownerDocument || elem ).documentElement;\n\n        // Assume HTML when documentElement doesn't yet exist, such as inside\n        // document fragments.\n        return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n    },\n\n    merge: function( first, second ) {\n        var len = +second.length,\n            j = 0,\n            i = first.length;\n\n        for ( ; j < len; j++ ) {\n            first[ i++ ] = second[ j ];\n        }\n\n        first.length = i;\n\n        return first;\n    },\n\n    grep: function( elems, callback, invert ) {\n        var callbackInverse,\n            matches = [],\n            i = 0,\n            length = elems.length,\n            callbackExpect = !invert;\n\n        // Go through the array, only saving the items\n        // that pass the validator function\n        for ( ; i < length; i++ ) {\n            callbackInverse = !callback( elems[ i ], i );\n            if ( callbackInverse !== callbackExpect ) {\n                matches.push( elems[ i ] );\n            }\n        }\n\n        return matches;\n    },\n\n    // arg is for internal usage only\n    map: function( elems, callback, arg ) {\n        var length, value,\n            i = 0,\n            ret = [];\n\n        // Go through the array, translating each of the items to their new values\n        if ( isArrayLike( elems ) ) {\n            length = elems.length;\n            for ( ; i < length; i++ ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n\n        // Go through every key on the object,\n        } else {\n            for ( i in elems ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n        }\n\n        // Flatten any nested arrays\n        return flat( ret );\n    },\n\n    // A global GUID counter for objects\n    guid: 1,\n\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n    jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n    function( _i, name ) {\n        class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n    } );\n\nfunction isArrayLike( obj ) {\n\n    var length = !!obj && obj.length,\n        type = toType( obj );\n\n    if ( typeof obj === \"function\" || isWindow( obj ) ) {\n        return false;\n    }\n\n    return type === \"array\" || length === 0 ||\n        typeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\nexport default jQuery;\n","export default function isWindow( obj ) {\n\treturn obj != null && obj === obj.window;\n}\n","// All support tests are defined in their respective modules.\nexport default {};\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options)  {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\nStatistics.analyticsEventEmitter = new EventEmitter();\n\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\n\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n    Statistics.analyticsEventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, eventName, properties);\n};\n\n\nStatistics.prototype.addAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.on(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\nStatistics.prototype.removeAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.removeListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\n\n\n\n\n\n\n\n\n\n\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global module */\n/**\n * Enumeration of the media direction types.\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\n */\nconst MediaDirection = {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY: 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY: 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV: 'sendrecv'\n};\n\nmodule.exports = MediaDirection;\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\n        // Safari.\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // The default video type assumed by the bridge.\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            try {\n                this._channel.sendVideoTypeMessage(this._videoType);\n            } catch (error) {\n                logError(error, 'VideoTypeMessage', this._videoType);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            iceConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            iceConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        iceConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/* global $ */\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        media.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            sdp += ` ${streamCount}\\r\\n`;\n        } else {\n            sdp += '\\r\\n';\n        }\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sdp += `a=ssrc:${ssrc} ${name}`;\n                    if (value && value.length) {\n                        sdp += `:${value}`;\n                    }\n                    sdp += '\\r\\n';\n                });\n        });\n\n    return sdp;\n};\n","/* global module */\n/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing,\n    name }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}&room=${name}`;\n    }\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard,\n        name\n    });\n}\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token, roomName) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            name: roomName,\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        // $(window).on('beforeunload unload', ev => {\n        //     this.disconnect(ev).catch(() => {\n        //         // ignore errors in order to not brake the unload.\n        //     });\n        // });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        // Disable RTX on Firefox 83 and older versions because of\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1668028\n        if (!(this.options.disableRtx || (browser.isFirefox() && browser.isVersionLessThan(84)))) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n        });\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        // check for shard name in identities\n        identities.forEach(i => {\n            if (i.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = i.name;\n            }\n        });\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${roomName}@${options.customDomain\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        }\n\n        return true;\n    }\n}\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","export default window.document;\n","export default [];\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","function nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\n\nexport default nodeName;\n","import document from \"./document.js\";\n\nexport default document.documentElement;\n","import arr from \"./arr.js\";\n\nexport default arr.pop;\n","// https://www.w3.org/TR/css3-selectors/#whitespace\nexport default \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n","import document from \"./document.js\";\n\nexport default document.documentMode;\n","import isIE from '../var/isIE.js';\nimport whitespace from \"./var/whitespace.js\";\n\nvar rbuggyQSA = isIE && new RegExp(\n\n\t// Support: IE 9 - 11+\n\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\":enabled|:disabled|\" +\n\n\t// Support: IE 11+\n\t// IE 11 doesn't find elements on a `[name='']` query in some cases.\n\t// Adding a temporary attribute to the document before the selection works\n\t// around the issue.\n\t\"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\twhitespace + \"*(?:''|\\\"\\\")\"\n\n);\n\nexport default rbuggyQSA;\n","import jQuery from '../core.js';\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\tbup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\tadown.contains ?\n\t\t\tadown.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n","import jQuery from '../core.js';\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n","import arr from \"./arr.js\";\n\nexport default arr.sort;\n","import jQuery from '../core.js';\nimport document from '../var/document.js';\nimport sort from '../var/sort.js';\n\nlet hasDuplicate;\n\n// Document order sorting\nfunction sortOrder(a, b) {\n\n    // Flag for duplicate removal\n    if (a === b) {\n        hasDuplicate = true;\n\n        return 0;\n    }\n\n    // Sort on method existence if only one input has compareDocumentPosition\n    let compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n    if (compare) {\n        return compare;\n    }\n\n    // Calculate position if both inputs belong to the same document\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    compare = (a.ownerDocument || a) == (b.ownerDocument || b)\n        ? a.compareDocumentPosition(b)\n\n    // Otherwise we know they are disconnected\n        : 1;\n\n    // Disconnected nodes\n    if (compare & 1) {\n\n        // Choose the first element that is related to the document\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (a == document || a.ownerDocument == document\n\t\t\t&& jQuery.contains(document, a)) {\n            return -1;\n        }\n\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (b == document || b.ownerDocument == document\n\t\t\t&& jQuery.contains(document, b)) {\n            return 1;\n        }\n\n        // Maintain original order\n        return 0;\n    }\n\n    return compare & 4 ? -1 : 1;\n}\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function(results) {\n    let elem,\n        duplicates = [],\n        j = 0,\n        i = 0;\n\n    hasDuplicate = false;\n\n    sort.call(results, sortOrder);\n\n    if (hasDuplicate) {\n        while (elem = results[i++]) {\n            if (elem === results[i]) {\n                j = duplicates.push(i);\n            }\n        }\n        while (j--) {\n            results.splice(duplicates[j], 1);\n        }\n    }\n\n    return results;\n};\n","import jQuery from \"./core.js\";\nimport nodeName from \"./core/nodeName.js\";\nimport document from \"./var/document.js\";\nimport documentElement from \"./var/documentElement.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport pop from \"./var/pop.js\";\nimport push from \"./var/push.js\";\nimport whitespace from \"./selector/var/whitespace.js\";\nimport rbuggyQSA from \"./selector/rbuggyQSA.js\";\nimport isIE from \"./var/isIE.js\";\n\n// The following utils are attached directly to the jQuery object.\nimport \"./selector/contains.js\";\nimport \"./selector/escapeSelector.js\";\nimport \"./selector/uniqueSort.js\";\n\nvar preferredDoc = document,\n    matches = documentElement.matches || documentElement.msMatchesSelector;\n\n( function() {\n\nvar i,\n    Expr,\n    outermostContext,\n\n    // Local document vars\n    document,\n    documentElement,\n    documentIsHTML,\n\n    // Instance-specific data\n    expando = jQuery.expando,\n    dirruns = 0,\n    done = 0,\n    classCache = createCache(),\n    tokenCache = createCache(),\n    compilerCache = createCache(),\n    nonnativeSelectorCache = createCache(),\n\n    booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n        \"loop|multiple|open|readonly|required|scoped\",\n\n    // Regular expressions\n\n    // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n    // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n        // Operator (capture 2)\n        \"*([*^$|!~]?=)\" + whitespace +\n\n        // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n        \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n        whitespace + \"*\\\\]\",\n\n    pseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n        // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n        // 1. quoted (capture 3; capture 4 or capture 5)\n        \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n        // 2. simple (capture 6)\n        \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n        // 3. anything else (capture 2)\n        \".*\" +\n        \")\\\\)|)\",\n\n    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n    rtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n    rcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n    rcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n        whitespace + \"*\" ),\n    rdescend = new RegExp( whitespace + \"|>\" ),\n\n    rpseudo = new RegExp( pseudos ),\n    ridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n    matchExpr = {\n        ID: new RegExp( \"^#(\" + identifier + \")\" ),\n        CLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n        TAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n        ATTR: new RegExp( \"^\" + attributes ),\n        PSEUDO: new RegExp( \"^\" + pseudos ),\n        CHILD: new RegExp(\n            \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n                whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n                whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n        bool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n        // For use in libraries implementing .is()\n        // We use this for POS matching in `select`\n        needsContext: new RegExp( \"^\" + whitespace +\n            \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n            \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n    },\n\n    rinputs = /^(?:input|select|textarea|button)$/i,\n    rheader = /^h\\d$/i,\n\n    // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n    rsibling = /[+~]/,\n\n    // CSS escapes\n    // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n    funescape = function( escape, nonHex ) {\n        var high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n        if ( nonHex ) {\n\n            // Strip the backslash prefix from a non-hex escape sequence\n            return nonHex;\n        }\n\n        // Replace a hexadecimal escape sequence with the encoded Unicode code point\n        // Support: IE <=11+\n        // For values outside the Basic Multilingual Plane (BMP), manually construct a\n        // surrogate pair\n        return high < 0 ?\n            String.fromCharCode( high + 0x10000 ) :\n            String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n    },\n\n    // Used for iframes; see `setDocument`.\n    // Support: IE 9 - 11+\n    // Removing the function wrapper causes a \"Permission Denied\"\n    // error in IE.\n    unloadHandler = function() {\n        setDocument();\n    },\n\n    inDisabledFieldset = addCombinator(\n        function( elem ) {\n            return elem.disabled === true && nodeName( elem, \"fieldset\" );\n        },\n        { dir: \"parentNode\", next: \"legend\" }\n    );\n\nfunction selectorError( msg ) {\n    throw new Error( \"Syntax error, unrecognized expression: \" + msg );\n}\n\nfunction find( selector, context, results, seed ) {\n    var m, i, elem, nid, match, groups, newSelector,\n        newContext = context && context.ownerDocument,\n\n        // nodeType defaults to 9, since context defaults to document\n        nodeType = context ? context.nodeType : 9;\n\n    results = results || [];\n\n    // Return early from calls with invalid selector or context\n    if ( typeof selector !== \"string\" || !selector ||\n        nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n        return results;\n    }\n\n    // Try to shortcut find operations (as opposed to filters) in HTML documents\n    if ( !seed ) {\n        setDocument( context );\n        context = context || document;\n\n        if ( documentIsHTML ) {\n\n            // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n            // (excepting DocumentFragment context, where the methods don't exist)\n            if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n                // ID selector\n                if ( ( m = match[ 1 ] ) ) {\n\n                    // Document context\n                    if ( nodeType === 9 ) {\n                        if ( ( elem = context.getElementById( m ) ) ) {\n                            push.call( results, elem );\n                        }\n                        return results;\n\n                    // Element context\n                    } else {\n                        if ( newContext && ( elem = newContext.getElementById( m ) ) &&\n                            jQuery.contains( context, elem ) ) {\n\n                            push.call( results, elem );\n                            return results;\n                        }\n                    }\n\n                // Type selector\n                } else if ( match[ 2 ] ) {\n                    push.apply( results, context.getElementsByTagName( selector ) );\n                    return results;\n\n                // Class selector\n                } else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n                    push.apply( results, context.getElementsByClassName( m ) );\n                    return results;\n                }\n            }\n\n            // Take advantage of querySelectorAll\n            if ( !nonnativeSelectorCache[ selector + \" \" ] &&\n                ( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n                newSelector = selector;\n                newContext = context;\n\n                // qSA considers elements outside a scoping root when evaluating child or\n                // descendant combinators, which is not what we want.\n                // In such cases, we work around the behavior by prefixing every selector in the\n                // list with an ID selector referencing the scope context.\n                // The technique has to be used as well when a leading combinator is used\n                // as such selectors are not recognized by querySelectorAll.\n                // Thanks to Andrew Dupont for this technique.\n                if ( nodeType === 1 &&\n                    ( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n                    // Expand context for sibling selectors\n                    newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n                        context;\n\n                    // Outside of IE, if we're not changing the context we can\n                    // use :scope instead of an ID.\n                    if ( newContext !== context || isIE ) {\n\n                        // Capture the context ID, setting it first if necessary\n                        if ( ( nid = context.getAttribute( \"id\" ) ) ) {\n                            nid = jQuery.escapeSelector( nid );\n                        } else {\n                            context.setAttribute( \"id\", ( nid = expando ) );\n                        }\n                    }\n\n                    // Prefix every selector in the list\n                    groups = tokenize( selector );\n                    i = groups.length;\n                    while ( i-- ) {\n                        groups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n                            toSelector( groups[ i ] );\n                    }\n                    newSelector = groups.join( \",\" );\n                }\n\n                try {\n                    push.apply( results,\n                        newContext.querySelectorAll( newSelector )\n                    );\n                    return results;\n                } catch ( qsaError ) {\n                    nonnativeSelectorCache( selector, true );\n                } finally {\n                    if ( nid === expando ) {\n                        context.removeAttribute( \"id\" );\n                    }\n                }\n            }\n        }\n    }\n\n    // All others\n    return select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *  deleting the oldest entry\n */\nfunction createCache() {\n    var keys = [];\n\n    function cache( key, value ) {\n\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n            // Only keep the most recent entries\n            delete cache[ keys.shift() ];\n        }\n        return ( cache[ key + \" \" ] = value );\n    }\n    return cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n    fn[ expando ] = true;\n    return fn;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n    return function( elem ) {\n        return nodeName( elem, \"input\" ) && elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n    return function( elem ) {\n        return ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n            elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n    // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n    return function( elem ) {\n\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if ( \"form\" in elem ) {\n\n            // Check for inherited disabledness on relevant non-disabled elements:\n            // * listed form-associated elements in a disabled fieldset\n            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n            // * option elements in a disabled optgroup\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n            // All such elements have a \"form\" property.\n            if ( elem.parentNode && elem.disabled === false ) {\n\n                // Option elements defer to a parent optgroup if present\n                if ( \"label\" in elem ) {\n                    if ( \"label\" in elem.parentNode ) {\n                        return elem.parentNode.disabled === disabled;\n                    } else {\n                        return elem.disabled === disabled;\n                    }\n                }\n\n                // Support: IE 6 - 11+\n                // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n                return elem.isDisabled === disabled ||\n\n                    // Where there is no isDisabled, check manually\n                    elem.isDisabled !== !disabled &&\n                        inDisabledFieldset( elem ) === disabled;\n            }\n\n            return elem.disabled === disabled;\n\n        // Try to winnow out elements that can't be disabled before trusting the disabled property.\n        // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n        // even exist on them, let alone have a boolean value.\n        } else if ( \"label\" in elem ) {\n            return elem.disabled === disabled;\n        }\n\n        // Remaining elements are neither :enabled nor :disabled\n        return false;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n    return markFunction( function( argument ) {\n        argument = +argument;\n        return markFunction( function( seed, matches ) {\n            var j,\n                matchIndexes = fn( [], seed.length, argument ),\n                i = matchIndexes.length;\n\n            // Match elements found at the specified indexes\n            while ( i-- ) {\n                if ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n                    seed[ j ] = !( matches[ j ] = seed[ j ] );\n                }\n            }\n        } );\n    } );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n    return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n */\nfunction setDocument( node ) {\n    var subWindow,\n        doc = node ? node.ownerDocument || node : preferredDoc;\n\n    // Return early if doc is invalid or already selected\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( doc == document || doc.nodeType !== 9 ) {\n        return;\n    }\n\n    // Update global variables\n    document = doc;\n    documentElement = document.documentElement;\n    documentIsHTML = !jQuery.isXMLDoc( document );\n\n    // Support: IE 9 - 11+\n    // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( isIE && preferredDoc != document &&\n        ( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n        subWindow.addEventListener( \"unload\", unloadHandler );\n    }\n}\n\nfind.matches = function( expr, elements ) {\n    return find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n    setDocument( elem );\n\n    if ( documentIsHTML &&\n        !nonnativeSelectorCache[ expr + \" \" ] &&\n        ( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n        try {\n            return matches.call( elem, expr );\n        } catch ( e ) {\n            nonnativeSelectorCache( expr, true );\n        }\n    }\n\n    return find( expr, document, null, [ elem ] ).length > 0;\n};\n\nExpr = jQuery.expr = {\n\n    // Can be adjusted by the user\n    cacheLength: 50,\n\n    createPseudo: markFunction,\n\n    match: matchExpr,\n\n    find: {\n        ID: function( id, context ) {\n            if ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n                var elem = context.getElementById( id );\n                return elem ? [ elem ] : [];\n            }\n        },\n\n        TAG: function( tag, context ) {\n            if ( typeof context.getElementsByTagName !== \"undefined\" ) {\n                return context.getElementsByTagName( tag );\n\n                // DocumentFragment nodes don't have gEBTN\n            } else {\n                return context.querySelectorAll( tag );\n            }\n        },\n\n        CLASS: function( className, context ) {\n            if ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n                return context.getElementsByClassName( className );\n            }\n        }\n    },\n\n    relative: {\n        \">\": { dir: \"parentNode\", first: true },\n        \" \": { dir: \"parentNode\" },\n        \"+\": { dir: \"previousSibling\", first: true },\n        \"~\": { dir: \"previousSibling\" }\n    },\n\n    preFilter: {\n        ATTR: function( match ) {\n            match[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n            // Move the given value to match[3] whether quoted or unquoted\n            match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n                .replace( runescape, funescape );\n\n            if ( match[ 2 ] === \"~=\" ) {\n                match[ 3 ] = \" \" + match[ 3 ] + \" \";\n            }\n\n            return match.slice( 0, 4 );\n        },\n\n        CHILD: function( match ) {\n\n            /* matches from matchExpr[\"CHILD\"]\n                1 type (only|nth|...)\n                2 what (child|of-type)\n                3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n                4 xn-component of xn+y argument ([+-]?\\d*n|)\n                5 sign of xn-component\n                6 x of xn-component\n                7 sign of y-component\n                8 y of y-component\n            */\n            match[ 1 ] = match[ 1 ].toLowerCase();\n\n            if ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n                // nth-* requires argument\n                if ( !match[ 3 ] ) {\n                    selectorError( match[ 0 ] );\n                }\n\n                // numeric x and y parameters for Expr.filter.CHILD\n                // remember that false/true cast respectively to 0/1\n                match[ 4 ] = +( match[ 4 ] ?\n                    match[ 5 ] + ( match[ 6 ] || 1 ) :\n                    2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n                );\n                match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n            // other types prohibit arguments\n            } else if ( match[ 3 ] ) {\n                selectorError( match[ 0 ] );\n            }\n\n            return match;\n        },\n\n        PSEUDO: function( match ) {\n            var excess,\n                unquoted = !match[ 6 ] && match[ 2 ];\n\n            if ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n                return null;\n            }\n\n            // Accept quoted arguments as-is\n            if ( match[ 3 ] ) {\n                match[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n            // Strip excess characters from unquoted arguments\n            } else if ( unquoted && rpseudo.test( unquoted ) &&\n\n                // Get excess from tokenize (recursively)\n                ( excess = tokenize( unquoted, true ) ) &&\n\n                // advance to the next closing parenthesis\n                ( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n                // excess is a negative index\n                match[ 0 ] = match[ 0 ].slice( 0, excess );\n                match[ 2 ] = unquoted.slice( 0, excess );\n            }\n\n            // Return only captures needed by the pseudo filter method (type and argument)\n            return match.slice( 0, 3 );\n        }\n    },\n\n    filter: {\n        ID: function( id ) {\n            var attrId = id.replace( runescape, funescape );\n            return function( elem ) {\n                return elem.getAttribute( \"id\" ) === attrId;\n            };\n        },\n\n        TAG: function( nodeNameSelector ) {\n            var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n            return nodeNameSelector === \"*\" ?\n\n                function() {\n                    return true;\n                } :\n\n                function( elem ) {\n                    return nodeName( elem, expectedNodeName );\n                };\n        },\n\n        CLASS: function( className ) {\n            var pattern = classCache[ className + \" \" ];\n\n            return pattern ||\n                ( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n                    \"(\" + whitespace + \"|$)\" ) ) &&\n                classCache( className, function( elem ) {\n                    return pattern.test(\n                        typeof elem.className === \"string\" && elem.className ||\n                            typeof elem.getAttribute !== \"undefined\" &&\n                                elem.getAttribute( \"class\" ) ||\n                            \"\"\n                    );\n                } );\n        },\n\n        ATTR: function( name, operator, check ) {\n            return function( elem ) {\n                var result = jQuery.attr( elem, name );\n\n                if ( result == null ) {\n                    return operator === \"!=\";\n                }\n                if ( !operator ) {\n                    return true;\n                }\n\n                result += \"\";\n\n                if ( operator === \"=\" ) {\n                    return result === check;\n                }\n                if ( operator === \"!=\" ) {\n                    return result !== check;\n                }\n                if ( operator === \"^=\" ) {\n                    return check && result.indexOf( check ) === 0;\n                }\n                if ( operator === \"*=\" ) {\n                    return check && result.indexOf( check ) > -1;\n                }\n                if ( operator === \"$=\" ) {\n                    return check && result.slice( -check.length ) === check;\n                }\n                if ( operator === \"~=\" ) {\n                    return ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n                        .indexOf( check ) > -1;\n                }\n                if ( operator === \"|=\" ) {\n                    return result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n                }\n\n                return false;\n            };\n        },\n\n        CHILD: function( type, what, _argument, first, last ) {\n            var simple = type.slice( 0, 3 ) !== \"nth\",\n                forward = type.slice( -4 ) !== \"last\",\n                ofType = what === \"of-type\";\n\n            return first === 1 && last === 0 ?\n\n                // Shortcut for :nth-*(n)\n                function( elem ) {\n                    return !!elem.parentNode;\n                } :\n\n                function( elem, _context, xml ) {\n                    var cache, outerCache, node, nodeIndex, start,\n                        dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                        parent = elem.parentNode,\n                        name = ofType && elem.nodeName.toLowerCase(),\n                        useCache = !xml && !ofType,\n                        diff = false;\n\n                    if ( parent ) {\n\n                        // :(first|last|only)-(child|of-type)\n                        if ( simple ) {\n                            while ( dir ) {\n                                node = elem;\n                                while ( ( node = node[ dir ] ) ) {\n                                    if ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) {\n\n                                        return false;\n                                    }\n                                }\n\n                                // Reverse direction for :only-* (if we haven't yet done so)\n                                start = dir = type === \"only\" && !start && \"nextSibling\";\n                            }\n                            return true;\n                        }\n\n                        start = [ forward ? parent.firstChild : parent.lastChild ];\n\n                        // non-xml :nth-child(...) stores cache data on `parent`\n                        if ( forward && useCache ) {\n\n                            // Seek `elem` from a previously-cached index\n                            outerCache = parent[ expando ] || ( parent[ expando ] = {} );\n                            cache = outerCache[ type ] || [];\n                            nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                            diff = nodeIndex && cache[ 2 ];\n                            node = nodeIndex && parent.childNodes[ nodeIndex ];\n\n                            while ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n                                // Fallback to seeking `elem` from the start\n                                ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                // When found, cache indexes on `parent` and break\n                                if ( node.nodeType === 1 && ++diff && node === elem ) {\n                                    outerCache[ type ] = [ dirruns, nodeIndex, diff ];\n                                    break;\n                                }\n                            }\n\n                        } else {\n\n                            // Use previously-cached element index if available\n                            if ( useCache ) {\n                                outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n                                cache = outerCache[ type ] || [];\n                                nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                                diff = nodeIndex;\n                            }\n\n                            // xml :nth-child(...)\n                            // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n                            if ( diff === false ) {\n\n                                // Use the same loop as above to seek `elem` from the start\n                                while ( ( node = ++nodeIndex && node && node[ dir ] ||\n                                    ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                    if ( ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) &&\n                                        ++diff ) {\n\n                                        // Cache the index of each encountered element\n                                        if ( useCache ) {\n                                            outerCache = node[ expando ] ||\n                                                ( node[ expando ] = {} );\n                                            outerCache[ type ] = [ dirruns, diff ];\n                                        }\n\n                                        if ( node === elem ) {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        // Incorporate the offset, then check against cycle size\n                        diff -= last;\n                        return diff === first || ( diff % first === 0 && diff / first >= 0 );\n                    }\n                };\n        },\n\n        PSEUDO: function( pseudo, argument ) {\n\n            // pseudo-class names are case-insensitive\n            // https://www.w3.org/TR/selectors/#pseudo-classes\n            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n            // Remember that setFilters inherits from pseudos\n            var args,\n                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n                    selectorError( \"unsupported pseudo: \" + pseudo );\n\n            // The user may use createPseudo to indicate that\n            // arguments are needed to create the filter function\n            // just as jQuery does\n            if ( fn[ expando ] ) {\n                return fn( argument );\n            }\n\n            // But maintain support for old signatures\n            if ( fn.length > 1 ) {\n                args = [ pseudo, pseudo, \"\", argument ];\n                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n                    markFunction( function( seed, matches ) {\n                        var idx,\n                            matched = fn( seed, argument ),\n                            i = matched.length;\n                        while ( i-- ) {\n                            idx = indexOf.call( seed, matched[ i ] );\n                            seed[ idx ] = !( matches[ idx ] = matched[ i ] );\n                        }\n                    } ) :\n                    function( elem ) {\n                        return fn( elem, 0, args );\n                    };\n            }\n\n            return fn;\n        }\n    },\n\n    pseudos: {\n\n        // Potentially complex pseudos\n        not: markFunction( function( selector ) {\n\n            // Trim the selector passed to compile\n            // to avoid treating leading and trailing\n            // spaces as combinators\n            var input = [],\n                results = [],\n                matcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n            return matcher[ expando ] ?\n                markFunction( function( seed, matches, _context, xml ) {\n                    var elem,\n                        unmatched = matcher( seed, null, xml, [] ),\n                        i = seed.length;\n\n                    // Match elements unmatched by `matcher`\n                    while ( i-- ) {\n                        if ( ( elem = unmatched[ i ] ) ) {\n                            seed[ i ] = !( matches[ i ] = elem );\n                        }\n                    }\n                } ) :\n                function( elem, _context, xml ) {\n                    input[ 0 ] = elem;\n                    matcher( input, null, xml, results );\n\n                    // Don't keep the element (issue #299)\n                    input[ 0 ] = null;\n                    return !results.pop();\n                };\n        } ),\n\n        has: markFunction( function( selector ) {\n            return function( elem ) {\n                return find( selector, elem ).length > 0;\n            };\n        } ),\n\n        contains: markFunction( function( text ) {\n            text = text.replace( runescape, funescape );\n            return function( elem ) {\n                return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n            };\n        } ),\n\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // https://www.w3.org/TR/selectors/#lang-pseudo\n        lang: markFunction( function( lang ) {\n\n            // lang value must be a valid identifier\n            if ( !ridentifier.test( lang || \"\" ) ) {\n                selectorError( \"unsupported lang: \" + lang );\n            }\n            lang = lang.replace( runescape, funescape ).toLowerCase();\n            return function( elem ) {\n                var elemLang;\n                do {\n                    if ( ( elemLang = documentIsHTML ?\n                        elem.lang :\n                        elem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n                        elemLang = elemLang.toLowerCase();\n                        return elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n                    }\n                } while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n                return false;\n            };\n        } ),\n\n        // Miscellaneous\n        target: function( elem ) {\n            var hash = window.location && window.location.hash;\n            return hash && hash.slice( 1 ) === elem.id;\n        },\n\n        root: function( elem ) {\n            return elem === documentElement;\n        },\n\n        focus: function( elem ) {\n            return elem === document.activeElement &&\n                document.hasFocus() &&\n                !!( elem.type || elem.href || ~elem.tabIndex );\n        },\n\n        // Boolean properties\n        enabled: createDisabledPseudo( false ),\n        disabled: createDisabledPseudo( true ),\n\n        checked: function( elem ) {\n\n            // In CSS3, :checked should return both checked and selected elements\n            // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n            return ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n                ( nodeName( elem, \"option\" ) && !!elem.selected );\n        },\n\n        selected: function( elem ) {\n\n            // Support: IE <=11+\n            // Accessing the selectedIndex property\n            // forces the browser to treat the default option as\n            // selected when in an optgroup.\n            if ( isIE && elem.parentNode ) {\n                // eslint-disable-next-line no-unused-expressions\n                elem.parentNode.selectedIndex;\n            }\n\n            return elem.selected === true;\n        },\n\n        // Contents\n        empty: function( elem ) {\n\n            // https://www.w3.org/TR/selectors/#empty-pseudo\n            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n            //   but not by others (comment: 8; processing instruction: 7; etc.)\n            // nodeType < 6 works because attributes (2) do not appear as children\n            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n                if ( elem.nodeType < 6 ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        parent: function( elem ) {\n            return !Expr.pseudos.empty( elem );\n        },\n\n        // Element/input types\n        header: function( elem ) {\n            return rheader.test( elem.nodeName );\n        },\n\n        input: function( elem ) {\n            return rinputs.test( elem.nodeName );\n        },\n\n        button: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n                nodeName( elem, \"button\" );\n        },\n\n        text: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"text\";\n        },\n\n        // Position-in-collection\n        first: createPositionalPseudo( function() {\n            return [ 0 ];\n        } ),\n\n        last: createPositionalPseudo( function( _matchIndexes, length ) {\n            return [ length - 1 ];\n        } ),\n\n        eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n            return [ argument < 0 ? argument + length : argument ];\n        } ),\n\n        even: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 0;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        odd: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 1;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        lt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i;\n\n            if ( argument < 0 ) {\n                i = argument + length;\n            } else if ( argument > length ) {\n                i = length;\n            } else {\n                i = argument;\n            }\n\n            for ( ; --i >= 0; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        gt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i = argument < 0 ? argument + length : argument;\n            for ( ; ++i < length; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } )\n    }\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n    Expr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n    Expr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n    var matched, match, tokens, type,\n        soFar, groups, preFilters,\n        cached = tokenCache[ selector + \" \" ];\n\n    if ( cached ) {\n        return parseOnly ? 0 : cached.slice( 0 );\n    }\n\n    soFar = selector;\n    groups = [];\n    preFilters = Expr.preFilter;\n\n    while ( soFar ) {\n\n        // Comma and first run\n        if ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n            if ( match ) {\n\n                // Don't consume trailing commas as valid\n                soFar = soFar.slice( match[ 0 ].length ) || soFar;\n            }\n            groups.push( ( tokens = [] ) );\n        }\n\n        matched = false;\n\n        // Combinators\n        if ( ( match = rcombinators.exec( soFar ) ) ) {\n            matched = match.shift();\n            tokens.push( {\n                value: matched,\n\n                // Cast descendant combinators to space\n                type: match[ 0 ].replace( rtrim, \" \" )\n            } );\n            soFar = soFar.slice( matched.length );\n        }\n\n        // Filters\n        for ( type in Expr.filter ) {\n            if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n                ( match = preFilters[ type ]( match ) ) ) ) {\n                matched = match.shift();\n                tokens.push( {\n                    value: matched,\n                    type: type,\n                    matches: match\n                } );\n                soFar = soFar.slice( matched.length );\n            }\n        }\n\n        if ( !matched ) {\n            break;\n        }\n    }\n\n    // Return the length of the invalid excess\n    // if we're just parsing\n    // Otherwise, throw an error or return tokens\n    if ( parseOnly ) {\n        return soFar.length;\n    }\n\n    return soFar ?\n        selectorError( selector ) :\n\n        // Cache the tokens\n        tokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n    var i = 0,\n        len = tokens.length,\n        selector = \"\";\n    for ( ; i < len; i++ ) {\n        selector += tokens[ i ].value;\n    }\n    return selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n    var dir = combinator.dir,\n        skip = combinator.next,\n        key = skip || dir,\n        checkNonElements = base && key === \"parentNode\",\n        doneName = done++;\n\n    return combinator.first ?\n\n        // Check against closest ancestor/preceding element\n        function( elem, context, xml ) {\n            while ( ( elem = elem[ dir ] ) ) {\n                if ( elem.nodeType === 1 || checkNonElements ) {\n                    return matcher( elem, context, xml );\n                }\n            }\n            return false;\n        } :\n\n        // Check against all ancestor/preceding elements\n        function( elem, context, xml ) {\n            var oldCache, outerCache,\n                newCache = [ dirruns, doneName ];\n\n            // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n            if ( xml ) {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        if ( matcher( elem, context, xml ) ) {\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n                        if ( skip && nodeName( elem, skip ) ) {\n                            elem = elem[ dir ] || elem;\n                        } else if ( ( oldCache = outerCache[ key ] ) &&\n                            oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n                            // Assign to newCache so results back-propagate to previous elements\n                            return ( newCache[ 2 ] = oldCache[ 2 ] );\n                        } else {\n\n                            // Reuse newcache so results back-propagate to previous elements\n                            outerCache[ key ] = newCache;\n\n                            // A match means we're done; a fail means we have to keep checking\n                            if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n}\n\nfunction elementMatcher( matchers ) {\n    return matchers.length > 1 ?\n        function( elem, context, xml ) {\n            var i = matchers.length;\n            while ( i-- ) {\n                if ( !matchers[ i ]( elem, context, xml ) ) {\n                    return false;\n                }\n            }\n            return true;\n        } :\n        matchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n    var i = 0,\n        len = contexts.length;\n    for ( ; i < len; i++ ) {\n        find( selector, contexts[ i ], results );\n    }\n    return results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n    var elem,\n        newUnmatched = [],\n        i = 0,\n        len = unmatched.length,\n        mapped = map != null;\n\n    for ( ; i < len; i++ ) {\n        if ( ( elem = unmatched[ i ] ) ) {\n            if ( !filter || filter( elem, context, xml ) ) {\n                newUnmatched.push( elem );\n                if ( mapped ) {\n                    map.push( i );\n                }\n            }\n        }\n    }\n\n    return newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n    if ( postFilter && !postFilter[ expando ] ) {\n        postFilter = setMatcher( postFilter );\n    }\n    if ( postFinder && !postFinder[ expando ] ) {\n        postFinder = setMatcher( postFinder, postSelector );\n    }\n    return markFunction( function( seed, results, context, xml ) {\n        var temp, i, elem, matcherOut,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n\n            // Get initial elements from seed or context\n            elems = seed ||\n                multipleContexts( selector || \"*\",\n                    context.nodeType ? [ context ] : context, [] ),\n\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n            matcherIn = preFilter && ( seed || !selector ) ?\n                condense( elems, preMap, preFilter, context, xml ) :\n                elems;\n\n        if ( matcher ) {\n\n            // If we have a postFinder, or filtered seed, or non-seed postFilter\n            // or preexisting results,\n            matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n                // ...intermediate processing is necessary\n                [] :\n\n                // ...otherwise use results directly\n                results;\n\n            // Find primary matches\n            matcher( matcherIn, matcherOut, context, xml );\n        } else {\n            matcherOut = matcherIn;\n        }\n\n        // Apply postFilter\n        if ( postFilter ) {\n            temp = condense( matcherOut, postMap );\n            postFilter( temp, [], context, xml );\n\n            // Un-match failing elements by moving them back to matcherIn\n            i = temp.length;\n            while ( i-- ) {\n                if ( ( elem = temp[ i ] ) ) {\n                    matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n                }\n            }\n        }\n\n        if ( seed ) {\n            if ( postFinder || preFilter ) {\n                if ( postFinder ) {\n\n                    // Get the final matcherOut by condensing this intermediate into postFinder contexts\n                    temp = [];\n                    i = matcherOut.length;\n                    while ( i-- ) {\n                        if ( ( elem = matcherOut[ i ] ) ) {\n\n                            // Restore matcherIn since elem is not yet a final match\n                            temp.push( ( matcherIn[ i ] = elem ) );\n                        }\n                    }\n                    postFinder( null, ( matcherOut = [] ), temp, xml );\n                }\n\n                // Move matched elements from seed to results to keep them synchronized\n                i = matcherOut.length;\n                while ( i-- ) {\n                    if ( ( elem = matcherOut[ i ] ) &&\n                        ( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n                        seed[ temp ] = !( results[ temp ] = elem );\n                    }\n                }\n            }\n\n        // Add elements to results, through postFinder if defined\n        } else {\n            matcherOut = condense(\n                matcherOut === results ?\n                    matcherOut.splice( preexisting, matcherOut.length ) :\n                    matcherOut\n            );\n            if ( postFinder ) {\n                postFinder( null, results, matcherOut, xml );\n            } else {\n                push.apply( results, matcherOut );\n            }\n        }\n    } );\n}\n\nfunction matcherFromTokens( tokens ) {\n    var checkContext, matcher, j,\n        len = tokens.length,\n        leadingRelative = Expr.relative[ tokens[ 0 ].type ],\n        implicitRelative = leadingRelative || Expr.relative[ \" \" ],\n        i = leadingRelative ? 1 : 0,\n\n        // The foundational matcher ensures that elements are reachable from top-level context(s)\n        matchContext = addCombinator( function( elem ) {\n            return elem === checkContext;\n        }, implicitRelative, true ),\n        matchAnyContext = addCombinator( function( elem ) {\n            return indexOf.call( checkContext, elem ) > -1;\n        }, implicitRelative, true ),\n        matchers = [ function( elem, context, xml ) {\n            var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n                ( checkContext = context ).nodeType ?\n                    matchContext( elem, context, xml ) :\n                    matchAnyContext( elem, context, xml ) );\n\n            // Avoid hanging onto element (issue #299)\n            checkContext = null;\n            return ret;\n        } ];\n\n    for ( ; i < len; i++ ) {\n        if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n            matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n        } else {\n            matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n            // Return special upon seeing a positional matcher\n            if ( matcher[ expando ] ) {\n\n                // Find the next relative operator (if any) for proper handling\n                j = ++i;\n                for ( ; j < len; j++ ) {\n                    if ( Expr.relative[ tokens[ j ].type ] ) {\n                        break;\n                    }\n                }\n                return setMatcher(\n                    i > 1 && elementMatcher( matchers ),\n                    i > 1 && toSelector(\n\n                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n                        tokens.slice( 0, i - 1 )\n                            .concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n                    ).replace( rtrim, \"$1\" ),\n                    matcher,\n                    i < j && matcherFromTokens( tokens.slice( i, j ) ),\n                    j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n                    j < len && toSelector( tokens )\n                );\n            }\n            matchers.push( matcher );\n        }\n    }\n\n    return elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n    var bySet = setMatchers.length > 0,\n        byElement = elementMatchers.length > 0,\n        superMatcher = function( seed, context, xml, results, outermost ) {\n            var elem, j, matcher,\n                matchedCount = 0,\n                i = \"0\",\n                unmatched = seed && [],\n                setMatched = [],\n                contextBackup = outermostContext,\n\n                // We must always have either seed elements or outermost context\n                elems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n                // Use integer dirruns iff this is the outermost matcher\n                dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 );\n\n            if ( outermost ) {\n\n                // Support: IE 11+\n                // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                // two documents; shallow comparisons work.\n                // eslint-disable-next-line eqeqeq\n                outermostContext = context == document || context || outermost;\n            }\n\n            // Add elements passing elementMatchers directly to results\n            for ( ; ( elem = elems[ i ] ) != null; i++ ) {\n                if ( byElement && elem ) {\n                    j = 0;\n\n                    // Support: IE 11+\n                    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                    // two documents; shallow comparisons work.\n                    // eslint-disable-next-line eqeqeq\n                    if ( !context && elem.ownerDocument != document ) {\n                        setDocument( elem );\n                        xml = !documentIsHTML;\n                    }\n                    while ( ( matcher = elementMatchers[ j++ ] ) ) {\n                        if ( matcher( elem, context || document, xml ) ) {\n                            push.call( results, elem );\n                            break;\n                        }\n                    }\n                    if ( outermost ) {\n                        dirruns = dirrunsUnique;\n                    }\n                }\n\n                // Track unmatched elements for set filters\n                if ( bySet ) {\n\n                    // They will have gone through all possible matchers\n                    if ( ( elem = !matcher && elem ) ) {\n                        matchedCount--;\n                    }\n\n                    // Lengthen the array for every element, matched or not\n                    if ( seed ) {\n                        unmatched.push( elem );\n                    }\n                }\n            }\n\n            // `i` is now the count of elements visited above, and adding it to `matchedCount`\n            // makes the latter nonnegative.\n            matchedCount += i;\n\n            // Apply set filters to unmatched elements\n            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n            // no element matchers and no seed.\n            // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n            // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n            // numerically zero.\n            if ( bySet && i !== matchedCount ) {\n                j = 0;\n                while ( ( matcher = setMatchers[ j++ ] ) ) {\n                    matcher( unmatched, setMatched, context, xml );\n                }\n\n                if ( seed ) {\n\n                    // Reintegrate element matches to eliminate the need for sorting\n                    if ( matchedCount > 0 ) {\n                        while ( i-- ) {\n                            if ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n                                setMatched[ i ] = pop.call( results );\n                            }\n                        }\n                    }\n\n                    // Discard index placeholder values to get only actual matches\n                    setMatched = condense( setMatched );\n                }\n\n                // Add matches to results\n                push.apply( results, setMatched );\n\n                // Seedless set matches succeeding multiple successful matchers stipulate sorting\n                if ( outermost && !seed && setMatched.length > 0 &&\n                    ( matchedCount + setMatchers.length ) > 1 ) {\n\n                    jQuery.uniqueSort( results );\n                }\n            }\n\n            // Override manipulation of globals by nested matchers\n            if ( outermost ) {\n                dirruns = dirrunsUnique;\n                outermostContext = contextBackup;\n            }\n\n            return unmatched;\n        };\n\n    return bySet ?\n        markFunction( superMatcher ) :\n        superMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n    var i,\n        setMatchers = [],\n        elementMatchers = [],\n        cached = compilerCache[ selector + \" \" ];\n\n    if ( !cached ) {\n\n        // Generate a function of recursive functions that can be used to check each element\n        if ( !match ) {\n            match = tokenize( selector );\n        }\n        i = match.length;\n        while ( i-- ) {\n            cached = matcherFromTokens( match[ i ] );\n            if ( cached[ expando ] ) {\n                setMatchers.push( cached );\n            } else {\n                elementMatchers.push( cached );\n            }\n        }\n\n        // Cache the compiled function\n        cached = compilerCache( selector,\n            matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n        // Save selector and tokenization\n        cached.selector = selector;\n    }\n    return cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n    var i, tokens, token, type, find,\n        compiled = typeof selector === \"function\" && selector,\n        match = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n    results = results || [];\n\n    // Try to minimize operations if there is only one selector in the list and no seed\n    // (the latter of which guarantees us context)\n    if ( match.length === 1 ) {\n\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[ 0 ] = match[ 0 ].slice( 0 );\n        if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n                context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n            context = ( Expr.find.ID(\n                token.matches[ 0 ].replace( runescape, funescape ),\n                context\n            ) || [] )[ 0 ];\n            if ( !context ) {\n                return results;\n\n            // Precompiled matchers will still verify ancestry, so step up a level\n            } else if ( compiled ) {\n                context = context.parentNode;\n            }\n\n            selector = selector.slice( tokens.shift().value.length );\n        }\n\n        // Fetch a seed set for right-to-left matching\n        i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n        while ( i-- ) {\n            token = tokens[ i ];\n\n            // Abort if we hit a combinator\n            if ( Expr.relative[ ( type = token.type ) ] ) {\n                break;\n            }\n            if ( ( find = Expr.find[ type ] ) ) {\n\n                // Search, expanding context for leading sibling combinators\n                if ( ( seed = find(\n                    token.matches[ 0 ].replace( runescape, funescape ),\n                    rsibling.test( tokens[ 0 ].type ) &&\n                        testContext( context.parentNode ) || context\n                ) ) ) {\n\n                    // If seed is empty or no tokens remain, we can return early\n                    tokens.splice( i, 1 );\n                    selector = seed.length && toSelector( tokens );\n                    if ( !selector ) {\n                        push.apply( results, seed );\n                        return results;\n                    }\n\n                    break;\n                }\n            }\n        }\n    }\n\n    // Compile and execute a filtering function if one is not provided\n    // Provide `match` to avoid retokenization if we modified the selector above\n    ( compiled || compile( selector, match ) )(\n        seed,\n        context,\n        !documentIsHTML,\n        results,\n        !context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n    );\n    return results;\n}\n\n// Initialize against the default document\nsetDocument();\n\njQuery.find = find;\n\n} )();\n","import jQuery from '../core.js';\nimport toType from './toType.js';\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function(elems, fn, key, value, chainable, emptyGet, raw) {\n    let i = 0,\n        len = elems.length,\n        bulk = key == null;\n\n    // Sets many values\n    if (toType(key) === 'object') {\n        chainable = true;\n        for (i in key) {\n            access(elems, fn, i, key[i], true, emptyGet, raw);\n        }\n\n        // Sets one value\n    } else if (value !== undefined) {\n        chainable = true;\n\n        if (typeof value !== 'function') {\n            raw = true;\n        }\n\n        if (bulk) {\n\n            // Bulk operations run against the entire set\n            if (raw) {\n                fn.call(elems, value);\n                fn = null;\n\n                // ...except when executing function values\n            } else {\n                bulk = fn;\n                fn = function(elem, _key, value) {\n                    return bulk.call(jQuery(elem), value);\n                };\n            }\n        }\n\n        if (fn) {\n            for (; i < len; i++) {\n                fn(\n\t\t\t\t\telems[i], key, raw\n\t\t\t\t\t    ? value\n\t\t\t\t\t    : value.call(elems[i], i, fn(elems[i], key))\n                );\n            }\n        }\n    }\n\n    if (chainable) {\n        return elems;\n    }\n\n    // Gets\n    if (bulk) {\n        return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n};\n\nexport default access;\n","// Only count HTML whitespace\n// Other whitespace should count in values\n// https://infra.spec.whatwg.org/#ascii-whitespace\nexport default ( /[^\\x20\\t\\r\\n\\f]+/g );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport nodeName from \"../core/nodeName.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = elem.getAttribute( name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Support: IE <=11+\n// An input loses its value after becoming a radio\nif ( isIE ) {\n\tjQuery.attrHooks.type = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( value === \"radio\" && nodeName( elem, \"input\" ) ) {\n\t\t\t\tvar val = elem.value;\n\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\tif ( val ) {\n\t\t\t\t\telem.value = val;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tjQuery.attrHooks[ name ] = {\n\t\tget: function( elem ) {\n\t\t\tvar ret,\n\t\t\t\tisXML = jQuery.isXMLDoc( elem ),\n\t\t\t\tlowercaseName = name.toLowerCase();\n\n\t\t\tif ( !isXML ) {\n\t\t\t\tret = elem.getAttribute( name ) != null ?\n\t\t\t\t\tlowercaseName :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\tset: function( elem, value, name ) {\n\t\t\tif ( value === false ) {\n\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t} else {\n\t\t\t\telem.setAttribute( name, name );\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t};\n} );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = elem.getAttribute( \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\n\t\t\t\t\t// href-less anchor's `tabIndex` property value is `0` and\n\t\t\t\t\t// the `tabindex` attribute value: `null`. We want `-1`.\n\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11+\n// Accessing the selectedIndex property forces the browser to respect\n// setting selected on the option. The getter ensures a default option\n// is selected when in an optgroup. ESLint rule \"no-unused-expressions\"\n// is disabled for this code since it considers such accessions noop.\nif ( isIE ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n","import rnothtmlwhite from '../var/rnothtmlwhite.js';\n\n// Strip and collapse whitespace according to HTML spec\n// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\nfunction stripAndCollapse( value ) {\n\tvar tokens = value.match( rnothtmlwhite ) || [];\n\treturn tokens.join( \" \" );\n}\n\nexport default stripAndCollapse;\n","// rsingleTag matches a string consisting of a single HTML element with no attributes\n// and captures the element's name\nexport default ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n","import jQuery from \"../../core.js\";\n\nimport \"../../selector.js\";\n\nexport default jQuery.expr.match.needsContext;\n","import jQuery from \"../core.js\";\nimport indexOf from \"../var/indexOf.js\";\nimport rneedsContext from \"./var/rneedsContext.js\";\n\nimport \"../selector.js\";\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( typeof qualifier === \"function\" ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n","// Initialize a jQuery object\nimport jQuery from '../core.js';\nimport document from '../var/document.js';\n\nimport rsingleTag from './var/rsingleTag.js';\n\nimport '../traversing/findFilter.js';\n\n// A central reference to the root jQuery(document)\nlet rootjQuery,\n\n    // A simple way to check for HTML strings\n    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n    // Strict HTML recognition (#11290: must start with <)\n    // Shortcut simple #id case for speed\n    rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n    init = jQuery.fn.init = function(selector, context, root) {\n        let elem, match;\n\n        // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n        if (!selector) {\n            return this;\n        }\n\n        // Method init() accepts an alternate rootjQuery\n        // so migrate can support jQuery.sub (gh-2101)\n        root = root || rootjQuery;\n\n        // Handle HTML strings\n        if (typeof selector === 'string') {\n            if (selector[0] === '<'\n\t\t\t\t&& selector[selector.length - 1] === '>'\n\t\t\t\t&& selector.length >= 3) {\n\n                // Assume that strings that start and end with <> are HTML and skip the regex check\n                match = [ null, selector, null ];\n\n            } else {\n                match = rquickExpr.exec(selector);\n            }\n\n            // Match html or make sure no context is specified for #id\n            if (match && (match[1] || !context)) {\n\n                // HANDLE: $(html) -> $(array)\n                if (match[1]) {\n                    context = context instanceof jQuery ? context[0] : context;\n\n                    // Option to run scripts is true for back-compat\n                    // Intentionally let the error be thrown if parseHTML is not present\n                    jQuery.merge(this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[1],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n                    ));\n\n                    // HANDLE: $(html, props)\n                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n                        for (match in context) {\n\n                            // Properties of context are called as methods if possible\n                            if (typeof this[match] === 'function') {\n                                this[match](context[match]);\n\n                                // ...and otherwise set as attributes\n                            } else {\n                                this.attr(match, context[match]);\n                            }\n                        }\n                    }\n\n                    return this;\n\n                    // HANDLE: $(#id)\n                }\n                elem = document.getElementById(match[2]);\n\n                if (elem) {\n\n                    // Inject the element directly into the jQuery object\n                    this[0] = elem;\n                    this.length = 1;\n                }\n\n                return this;\n\n\n                // HANDLE: $(expr, $(...))\n            } else if (!context || context.jquery) {\n                return (context || root).find(selector);\n\n                // HANDLE: $(expr, context)\n                // (which is just equivalent to: $(context).find(expr)\n            }\n\n            return this.constructor(context).find(selector);\n\n\n            // HANDLE: $(DOMElement)\n        } else if (selector.nodeType) {\n            this[0] = selector;\n            this.length = 1;\n\n            return this;\n\n            // HANDLE: $(function)\n            // Shortcut for document ready\n        } else if (typeof selector === 'function') {\n            return root.ready !== undefined\n                ? root.ready(selector)\n\n            // Execute immediately if ready is not present\n                : selector(jQuery);\n        }\n\n        return jQuery.makeArray(selector, this);\n    };\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery(document);\n","import jQuery from \"../core.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\n\nimport \"../core/init.js\";\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\t// Toggle individual class names\n\t\t\ti = 0;\n\t\t\tself = jQuery( this );\n\t\t\tclassNames = classesToArray( value );\n\n\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t// Check each className given, space separated list\n\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\tself.removeClass( className );\n\t\t\t\t} else {\n\t\t\t\t\tself.addClass( className );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n","import jQuery from \"../core.js\";\nimport isIE from \"../var/isIE.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport nodeName from \"../core/nodeName.js\";\n\nimport \"../core/init.js\";\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = typeof value === \"function\";\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( option.selected &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery( option ).val(), values ) > -1\n\t\t\t\t\t) ) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\nif ( isIE ) {\n\tjQuery.valHooks.option = {\n\t\tget: function( elem ) {\n\n\t\t\tvar val = elem.getAttribute( \"value\" );\n\t\t\treturn val != null ?\n\t\t\t\tval :\n\n\t\t\t\t// Support: IE <=10 - 11+\n\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t}\n\t};\n}\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n} );\n","import jQuery from './core.js';\n\nimport \"./attributes/attr.js\";\nimport \"./attributes/prop.js\";\nimport \"./attributes/classes.js\";\nimport \"./attributes/val.js\";\n\n// Return jQuery for attributes-only inclusion\nexport default jQuery;\n","import jQuery from '../core.js';\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11+\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n","import jQuery from \"./core.js\";\nimport access from \"./core/access.js\";\nimport \"./core/init.js\";\n\n\njQuery.fn.extend( {\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t}\n} );\n\n\n\nexport default jQuery;\n","import jQuery from './core.js';\n\nimport './selector.js';\nimport './attributes.js';\nimport './core/parseXML.js';\nimport './exports/global.js';\nimport './manipulation.js';\n\n\nexport default jQuery;\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import arr from \"./arr.js\";\n\nexport default arr.push;\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {String} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\nexport const CHROME = 'chrome';\nexport const OPERA = 'opera';\nexport const FIREFOX = 'firefox';\nexport const INTERNET_EXPLORER = 'iexplorer';\nexport const SAFARI = 'safari';\nexport const NWJS = 'nwjs';\nexport const ELECTRON = 'electron';\nexport const REACT_NATIVE = 'react-native';\nexport const UNKNOWN = 'unknown';","import Bowser from 'bowser';\nimport { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN } from './browsers';\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\n\nconst bowserNameToJitsiName = {\n  'Chrome': CHROME,\n  'Chromium': CHROME,\n  'Opera': OPERA,\n  'Firefox': FIREFOX,\n  'Internet Explorer': INTERNET_EXPLORER,\n  'Safari': SAFARI\n};\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\n\nfunction _detectChromiumBased() {\n  const userAgent = navigator.userAgent;\n  const browserInfo = {\n    name: UNKNOWN,\n    version: undefined\n  };\n\n  if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n    // Edge is currenly supported only on desktop and android.\n    if (userAgent.match(/Edg(A?)/)) {\n      // Compare the underlying chromium version.\n      const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n      if (Number.parseInt(version, 10) > 72) {\n        browserInfo.name = CHROME;\n        browserInfo.version = version;\n      }\n    } else {\n      browserInfo.name = CHROME;\n      browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n    }\n  }\n\n  return browserInfo;\n}\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\n\n\nfunction _detectElectron() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/Electron/)) {\n    const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n    return {\n      name: ELECTRON,\n      version\n    };\n  }\n}\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\n\n\nfunction _detectNWJS() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/JitsiMeetNW/)) {\n    const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n    return {\n      name: NWJS,\n      version\n    };\n  }\n}\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\n\n\nfunction _detectReactNative() {\n  const match = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n  let version; // If we're remote debugging a React Native app, it may be treated as\n  // Chrome. Check navigator.product as well and always return some version\n  // even if we can't get the real one.\n\n  if (match || navigator.product === 'ReactNative') {\n    let name;\n\n    if (match && match.length > 2) {\n      name = match[1];\n      version = match[2];\n    }\n\n    name || (name = 'react-native');\n    version || (version = 'unknown');\n    return {\n      name: REACT_NATIVE,\n      version\n    };\n  }\n}\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\n\n\nfunction _detect(bowser) {\n  let browserInfo;\n  const detectors = [_detectReactNative, _detectElectron, _detectNWJS]; // Try all browser detectors\n\n  for (let i = 0; i < detectors.length; i++) {\n    browserInfo = detectors[i]();\n\n    if (browserInfo) {\n      return browserInfo;\n    }\n  }\n\n  const name = bowser.getBrowserName();\n\n  if (name in bowserNameToJitsiName) {\n    return {\n      name: bowserNameToJitsiName[name],\n      version: bowser.getBrowserVersion()\n    };\n  } // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n\n\n  browserInfo = _detectChromiumBased();\n\n  if (browserInfo) {\n    return browserInfo;\n  }\n\n  return {\n    name: UNKNOWN,\n    version: undefined\n  };\n}\n/**\n * Implements browser detection.\n */\n\n\nexport default class BrowserDetection {\n  /**\n   * Creates new BrowserDetection instance.\n   *\n   * @param {Object} [browserInfo] - Information about the browser.\n   * @param {string} browserInfo.name - The name of the browser.\n   * @param {string} browserInfo.version - The version of the browser.\n   */\n  constructor(browserInfo) {\n    let name, version;\n    this._bowser = Bowser.getParser(navigator.userAgent);\n\n    if (typeof browserInfo === 'undefined') {\n      const detectedBrowserInfo = _detect(this._bowser);\n\n      name = detectedBrowserInfo.name;\n      version = detectedBrowserInfo.version;\n    } else if (browserInfo.name in bowserNameToJitsiName) {\n      name = bowserNameToJitsiName[browserInfo.name];\n      version = browserInfo.version;\n    } else {\n      name = UNKNOWN;\n      version = undefined;\n    }\n\n    this._name = name;\n    this._version = version;\n  }\n  /**\n   * Gets current browser name.\n   * @returns {string}\n   */\n\n\n  getName() {\n    return this._name;\n  }\n  /**\n   * Checks if current browser is Chrome.\n   * @returns {boolean}\n   */\n\n\n  isChrome() {\n    return this._name === CHROME;\n  }\n  /**\n   * Checks if current browser is Opera.\n   * @returns {boolean}\n   */\n\n\n  isOpera() {\n    return this._name === OPERA;\n  }\n  /**\n   * Checks if current browser is Firefox.\n   * @returns {boolean}\n   */\n\n\n  isFirefox() {\n    return this._name === FIREFOX;\n  }\n  /**\n   * Checks if current browser is Internet Explorer.\n   * @returns {boolean}\n   */\n\n\n  isIExplorer() {\n    return this._name === INTERNET_EXPLORER;\n  }\n  /**\n   * Checks if current browser is Safari.\n   * @returns {boolean}\n   */\n\n\n  isSafari() {\n    return this._name === SAFARI;\n  }\n  /**\n   * Checks if current environment is NWJS.\n   * @returns {boolean}\n   */\n\n\n  isNWJS() {\n    return this._name === NWJS;\n  }\n  /**\n   * Checks if current environment is Electron.\n   * @returns {boolean}\n   */\n\n\n  isElectron() {\n    return this._name === ELECTRON;\n  }\n  /**\n   * Checks if current environment is React Native.\n   * @returns {boolean}\n   */\n\n\n  isReactNative() {\n    return this._name === REACT_NATIVE;\n  }\n  /**\n   * Returns the version of the current browser.\n   * @returns {string}\n   */\n\n\n  getVersion() {\n    return this._version;\n  }\n  /**\n   * Check if the parsed browser matches the passed condition.\n   *\n   * @param {Object} checkTree - It's one or two layered object, which can include a\n   * platform or an OS on the first layer and should have browsers specs on the\n   * bottom layer.\n   * Eg. { chrome: '>71.1.0' }\n   *     { windows: { chrome: '<70.2' } }\n   * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n   * conditions, false if not and undefined when the browser is not defined in the\n   * checktree object or when the current browser's version is unknown.\n   * @private\n   */\n\n\n  _checkCondition(checkTree) {\n    if (this._version) {\n      return this._bowser.satisfies(checkTree);\n    }\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * greater than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionGreaterThan(version) {\n    return this._checkCondition({\n      [this._name]: `>${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * lower than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionLessThan(version) {\n    return this._checkCondition({\n      [this._name]: `<${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * equal to the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   * A loose-equality operator is used here so that it matches the sub-versions as well.\n   */\n\n\n  isVersionEqualTo(version) {\n    return this._checkCondition({\n      [this._name]: `~${version}`\n    });\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\n/**\n * Dummy implementation of Storage interface.\n */\n\nclass DummyLocalStorage extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_storage\", {});\n  }\n\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._storage = {};\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return Object.keys(this._storage).length;\n  }\n  /**\n   * Will return that key's value associated to the passed key name.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {*} - The key value.\n   */\n\n\n  getItem(keyName) {\n    return this._storage[keyName];\n  }\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   *\n   * @param {string} keyName - The key name.\n   * @param {*} keyValue - The key value.\n   * @returns {void}\n   */\n\n\n  setItem(keyName, keyValue) {\n    this._storage[keyName] = keyValue;\n  }\n  /**\n   * When passed a key name, will remove that key from the storage.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {void}\n   */\n\n\n  removeItem(keyName) {\n    delete this._storage[keyName];\n  }\n  /**\n   * When passed a number n, this method will return the name of the nth key in the storage.\n   *\n   * @param {number} idx - The index of the key.\n   * @returns {string} - The nth key name.\n   */\n\n\n  key(n) {\n    const keys = Object.keys(this._storage);\n\n    if (keys.length <= n) {\n      return undefined;\n    }\n\n    return keys[n];\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    return JSON.stringify(this._storage);\n  }\n\n}\n/**\n * Wrapper class for browser's local storage object.\n */\n\n\nclass JitsiLocalStorage extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Storage} storage browser's local storage object.\n   */\n  constructor() {\n    super();\n\n    try {\n      this._storage = window.localStorage;\n      this._localStorageDisabled = false;\n    } catch (ignore) {// localStorage throws an exception.\n    }\n\n    if (!this._storage) {\n      // Handles the case when window.localStorage is undefined or throws an exception.\n      console.warn('Local storage is disabled.');\n      this._storage = new DummyLocalStorage();\n      this._localStorageDisabled = true;\n    }\n  }\n  /**\n   * Returns true if window.localStorage is disabled and false otherwise.\n   *\n   * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n   */\n\n\n  isLocalStorageDisabled() {\n    return this._localStorageDisabled;\n  }\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._storage.clear();\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return this._storage.length;\n  }\n  /**\n   * Returns that passed key's value.\n   * @param {string} keyName the name of the key you want to retrieve\n   * the value of.\n   * @returns {String|null} the value of the key. If the key does not exist,\n   * null is returned.\n   */\n\n\n  getItem(keyName) {\n    return this._storage.getItem(keyName);\n  }\n  /**\n   * Adds a key to the storage, or update key's value if it already exists.\n   * @param {string} keyName - the name of the key you want to create/update.\n   * @param {string} keyValue - the value you want to give the key you are\n   * creating/updating.\n   * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n   */\n\n\n  setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n    this._storage.setItem(keyName, keyValue);\n\n    if (!dontEmitChangedEvent) {\n      this.emit('changed');\n    }\n  }\n  /**\n   * Remove a key from the storage.\n   * @param {string} keyName the name of the key you want to remove.\n   */\n\n\n  removeItem(keyName) {\n    this._storage.removeItem(keyName);\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater\n   * than or equal to the number of key/value pairs in the object.\n   *\n   * @param {number} i - The index of the key in the list.\n   * @returns {string}\n   */\n\n\n  key(i) {\n    return this._storage.key(i);\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    if (this.isLocalStorageDisabled()) {\n      return this._storage.serialize();\n    }\n\n    const length = this._storage.length;\n    const localStorageContent = {};\n\n    for (let i = 0; i < length; i++) {\n      const key = this._storage.key(i);\n\n      localStorageContent[key] = this._storage.getItem(key);\n    }\n\n    return JSON.stringify(localStorageContent);\n  }\n\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","// [[Class]] -> type pairs\nexport default {};\n","import arr from \"./arr.js\";\n\nexport default arr.indexOf;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1],\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return SariskaMediaTransport.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: false,\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\nexport const conferenceConfig = {\n    enableLocalRecording: true,\n    enableVirtualBackground: false,\n    enableNoiseCancellation: false,\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true,\n    enableNoisyMicDetection: true,\n    createVADProcessor: true,\n    openBridgeChannel: 'websocket',\n    //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n    hiddenDomain: [\"recorder.sariska.io\",\"pricing.sariska.io\"],\n    // startAudioMuted\n    // startVideoMuted\n    enableLayerSuspension: true, // - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping: {\n        pingInterval: -1 // analyticsInterval: 60000,\n    },\n    analytics: {\n        disabled: false\n        // rtcstatsEnabled: true,\n\n        // In order to enable rtcstats one needs to provide a endpoint url.\n        // rtcstatsEndpoint: wss://rtcstats-server-pilot.jitsi.net/,\n\n        // The interval at which rtcstats will poll getStats, defaults to 1000ms.\n        // If the value is set to 0 getStats won't be polled and the rtcstats client\n        // will only send data related to RTCPeerConnection events.\n        // rtcstatsPolIInterval: 1000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","/* global module */\n/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","/* global __filename, Olm */\n\nimport base64js from 'base64-js';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this.eventEmitter.emit(OlmAdapterEvents.OLM_ID_KEY_READY, this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n","/* global __filename */\nimport './dom/jquery.js';\n\nimport Logger from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as createAnalyticsEvent from './modules/util/createAnalyticsEvent';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {initSDKConfig} from './config';\nimport {createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        createPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options = {}) {\n        options = {...initSDKConfig, ...options};\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n\n        if (window.location.href.indexOf(\"iAmRecorder\") >= 0) {\n           return [];\n        }\n\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\n\nimport E2EEContext from './E2EEContext';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        this._conferenceJoined = false;\n        this._enabled = false;\n        this._key = undefined;\n        this._enabling = undefined;\n\n        this._e2eeCtx = new E2EEContext();\n        this._olmAdapter = new OlmAdapter(conference);\n\n        // Debounce key rotation / ratcheting to avoid a storm of messages.\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n\n        // Participant join / leave operations. Used for key advancement / rotation.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents.CONFERENCE_JOINED,\n            () => {\n                this._conferenceJoined = true;\n            });\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.OLM_ID_KEY_READY,\n            this._onOlmIdKeyReady.bind(this));\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_E2EE_CHANNEL_READY,\n            this._onParticipantE2EEChannelReady.bind(this));\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()))\n            && OlmAdapter.isSupported();\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this._enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this._enabled = enabled;\n\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            for (const participant of this.conference.getParticipants()) {\n                this._e2eeCtx.cleanup(participant.getId());\n            }\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Publushes our own Olmn id key in presence.\n     * @private\n     */\n    _onOlmIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this.conference.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this._enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this._e2eeCtx.cleanup(id);\n\n        if (this._enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this._e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this._enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n\n                this._rotateKey();\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this._enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this._enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","/* global __filename, $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport SignalingLayerImpl from './SignalingLayerImpl';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC standard.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan && state === 'stable'\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\n                logger.debug(`${this} onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                    // the local endpoint is the offerer and starts muted.\n                    const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                    const remoteDescription = new RTCSessionDescription({\n                        type: 'offer',\n                        sdp: remoteSdp\n                    });\n\n                    this._responderRenegotiate(remoteDescription);\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the maximum bitrates on the local video track. Bitrate values from\n     * videoQuality settings in config.js will be used for configuring the sender.\n     * @returns {Promise<void>} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderMaxBitrates() {\n        if (this._assertNotEnded()) {\n            return this.peerconnection.setMaxBitRate();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the degradation preference on the video sender. This setting determines if\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n     * @returns {Promise<void>} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoDegradationPreference() {\n        if (this._assertNotEnded()) {\n            return this.peerconnection.setSenderVideoDegradationPreference();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of the remote tracks and SSRCs associated with a remote endpoint.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {Promise<JitsiRemoteTrack>} Promise that resolves with the tracks that are removed or error if the\n     * operation fails.\n     */\n    removeRemoteStreamsOnLeave(id) {\n        let remoteTracks = [];\n\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                remoteTracks = this.peerconnection.removeRemoteTracks(id);\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                        resolve(remoteTracks);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        // Remove the ssrcs from the m-line in\n                        // 1. Plan-b mode always.\n                        // 2. Unified mode but only for jvb connection. In p2p mode if the ssrc is removed and added\n                        // back to the same m-line, Chrome/Safari do not render the media even if it being received\n                        // and decoded from the remote peer. The webrtc spec is not clear about m-line re-use and\n                        // the browser vendors have implemented this differently. Currently workaround this by changing\n                        // the media direction, that should be enough for the browser to fire the \"removetrack\" event\n                        // on the associated MediaStream.\n                        if (!this.usesUnifiedPlan || (this.usesUnifiedPlan && !this.isP2P)) {\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        }\n\n                        // The current direction of the transceiver for p2p will depend on whether a local sources is\n                        // added or not. It will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n\n                        // Jvb connections will have direction set to 'sendonly' when the remote ssrc is present.\n                        } else {\n                            // Change the direction to \"inactive\" always for jvb connection.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx]\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack && newTrack.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // FIXME set all sender parameters in one go?\n                            // Set the degradation preference on the new video sender.\n                            return this.peerconnection.setSenderVideoDegradationPreference()\n                                .then(() => this.peerconnection.setSenderVideoConstraint())\n                                .then(() => this.peerconnection.setMaxBitRate());\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Apply the video constraints, max bitrates and degradation preference on\n                // the video sender if needed.\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\n                    return this.setSenderMaxBitrates()\n                        .then(() => this.setSenderVideoDegradationPreference())\n                        .then(() => this.setSenderVideoConstraint());\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not\n                                // enough to fail the whole operation. It will log\n                                // an error inside.\n                                this._verifyNoSSRCChanged(\n                                    operationName, new SDP(oldLocalSDP));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info(`${this} Sending source-remove`);\n            logger.debug(remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info(`${this} Sending source-add`);\n            logger.debug(add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     * @param videoBitrates - the bitrates to be configured on the video senders for\n     * different resolutions both in unicast and simulcast mode.\n     */\n    constructor(peerconnection, videoBitrates) {\n        this.pc = peerconnection;\n        this.videoBitrates = videoBitrates.VP8 || videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\n            },\n            {\n                active: true,\n                maxBitrate: this.videoBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: 2.0\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\n            }\n        ];\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    _findTransceiver(mediaType, localTrack = null) {\n        let transceiver = null;\n\n        // Check if the local track has been removed from the peerconnection already.\n        const trackRemoved = !localTrack\n            || (localTrack\n                && browser.doesVideoMuteByStreamRemove()\n                && localTrack.isVideoTrack()\n                && localTrack.isMuted());\n\n        if (trackRemoved) {\n            transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.receiver?.track?.kind === mediaType);\n        } else if (localTrack) {\n            transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.sender?.track?.id === localTrack.getTrackId());\n        }\n\n        return transceiver;\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc)),\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    addTrackUnmute(localTrack) {\n        const mediaType = localTrack.getType();\n        const track = localTrack.getTrack();\n        const transceiver = this._findTransceiver(mediaType);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n        logger.debug(`${this.pc} Adding ${localTrack}`);\n\n        return transceiver.sender.replaceTrack(track);\n    }\n\n    /**\n     * Obtains the current local video track's height constraints based on the\n     * initial stream encodings configuration on the sender and the resolution\n     * of the current local track added to the peerconnection.\n     * @param {MediaStreamTrack} localTrack local video track\n     * @returns {Array[number]} an array containing the resolution heights of\n     * simulcast streams configured on the video sender.\n     */\n    getLocalStreamHeightConstraints(localTrack) {\n        // React-native hasn't implemented MediaStreamTrack getSettings yet.\n        if (browser.isReactNative()) {\n            return null;\n        }\n\n        const localVideoHeightConstraints = [];\n\n        // Firefox doesn't return the height of the desktop track, assume a min. height of 720.\n        const { height = 720 } = localTrack.getSettings();\n\n        for (const encoding of this.localStreamEncodingsConfig) {\n            localVideoHeightConstraints.push(height / encoding.scaleResolutionDownBy);\n        }\n\n        return localVideoHeightConstraints;\n    }\n\n    /**\n     * Removes the track from the RTCRtpSender as part of the mute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    removeTrackMute(localTrack) {\n        const mediaType = localTrack.getType();\n        const transceiver = this._findTransceiver(mediaType, localTrack);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n\n        logger.debug(`${this.pc} Removing ${localTrack}`);\n\n        return transceiver.sender.replaceTrack(null);\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        if (oldTrack && newTrack) {\n            const mediaType = newTrack.getType();\n            const stream = newTrack.getOriginalStream();\n\n            // Ignore cases when the track is replaced while the device is in a muted state,like\n            // replacing camera when video muted or replacing mic when audio muted. These JitsiLocalTracks\n            // do not have a mediastream attached. Replace track will be called again when the device is\n            // unmuted and the track will be replaced on the peerconnection then.\n            if (!stream) {\n                this.pc.localTracks.delete(oldTrack.rtcId);\n                this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                return Promise.resolve();\n            }\n\n            const transceiver = this._findTransceiver(mediaType, oldTrack);\n            const track = newTrack.getTrack();\n\n            if (!transceiver) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n            return transceiver.sender.replaceTrack(track)\n                .then(() => {\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\n\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                    this.pc._addedStreams.push(stream);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                });\n        } else if (oldTrack && !newTrack) {\n            return this.removeTrackMute(oldTrack)\n                .then(() => {\n                    const mediaType = oldTrack.getType();\n                    const transceiver = this._findTransceiver(mediaType);\n\n                    // Change the direction on the transceiver to 'recvonly' so that a 'removetrack'\n                    // is fired on the associated media stream on the remote peer.\n                    if (transceiver) {\n                        transceiver.direction = MediaDirection.RECVONLY;\n                    }\n\n                    // Remove the old track from the list of local tracks.\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                });\n        } else if (newTrack && !oldTrack) {\n            return this.addTrackUnmute(newTrack)\n                .then(() => {\n                    const mediaType = newTrack.getType();\n                    const transceiver = this._findTransceiver(mediaType, newTrack);\n\n                    // Change the direction on the transceiver back to 'sendrecv' so that a 'track'\n                    // event is fired on the remote peer.\n                    if (transceiver) {\n                        transceiver.direction = MediaDirection.SENDRECV;\n                    }\n\n                    // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                    // for the newly added track using SDP munging which happens during the renegotiation.\n                    const promise = browser.usesSdpMungingForSimulcast()\n                        ? Promise.resolve()\n                        : this.setEncodings(newTrack);\n\n                    return promise\n                        .then(() => {\n                            // Add the new track to the list of local tracks.\n                            this.pc.localTracks.set(newTrack.rtcId, newTrack);\n                        });\n                });\n        }\n\n        logger.info(`${this.pc} TPCUtils.replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this._findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL,\n    timerWorkerScript\n} from './TimeWorker';\n\n/**\n * Represents a modified MediaStream that adds video as pip on a desktop stream.\n * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n * desktop stream.\n */\nexport default class JitsiStreamPresenterEffect {\n    /**\n     * Represents a modified MediaStream that adds a camera track at the\n     * bottom right corner of the desktop track using a HTML canvas.\n     * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n     * video stream.\n     *\n     * @param {MediaStream} videoStream - The video stream which is user for\n     * creating the canvas.\n     */\n    constructor(videoStream: MediaStream) {\n        const videoDiv = document.createElement('div');\n        const firstVideoTrack = videoStream.getVideoTracks()[0];\n        const { height, width, frameRate } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n\n        this._desktopElement = document.createElement('video');\n        this._videoElement = document.createElement('video');\n        videoDiv.appendChild(this._videoElement);\n        videoDiv.appendChild(this._desktopElement);\n        if (document.body !== null) {\n            document.body.appendChild(videoDiv);\n        }\n\n        // Set the video element properties\n        this._frameRate = parseInt(frameRate, 10);\n        this._videoElement.width = parseInt(width, 10);\n        this._videoElement.height = parseInt(height, 10);\n        this._videoElement.autoplay = true;\n        this._videoElement.srcObject = videoStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._videoElement.play();\n\n        // set the style attribute of the div to make it invisible\n        videoDiv.style.display = 'none';\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onVideoFrameTimer = this._onVideoFrameTimer.bind(this);\n    }\n\n    /**\n     * EventHandler onmessage for the videoFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onVideoFrameTimer(response) {\n        if (response.data.id === INTERVAL_TIMEOUT) {\n            this._renderVideo();\n        }\n    }\n\n    /**\n     * Loop function to render the video frame input and draw presenter effect.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderVideo() {\n        // adjust the canvas width/height on every frame incase the window has been resized.\n        const [ track ] = this._desktopStream.getVideoTracks();\n        const { height, width } = track.getSettings() ?? track.getConstraints();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._ctx.drawImage(this._desktopElement, 0, 0, this._canvas.width, this._canvas.height);\n        this._ctx.drawImage(this._videoElement, this._canvas.width - this._videoElement.width, this._canvas.height\n            - this._videoElement.height, this._videoElement.width, this._videoElement.height);\n\n        // draw a border around the video element.\n        this._ctx.beginPath();\n        this._ctx.lineWidth = 2;\n        this._ctx.strokeStyle = '#A9A9A9'; // dark grey\n        this._ctx.rect(this._canvas.width - this._videoElement.width, this._canvas.height - this._videoElement.height,\n            this._videoElement.width, this._videoElement.height);\n        this._ctx.stroke();\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the\n     * specified track, false otherwise.\n     */\n    isEnabled(jitsiLocalTrack: Object) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'desktop';\n    }\n\n    /**\n     * Starts loop to capture video frame and render presenter effect.\n     *\n     * @param {MediaStream} desktopStream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(desktopStream: MediaStream) {\n        const firstVideoTrack = desktopStream.getVideoTracks()[0];\n        const { height, width } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        // set the desktop element properties.\n        this._desktopStream = desktopStream;\n        this._desktopElement.width = parseInt(width, 10);\n        this._desktopElement.height = parseInt(height, 10);\n        this._desktopElement.autoplay = true;\n        this._desktopElement.srcObject = desktopStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._desktopElement.play();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._videoFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Presenter effect worker' });\n        this._videoFrameTimerWorker.onmessage = this._onVideoFrameTimer;\n        this._videoFrameTimerWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: 1000 / this._frameRate\n        });\n\n        return this._canvas.captureStream(this._frameRate);\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._videoFrameTimerWorker.postMessage({\n            id: CLEAR_INTERVAL\n        });\n        this._videoFrameTimerWorker.terminate();\n    }\n\n}\n","// @flow\n\nimport JitsiStreamPresenterEffect from './JitsiStreamPresenterEffect';\n\n/**\n * Creates a new instance of JitsiStreamPresenterEffect.\n *\n * @param {MediaStream} stream - The video stream which will be used for\n * creating the presenter effect.\n * @returns {Promise<JitsiStreamPresenterEffect>}\n */\nexport function createPresenterEffect(stream: MediaStream) {\n    if (!MediaStreamTrack.prototype.getSettings\n        && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('JitsiStreamPresenterEffect not supported!'));\n    }\n\n    return Promise.resolve(new JitsiStreamPresenterEffect(stream));\n}\n","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH: number = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE: number = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY: number = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface: Object) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample: Float32Array) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array: Float32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame: Float32Array) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport rnnoiseWasmInit from 'rnnoise-wasm';\n\nimport RnnoiseProcessor from './RnnoiseProcessor';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport type { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\ndeclare var interfaceConfig: Object;\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback: Function) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream: MediaStream, videoType: string) {\n        return new Promise<void>((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message: Object) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels: number) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback: Function) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model: Object, options: Object) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response: Object) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack: Object) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream: MediaStream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport createTFLiteModule from './tflite';\nimport createTFLiteSIMDModule from './tflite-simd';\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @param {Function} dispatch - The Redux dispatch function.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground: Object, dispatch: Function) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n    let wasmCheck;\n\n    // Checks if WebAssembly feature is supported or enabled by/in the browser.\n    // Conditional import of wasm-check package is done to prevent\n    // the browser from crashing when the user opens the app.\n\n    try {\n        wasmCheck = require('wasm-check');\n        if (wasmCheck?.feature?.simd) {\n            tflite = await createTFLiteSIMDModule();\n        } else {\n            tflite = await createTFLiteModule();\n        }\n    } catch (err) {\n        return;\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","import class2type from \"./class2type.js\";\n\nexport default class2type.toString;\n","import class2type from '../var/class2type.js';\nimport toString from '../var/toString.js';\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\treturn typeof obj === \"object\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n\nexport default toType;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","export * from './SessionManager';\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(browser.isFirefox() || browser.isIosBrowser());\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        try {\n            appData = JSON.parse(appData)|| {};\n        } catch(e) {\n            appData = {};\n        }\n        \n        appData[\"base_url\"] = `${window.location.origin}${window.location.pathname}#roomId=${focusMucJid.split(\"@\")[0]}/`;\n        appData[\"token\"] =  this._connection.emuc.xmpp.token;\n        \n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nexport default bytesToUuid;","import rng from './rng.js';\nimport bytesToUuid from './bytesToUuid.js';\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    var start = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return bytesToUuid(rnds);\n}\n\nexport default v4;","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\ntype RecordingStats = {\n\n    /**\n     * Current local recording session token used by the participant.\n     */\n    currentSessionToken: number,\n\n    /**\n     * Whether local recording is engaged on the participant's device.\n     */\n    isRecording: boolean,\n\n    /**\n     * Total recorded bytes. (Reserved for future use.)\n     */\n    recordedBytes: number,\n\n    /**\n     * Total recording duration. (Reserved for future use.)\n     */\n    recordedLength: number\n}\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference: * = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken: number = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference: Object) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate: Function) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate: Function) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate: Function) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format: string) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken: number) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId: string) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted: boolean) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat: string) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats(): RecordingStats {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState: Symbol) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return (Promise.resolve(): Promise<void>);\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        const blob = new Blob([\"importScripts('https://sdk.sariska.io/flacEncodeWorker.min.js');\"], {\"type\": 'application/javascript'});\n        const url = window.URL || window.webkitURL;\n        const blobUrl = url.createObjectURL(blob);\n        this._encoder = new Worker(blobUrl);\n        URL.revokeObjectURL(blobUrl);\n    }\n}","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime(): number {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\ntype SessionEvent = {\n\n    /**\n     * The type of the event.\n     * Should be one of the values in {@code SessionEventType}.\n     */\n    type: string,\n\n    /**\n     * The timestamp of the event.\n     */\n    timestamp: number\n};\n\n/**\n * Representation of the metadata of a segment.\n */\ntype SegmentInfo = {\n\n    /**\n     * The length of gap before this segment, in milliseconds.\n     * mull if unknown.\n     */\n    gapBefore?: ?number,\n\n    /**\n     * The duration of this segment, in milliseconds.\n     * null if unknown or the segment is not finished.\n     */\n    duration?: ?number,\n\n    /**\n     * The start time, in milliseconds.\n     */\n    start?: ?number,\n\n    /**\n     * The end time, in milliseconds.\n     * null if unknown, the segment is not finished, or the recording is\n     * interrupted (e.g. browser reload).\n     */\n    end?: ?number\n};\n\n/**\n * Representation of metadata of a local recording session.\n */\ntype SessionInfo = {\n\n    /**\n     * The session token.\n     */\n    sessionToken: string,\n\n    /**\n     * The start time of the session.\n     */\n    start: ?number,\n\n    /**\n     * The recording format.\n     */\n    format: string,\n\n    /**\n     * Array of segments in the session.\n     */\n    segments: SegmentInfo[]\n}\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken: string, format: string) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(): SessionInfo[] {\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo: SessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken: string) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken: string): SegmentInfo[] {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken: string): number {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken: string): number {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken: string) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events: SessionEvent[]): SegmentInfo[] {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment: SegmentInfo = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","/* global __filename, $, Promise */\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\nimport {conferenceDefaultOptions} from './config';\nimport {RecordingController} from \"./modules/local-recording\";\n\nconst logger = getLogger(__filename);\n\nwindow.APP = { \n    conference: {\n    }\n};\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.sessions = {};\n    this.user = options.user;\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryprtion is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    this.handleSubtitles();\n\n    if (options.config.enableLocalRecording) {\n        this.recordingController = new RecordingController()\n        this.recordingController.registerEvents(this);\n    }\n\n    if (options.config.enableAnalytics) {\n        this.enableAnalytics();\n    }\n\n    if (options.config.iAmRecorder) {\n        this.removeCommand(\"userinfo\");\n        this.sendCommand(\n            \"userinfo\",\n            {\n                attributes: {\n                    xmlns: 'http://jitsi.org/jitmeet/userinfo',\n                    robot: true\n                }\n            });\n    }\n    \n    var self = this;\n\n    window.APP = { \n        conference: { \n            _room: this,\n            get membersCount() {\n                return self.getParticipants().length + 1;\n            },\n            getStats() {\n                return self.connectionQuality.getStats();\n            }\n        }\n    };\n\n    this.localTracksDuration = new LocalTracksDuration(this);\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid) {\n    return Strophe.getNodeFromJid(jid);\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    this.rtc.setVideoType(videoType);\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (!track) {\n        return;\n    }\n    if (track.isAudioTrack() && this.options.config.startAudioMuted) {\n        track.mute();\n    }\n    if (track.isVideoTrack() && this.options.config.startVideoMuted) {\n        track.mute();\n    }\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on mobile Safari because of a known issue where audio playout doesn't happen\n    // if the user joins audio and video muted.\n    return this.getLocalTracks()\n        .filter(track => (track.getType() === MediaType.AUDIO && (!this.isStartAudioMuted() || browser.isIosBrowser()))\n        || (track.getType() === MediaType.VIDEO && !this.isStartVideoMuted()));\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            oldTrack && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if (oldTrack?.isVideoTrack() || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        const videoTypeTagName = 'videoType';\n\n        // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (newTrack.videoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            this.sendCommand(videoTypeTagName, { value: newTrack.videoType });\n        }\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage(track);\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage();\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return this.options.config.hiddenDomain.indexOf(Strophe.getDomainFromJid(this.connection.getJid())) >= 0;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipantsWithoutHidden = function() {\n    return this.getParticipants().filter(participant=>!participant._hidden);\n}\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    // Remove the ssrcs from the remote description.\n    const mediaSessions = this._getMediaSessions();\n    const removePromises = [];\n\n    for (const session of mediaSessions) {\n        removePromises.push(session.removeRemoteStreamsOnLeave(id));\n    }\n\n    Promise.allSettled(removePromises)\n        .then(results => {\n            let removedTracks = [];\n\n            results.map(result => result.value).forEach(value => {\n                if (value) {\n                    removedTracks = removedTracks.concat(value);\n                }\n            });\n\n            removedTracks.forEach(track => {\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n            });\n\n            // There can be no participant in case the member that left is focus.\n            if (participant) {\n                this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n            }\n\n            if (this.room !== null) { // Skip if we have left the room already.\n                this._maybeStartOrStopP2P(true /* triggered by user left event */);\n                this._maybeClearSITimeout();\n            }\n        });\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(this.room, this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.restartInProgress = true;\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                this.p2pJingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled() || this.isP2PTestModeEnabled() || browser.isFirefox() || browser.isWebKitBased()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this.stopP2PSession();\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return this._e2eEncryption && this._e2eEncryption.isEnabled();\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\nJitsiConference.prototype.handleSubtitles = function() {\n\n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty(\"translation_language\");\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage[\"final\"] = json.text;\n                newTranscriptMessage[\"participantName\"] = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT  && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                   newTranscriptMessage = pastMessage;\n                }  else {\n                   newTranscriptMessage[\"participantName\"] = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage[\"final\"] = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage[\"stable\"] = text;\n                    newTranscriptMessage[\"unstable\"] = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage[\"unstable\"] = text;\n                }\n\n            }\n\n            let finalText = \"\";\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n                finalText = stable + unstable;\n            }\n\n            pastMessage = newTranscriptMessage;\n\n            this.emitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, newTranscriptMessage.transcriptMessageID, newTranscriptMessage.participantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n}\n\n// enable analytics\nJitsiConference.prototype.enableAnalytics = function() {\n   this.statistics.addAnalyticsEventListener((eventName, payload)=>{\n        let name  = '', body = {};\n        if ( typeof eventName === \"string\" ) {\n            name = eventName;\n            body = payload;\n        } else if (typeof eventName === \"object\"){\n            name  = eventName.name;\n            body = eventName\n        }\n\n        const finalPaylaod  = {\n            name,\n            action: body.action ? body.action : '',\n            actionSubject: body.actionSubject ? body.actionSubject : '',\n            source:body.source ? body.source : '',\n            attributes: JSON.stringify(payload)\n        };\n        this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, finalPaylaod);\n   });\n}\n\nJitsiConference.prototype.startLocalRecording = function(format=\"ogg\") {\n   this.recordingController.startRecording(format);\n}\n\nJitsiConference.prototype.stopLocalRecording = function() {\n   this.recordingController.stopRecording();\n}\n\nJitsiConference.prototype.switchFormat = function() {\n   this.recordingController.switchFormat(format);\n}\n\nJitsiConference.prototype.setMuted = function(muted) {\n   this.recordingController.setMuted(muted);\n}\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n   this.recordingController.setMicDevice(micDeviceId);\n}\n\nJitsiConference.prototype.startSIPVideoCall = function(sipAddress, displayName) {\n    if (this.sessions[sipAddress])  {\n        return;\n    }\n    const session = this.createVideoSIPGWSession(sipAddress, displayName);\n    this.sessions[sipAddress] = session;\n    session.start();\n}\n\nJitsiConference.prototype.stopSIPVideoCall = function(sipAddress) {\n    if (!this.sessions[sipAddress])  {\n        return;\n     }\n     this.sessions[sipAddress].stop();\n     delete this.sessions[sipAddress];\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            \n            if (conference.participants[dominant]?._hidden) {\n                return;\n            } \n\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return userAgent.match(/iP(ad|hone|od)/i\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform)));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global __filename, RTCRtpScriptTransform */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     */\n    constructor() {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"sriska-media-transport\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n        // synchronously load the JS.\n        const workerUrl = `${baseUrl}sriska-media-transport.e2ee-worker.js`;\n        const workerBlob\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n        const blobUrl = window.URL.createObjectURL(workerBlob);\n\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\n        this._worker.onerror = e => logger.onerror(e);\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            participantId,\n            key,\n            keyIndex\n        });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain && this.options.hiddenDomain.indexOf(jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'))) >= 0;\n                   \n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                    logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        // FIXME resend presence on CONNECTED\n        this.addAudioInfoToPresence(mute) && this.sendPresence();\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this.clean();\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._momderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage.bind(this));\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._momderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const newWhitelists = obj.whitelists;\n\n        if (newWhitelists) {\n            const fireEventApprovedJids = (mediaType, oldList, newList) => {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, mediaType, jid));\n            };\n\n            if (Array.isArray(newWhitelists[MediaType.AUDIO])) {\n                fireEventApprovedJids(MediaType.AUDIO, this._whitelistAudio, newWhitelists[MediaType.AUDIO]);\n            }\n\n            if (Array.isArray(newWhitelists[MediaType.VIDEO])) {\n                fireEventApprovedJids(MediaType.VIDEO, this._whitelistVideo, newWhitelists[MediaType.VIDEO]);\n            }\n        } else if (obj.enabled !== undefined && this._momderationEnabledByType[obj.mediaType] !== obj.enabled) {\n            this._momderationEnabledByType[obj.mediaType] = obj.enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, obj.enabled, obj.mediaType, obj.actor);\n        } else if (obj.approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, obj.mediaType);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     * @private\n     */\n    _leaveLobbyRoom() {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed let's join and leave lobby\n                        this.mainRoom.join(invitePassword);\n\n                        this._leaveLobbyRoom();\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this._leaveLobbyRoom();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: this.mainRoom.roomjid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","/* global $, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* global $, $build, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns nothing.\n */\nfunction expandSourcesFromJson(iq, jsonMessageXml) {\n\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return;\n    }\n\n    if (!json || !json.sources) {\n        // It might be a message of a different type, no need to log.\n        return;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const videoRtpDescription = getOrCreateRtpDescription(iq, 'video');\n    const audioRtpDescription = getOrCreateRtpDescription(iq, 'audio');\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources && ownerSources.length > 0 && ownerSources[0];\n            const videoSsrcGroups = ownerSources && ownerSources.length > 1 && ownerSources[1];\n            const audioSources = ownerSources && ownerSources.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources && ownerSources.length > 3 && ownerSources[3];\n\n            if (videoSources && videoSources.length > 0) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(createSourceExtension(owner, videoSources[i]));\n                }\n            }\n            if (videoSsrcGroups && videoSsrcGroups.length > 0) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources && audioSources.length > 0) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(createSourceExtension(owner, audioSources[i]));\n                }\n            }\n            if (audioSsrcGroups && audioSsrcGroups.length > 0) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n        }\n    }\n}\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Convert the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.debug(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages && jsonMessages.length > 0) {\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(iceConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace:\\t', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            v2Err => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1', v2Err);\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    v1Err => {\n                        logger.warn('getting turn credentials failed', v1Err);\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global __filename */\n\nimport async from 'async';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        // Do not prefer VP9 on Firefox because of the following bug.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\n        if (browser.isFirefox() && this.jvbPreferredCodec === CodecMimeType.VP9) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStared(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStared(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session.signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                // We do not want Firefox to switch to VP9 because of the following bug.\n                // https://bugzilla.mozilla.org/show_bug.cgi?id=1492500.\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && !(browser.isFirefox() && peerCodec === CodecMimeType.VP9)) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { Interop } from '@jitsi/sdp-interop';\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\nconst DESKTOP_SHARE_RATE = 500000;\nconst HD_BITRATE = 2500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, safeConstraints);\n\n    // The standard video bitrates are used in Unified plan when switching\n    // between camera/desktop tracks on the same sender.\n    const standardVideoBitrates = {\n        low: LD_BITRATE,\n        standard: SD_BITRATE,\n        high: HD_BITRATE\n    };\n\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n    // These bitrates will be applied on all browsers for camera sources in both simulcast and p2p mode.\n    this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\n        ? this.options.videoQuality.maxBitratesVideo\n        : standardVideoBitrates;\n\n    this.tpcUtils = new TPCUtils(this, this.videoBitrates);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: this._usesUnifiedPlan\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender.\n     */\n    this.senderVideoMaxHeight = null;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video track.\n *\n * @returns {JitsiLocalTrack|undefined} - local video track.\n */\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\n    return this.getLocalTracks(MediaType.VIDEO)[0];\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.videoBitrates[currentCodec.toUpperCase()] || this.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},type=${mediaType}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n\n        // The exisiting track needs to be removed here. We can get here when Jicofo reverses the order of source-add\n        // and source-remove messages. Ideally, when a remote endpoint changes source, like switching devices, it sends\n        // a source-remove (for old ssrc) followed by a source-add (for new ssrc) and Jicofo then should forward these\n        // two messages to all the other endpoints in the conference in the same order. However, sometimes, these\n        // messages arrive at the client in the reverse order resulting in two remote tracks (of same media type) being\n        // created and in case of video, a black strip (that of the first track which has ended) appears over the live\n        // track obscuring it. Removing the existing track when that happens will fix this issue.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(`${this} Removed track not found for stream[id=${streamId},trackId=${trackId}]`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the\n        // SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the\n * peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const track = this.getLocalVideoTrack();\n\n    return track && track.videoType === VideoType.DESKTOP;\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9) {\n            const bitrates = this.videoBitrates.VP9 || this.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    if (this._usesUnifiedPlan) {\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        const webrtcStream = track.getOriginalStream();\n\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    logger.info(`${this} Adding track=${track} as unmute`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.addTrackUnmute(track);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n\n            // Renegotiate when SDP is used for simulcast munging or when in p2p mode.\n            .then(() => (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()) || this.isP2P);\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.removeTrackMute(localTrack);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localSdp = this._mungeOpus(localSdp);\n\n    if (!this._usesUnifiedPlan) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else if (!this.isP2P) {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localSdp = this._mungeCodecOrder(localSdp);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sets the degradation preference on the video sender. This setting determines if\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\n * to 'maintain-resolution' when a desktop track is being shared instead.\n * @returns {Promise<void>}\n */\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\n    if (!this.peerconnection.getSenders) {\n        logger.debug(`${this} Browser does not support RTCRtpSender`);\n\n        return Promise.resolve();\n    }\n    const localVideoTrack = this.getLocalVideoTrack();\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n    const preference = this._isSharingLowFpsScreen()\n\n        // Prefer resolution for low fps share.\n        ? DEGRADATION_PREFERENCE_DESKTOP\n\n        // Prefer frame-rate for high fps share and camera.\n        : DEGRADATION_PREFERENCE_CAMERA;\n\n    logger.info(`${this} Setting a degradation preference [preference=${preference},track=${localVideoTrack}`);\n    parameters.degradationPreference = preference;\n    this.tpcUtils.updateEncodingsResolution(parameters);\n\n    return videoSender.setParameters(parameters);\n};\n\n/**\n * Sets the max bitrate on the RTCRtpSender so that the\n * bitrate of the enocder doesn't exceed the configured value.\n * This is needed for the desktop share until spec-complaint\n * simulcast is implemented.\n * @param {JitsiLocalTrack} localTrack - the local track whose\n * max bitrate is to be configured.\n * @returns {Promise<void>}\n */\nTraceablePeerConnection.prototype.setMaxBitRate = function() {\n    // For VP9, max bitrate is configured by setting b=AS value in SDP. Browsers do\n    // not yet support setting max bitrates for individual VP9 SVC layers.\n    if (this.getConfiguredVideoCodec() === CodecMimeType.VP9 || !window.RTCRtpSender) {\n        return Promise.resolve();\n    }\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack) {\n        return Promise.resolve();\n    }\n\n    const videoType = localVideoTrack.getVideoType();\n\n    // Apply the maxbitrates on the video track when one of the conditions is met.\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\n    // 2. Track is a low fps desktop track.\n    // 3. The client is running in Unified plan mode (the same sender is re-used for different types\n    // of tracks so bitrates have to be configured whenever the local tracks are replaced).\n    if (!(this.options?.videoQuality?.maxBitratesVideo || this._isSharingLowFpsScreen() || this._usesUnifiedPlan)) {\n        return Promise.resolve();\n    }\n\n    const presenterEnabled = localVideoTrack._originalStream\n        && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                const bitrate = this._isSharingLowFpsScreen()\n\n                    // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on.\n                    // FIXME the top 'isSimulcastOn' condition is confusing for screensharing, because\n                    // if capScreenshareBitrate option is enabled then simulcast is turned off for the stream.\n                    ? presenterEnabled ? HD_BITRATE : DESKTOP_SHARE_RATE\n\n                    // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome, because if simulcast is\n                    // enabled for screen and maxBitrates are set then Chrome will not send the desktop stream.\n                    : videoType === VideoType.DESKTOP && browser.isChromiumBased()\n                        ? undefined\n                        : this.tpcUtils.localStreamEncodingsConfig[encoding].maxBitrate;\n\n                logger.info(`${this} Setting a max bitrate of ${bitrate} bps on layer `\n                    + `${this.tpcUtils.localStreamEncodingsConfig[encoding].rid}`);\n                parameters.encodings[encoding].maxBitrate = bitrate;\n            }\n        }\n    } else {\n        // Do not change the max bitrate for desktop tracks in non-simulcast mode.\n        let bitrate = this.getTargetVideoBitrates()?.high;\n\n        if (videoType === VideoType.CAMERA) {\n            // Determine the bitrates based on the sender constraint applied for unicast tracks.\n            const scaleFactor = this.senderVideoMaxHeight\n                ? Math.floor(localVideoTrack.resolution / this.senderVideoMaxHeight)\n                : 1;\n            const encoding = this.tpcUtils.localStreamEncodingsConfig\n                .find(layer => layer.scaleResolutionDownBy === scaleFactor);\n\n            if (encoding) {\n                logger.info(`${this} Setting max bitrate=${encoding.maxBitrate} bps on track=${localVideoTrack}`);\n                bitrate = encoding.maxBitrate;\n            }\n        }\n        parameters.encodings[0].maxBitrate = bitrate;\n    }\n    this.tpcUtils.updateEncodingsResolution(parameters);\n\n    return videoSender.setParameters(parameters);\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    /* eslint-disable no-param-reassign */\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    description = this._mungeOpus(description);\n\n    /* eslint-enable no-param-reassign */\n\n    if (!this._usesUnifiedPlan) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else if (!this.isP2P) {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    // eslint-disable-next-line no-param-reassign\n    description = this._mungeCodecOrder(description);\n\n    if (this._usesUnifiedPlan) {\n        // eslint-disable-next-line no-param-reassign\n        description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on\n * the user preferred value. If simulcast is enabled on the peerconection, all the\n * simulcast encodings that have a resolution height lower or equal to the value\n * provided will remain active. For the non-simulcast case, video constraint is\n * applied on the track.\n * @param {number} frameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    // Need to explicitly check for null as 0 is falsy, but a valid value\n    const newHeight = frameHeight === null ? this.senderVideoMaxHeight : frameHeight;\n\n    this.senderVideoMaxHeight = newHeight;\n\n    // If layer suspension is disabled and sender constraint is not configured for the conference,\n    // resolve here so that the encodings stay enabled. This can happen in custom apps built using\n    // lib-jitsi-meet.\n    if (newHeight === null) {\n        return Promise.resolve();\n    }\n\n    logger.log(`${this} senderVideoMaxHeight: ${newHeight}`);\n\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    if (this.isSimulcastOn()) {\n        // Determine the encodings that need to stay enabled based on the new frameHeight provided.\n        this.encodingsEnabledState = this.tpcUtils.getLocalStreamHeightConstraints(localVideoTrack.track)\n            .map(height => height <= newHeight);\n\n        // Always keep the LD stream enabled, specifically when the LD stream's resolution is higher than of the\n        // requested resolution. This can happen when camera is captured at resolutions higher than 720p but the\n        // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n        // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n        const ldStreamIndex = this.tpcUtils.localStreamEncodingsConfig\n            .findIndex(layer => layer.scaleResolutionDownBy === 4.0);\n\n        if (newHeight > 0 && ldStreamIndex !== -1) {\n            this.encodingsEnabledState[ldStreamIndex] = true;\n        }\n\n        // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in progress\n        // There is no way to enable or disable simulcast during the call since we are re-using the same sender.\n        // Safari is an exception here since it does not send the desktop stream at all if only the high resolution\n        // stream is enabled.\n        if (this._isSharingLowFpsScreen() && this._usesUnifiedPlan && !browser.isWebKitBased()) {\n            const highResolutionEncoding = browser.isFirefox() ? 0 : this.encodingsEnabledState.length - 1;\n\n            this.encodingsEnabledState = this.encodingsEnabledState\n                .map((encoding, idx) => idx === highResolutionEncoding);\n        }\n\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n    } else if (newHeight > 0) {\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        parameters.encodings[0].scaleResolutionDownBy\n            = localVideoTrack.videoType === VideoType.DESKTOP || localVideoTrack.resolution <= newHeight\n                ? 1\n                : Math.floor(localVideoTrack.resolution / newHeight);\n        parameters.encodings[0].active = true;\n    } else {\n        parameters.encodings[0].scaleResolutionDownBy = undefined;\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${newHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = newHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n\n        // Max bitrate needs to be reconfigured on the sender in p2p/non-simulcast case if needed when\n        // the send resolution changes.\n        if (this.isP2P || !this.isSimulcastOn()) {\n            return this.setMaxBitRate();\n        }\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTrack();\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this._isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this._isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        ssrcLine.value\n                            = this._generateMsidAttribute(\n                                mediaSection.mLine?.type,\n                                streamAndTrackIDs[1],\n                                streamAndTrackIDs[0]);\n                    } else {\n                        logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists) {\n                    const generatedMsid = this._generateMsidAttribute(mediaSection.mLine?.type, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\n];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        logger.debug(`Track has been attached to a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        logger.debug(`Track has been detached from a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n        const reloadClient = this._conference.restartInProgress && enableForcedReload;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` restartInProgress: ${this._conference.restartInProgress},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || reloadClient) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.ICE_FAILED);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nexport class ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference._getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference._getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this.conference = conference;\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension ?? true;\n        this.rtc = rtc;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n        this.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => {\n                // Propagate the sender constraint only if it has changed.\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n                    this._senderVideoConstraints = videoConstraints;\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n\n        // Set the degradation preference on the local video track.\n        mediaSession.setSenderVideoDegradationPreference();\n\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\n        mediaSession.setSenderMaxBitrates();\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\n            : undefined;\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            if (speakerStatsToUpdate) {\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                    = newStats[userId].totalDominantSpeakerTime;\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const appData = {};\n        appData[\"base_url\"] = `${window.location.origin}${window.location.pathname}/`;\n        appData[\"token\"] =  this.chatRoom.connection.emuc.xmpp.token;\n        \n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n             sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","export function createNetworkInfoEvent({ isOnline, networkType, details }) {\n    const attributes = { isOnline };\n\n    // Do no include optional stuff or Amplitude handler will log warnings.\n    networkType && (attributes.networkType = networkType);\n    details && (attributes.details = details);\n\n    return {\n        action: 'network.info',\n        attributes\n    };\n}\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","\nvar Module = (function() {\n  var _scriptDir = \"https://sdk.sariska.io/\";\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\nnull;var Module=typeof Module!==\"undefined\"?Module:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":1,\"maximum\":1+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5340496,DYNAMICTOP_PTR=97456;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile=\"rnnoise.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap,\"memory\":wasmMemory,\"table\":wasmTable};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"c\"]).apply(null,arguments)};var _rnnoise_init=Module[\"_rnnoise_init\"]=function(){return(_rnnoise_init=Module[\"_rnnoise_init\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _rnnoise_create=Module[\"_rnnoise_create\"]=function(){return(_rnnoise_create=Module[\"_rnnoise_create\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _rnnoise_destroy=Module[\"_rnnoise_destroy\"]=function(){return(_rnnoise_destroy=Module[\"_rnnoise_destroy\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=function(){return(_rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff ouput\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","var createTFLiteModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,u={};for(o in a)a.hasOwnProperty(o)&&(u[o]=a[o]);var s,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,s=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!s&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||U(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in u)u.hasOwnProperty(o)&&(a[o]=u[o]);u=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&U(\"no native wasm support detected\");var _=!1;var A,E,R,I,M=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function O(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&M)return M.decode(e.subarray(n,a));for(var o=\"\";n<a;){var u=e[n++];if(128&u){var s=63&e[n++];if(192!=(224&u)){var i=63&e[n++];if((u=224==(240&u)?(15&u)<<12|s<<6|i:(7&u)<<18|s<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(u);else{var c=u-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&u)<<6|s)}else o+=String.fromCharCode(u)}return o}function C(e){A=e,a.HEAP8=E=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=I=new Int32Array(e),a.HEAPU8=R=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var S,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,L=null,k=null;function U(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function j(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var F=\"data:application/octet-stream;base64,\";function D(e){return j(e,F)}var q=\"file://\";function B(e){return j(e,q)}var N,G=\"https://sdk.sariska.io/tflite.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){U(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?S.get(t)():S.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}D(G)||(G=G),N=s?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return I[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),C(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(O(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,I[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?O(R,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){U()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return I[n>>2]=t/1e3|0,I[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){R.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=R.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;I[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)E[n++>>0]=e.charCodeAt(r);t||(E[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();I[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),I[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var u=I[n+8*o>>2],s=I[n+(8*o+4)>>2],i=0;i<s;i++)Z.printChar(e,R[u+i]);a+=s}return I[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,C((v=a.asm.q).buffer),S=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==L&&(clearInterval(L),L=null),k)){var n=k;k=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),U(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||D(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(k=function e(){$||ae(),$||(k=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteModule}):\"object\"==typeof exports&&(exports.createTFLiteModule=createTFLiteModule);","var createTFLiteSIMDModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,s={};for(o in a)a.hasOwnProperty(o)&&(s[o]=a[o]);var u,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!u&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||k(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in s)s.hasOwnProperty(o)&&(a[o]=s[o]);s=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&k(\"no native wasm support detected\");var _=!1;var A,I,M,E,R=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function S(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&R)return R.decode(e.subarray(n,a));for(var o=\"\";n<a;){var s=e[n++];if(128&s){var u=63&e[n++];if(192!=(224&s)){var i=63&e[n++];if((s=224==(240&s)?(15&s)<<12|u<<6|i:(7&s)<<18|u<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(s);else{var c=s-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&s)<<6|u)}else o+=String.fromCharCode(s)}return o}function O(e){A=e,a.HEAP8=I=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=E=new Int32Array(e),a.HEAPU8=M=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var C,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,D=null,L=null;function k(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function U(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var j=\"data:application/octet-stream;base64,\";function F(e){return U(e,j)}var q=\"file://\";function B(e){return U(e,q)}var N,G=\"https://sdk.sariska.io/tflite-simd.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){k(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?C.get(t)():C.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}F(G)||(G=G),N=u?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return E[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),O(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(S(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,E[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?S(M,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){k()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return E[n>>2]=t/1e3|0,E[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){M.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=M.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;E[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)I[n++>>0]=e.charCodeAt(r);t||(I[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();E[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),E[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var s=E[n+8*o>>2],u=E[n+(8*o+4)>>2],i=0;i<u;i++)Z.printChar(e,M[s+i]);a+=u}return E[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,O((v=a.asm.q).buffer),C=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),L)){var n=L;L=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),k(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||F(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(L=function e(){$||ae(),$||(L=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteSIMDModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteSIMDModule}):\"object\"==typeof exports&&(exports.createTFLiteSIMDModule=createTFLiteSIMDModule);","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = media[type].sources.concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","import Bourne from '@hapi/bourne';\n\n/**\n * A list if keys to ignore when parsing.\n * @type {string[]}\n */\n\nconst blacklist = [ '__proto__', 'constructor', 'prototype' ];\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {URL} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\n\nexport function parseURLParams(dontParse = true) {\n    const paramStr = location.search ? location.search : location.hash;\n    const params = {};\n    const paramParts = paramStr && paramStr.substr(1)\n        .split('&') || []; // Detect and ignore hash params for hash routers.\n\n    if (location.hash && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key || blacklist.includes(key.split('.')[0])) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value)\n                    .replace(/\\\\&/, '&');\n                value = decoded === 'undefined' ? undefined : Bourne.parse(decoded);\n            }\n        } catch (e) {\n            console.log(`Failed to parse URL parameter value: ${String(value)}`);\n            return;\n        }\n\n        params[key] = value;\n    });\n    return params;\n}\n\n\nexport function syncWithURL(conferenceConfig) {\n    const params = parseURLParams();\n    Object.keys(params)\n        .forEach(param => {\n            const key = param.replace('config.', '');\n            switch (key) {\n            case 'analytics.disabled':\n                conferenceConfig.analytics.disabled = params[param];\n                break;\n            case 'startWithAudioMuted':\n                conferenceConfig.startAudioMuted = params[param];\n                break;\n            case 'startWithVideoMuted':\n                conferenceConfig.startVideoMuted = params[param];\n                break;\n            case 'p2p.enabled':\n                conferenceConfig.p2p.enabled = params[param];\n                break;\n            default:\n                conferenceConfig[key] = params[param];\n            }\n        });\n    return conferenceConfig;\n}\n\n\n\n\n\n\n\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\nimport {connectionConfig, conferenceConfig} from './config';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\nimport {syncWithURL} from \"./modules/util/parseURLParams\";\nexport const DISCO_JIBRI_FEATURE = 'http://jitsi.org/protocol/jibri';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, options={}) {\n    options = {...connectionConfig, ...options};\n\n    this.token = token;\n    const jwt = this.parseJwt(token);\n    this.name = jwt ? jwt.room : null;\n    this.user = jwt.context.user;\n    this.options = options;\n    this.xmpp = new XMPP(options, token, this.name);\n    this.token = token;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n        return JSON.parse(atob(token.split('.')[1]));\n    }\n    catch (e) {\n        return null;\n    }\n};\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n\n    const usernameOverride\n        = jitsiLocalStorage.getItem('xmpp_username_override');\n    const passwordOverride\n        = jitsiLocalStorage.getItem('xmpp_password_override');\n\n    if (usernameOverride && usernameOverride.length > 0) {\n        options.id = usernameOverride; // eslint-disable-line no-param-reassign\n    }\n    if (passwordOverride && passwordOverride.length > 0) {\n        options.password = passwordOverride; // eslint-disable-line no-param-reassign\n    }\n\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = {...conferenceConfig, ...options};\n    options  = syncWithURL(options);\n    const name  = this.name;\n    if (options.iAmRecorder) {\n        this.addFeature(DISCO_JIBRI_FEATURE);\n    }\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./SariskaMediaTransport').default;\n","import jQuery from \"../core.js\";\n\n(global => {\n    if (typeof global.$ === 'undefined') {\n        global.$ = jQuery;\n    }\n})(global || window || this); // eslint-disable-line no-invalid-this","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(global = global || self, factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\n\t/**\n\t* StropheJS - Stream Management XEP-0198\n\t*\n\t* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n\t* Note: Resumption is not supported in this current implementation.\n\t*\n\t* Reference: http://xmpp.org/extensions/xep-0198.html\n\t*\n\t* @class streamManagement\n\t*/\n\tstrophe_js.Strophe.addConnectionPlugin('streamManagement', {\n\n\t\t/**\n\t\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t\t*/\n\t\tlogging: false,\n\n\t\t/**\n\t\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tautoSendCountOnEveryIncomingStanza: false,\n\n\t\t/**\n\t\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t\t* number of stanzas sent. Set to 0 to disable.\n\t\t* @default 5\n\t\t* @public\n\t\t*/\n\t\trequestResponseInterval: 5,\n\n\t\t/**\n\t\t* @property {Pointer} _c: Strophe connection instance.\n\t\t* @private\n\t\t*/\n\t\t_c: null,\n\n\t\t/**\n\t\t* @property {String} _NS XMPP Namespace.\n\t\t* @private\n\t\t*/\n\t\t_NS: 'urn:xmpp:sm:3',\n\n\t\t/**\n\t\t* @property {Boolean} _isStreamManagementEnabled\n\t\t* @private\n\t\t*/\n\t\t_isStreamManagementEnabled: false,\n\n\t\t/**\n\t\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t\t* from the server.\n\t\t* @private\n\t\t*/\n\t\t_serverProcesssedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t\t* the server.\n\t\t* @private\n\t\t*/\n\t\t_clientProcessedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientSentStanzasCounter\n\t\t* @private\n\t\t*/\n\t\t_clientSentStanzasCounter: null,\n\n\t\t/**\n\t\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t\t* @method _originalXMLOutput\n\t\t* @type {Handler}\n\t\t* @private\n\t\t*/\n\t\t_originalXMLOutput: null,\n\n\t\t/**\n\t\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t\t* @private\n\t\t*/\n\t\t_requestHandler: null,\n\n\t\t/**\n\t\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t\t* @private\n\t\t*/\n\t\t_incomingHandler: null,\n\n\t\t/**\n\t\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t\t*/\n\t\t_requestResponseIntervalCount: 0,\n\n\t\t/**\n\t\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t\t * management namespace.\n\t\t */\n\t\t_isSupported: false,\n\n\t\t/**\n\t\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t\t*/\n\t\t_unacknowledgedStanzas: [],\n\n\t\t/**\n\t\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t\t* Provides the packet id of the stanza as a parameter.\n\t\t* @private\n\t\t*/\n\t\t_acknowledgedStanzaListeners: [],\n\n\t\taddAcknowledgedStanzaListener: function(listener) {\n\t\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t\t},\n\n\t\tenable: function(resume) {\n\t\t\tif (!this._isSupported) {\n\t\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t\t} else if (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._c.send(strophe_js.$build('enable', { xmlns: this._NS, resume }));\n\t\t\tthis._c.flush();\n\t\t\tthis._c.pause();\n\t\t},\n\n\t\tgetResumeToken: function() {\n\t\t\treturn this._resumeToken;\n\t\t},\n\n\t\tisSupported() {\n\t\t\treturn this._isSupported;\n\t\t},\n\n\t\tresume: function() {\n\t\t\tif (!this.getResumeToken()) {\n\t\t\t\tthrow new Error('No resume token');\n\t\t\t}\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t\t}\n\n\t\t\tthis._c.options.explicitResourceBinding = true;\n\t\t\tthis._resuming = true;\n\n\t\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t\t},\n\n\t\trequestAcknowledgement: function() {\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\tthis._c.send(strophe_js.$build('r', { xmlns: this._NS }));\n\t\t},\n\n\t\tgetOutgoingCounter: function() {\n\t\t\treturn this._clientSentStanzasCounter;\n\t\t},\n\n\t\tgetIncomingCounter: function() {\n\t\t\treturn this._clientProcessedStanzasCounter;\n\t\t},\n\n\t\tinit: function(conn) {\n\t\t\tthis._c = conn;\n\t\t\tstrophe_js.Strophe.addNamespace('SM', this._NS);\n\n\t\t\t// Storing original xmlOutput function to use additional logic\n\t\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\t\tthis._originalConnect = this._c.connect;\n\t\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\t\tthis._originalDisconnect = this._c.disconnect;\n\t\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t\t},\n\n\t\t_interceptDisconnect: function() {\n\t\t\tthis._resumeToken = undefined;\n\t\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptDoDisconnect: function() {\n\t\t\tif (this.getResumeToken()\n\t\t\t\t\t&& !this._resuming\n\t\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\t\tthis._resumeState = {\n\t\t\t\t\thandlers: this._c.handlers,\n\t\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t\t};\n\t\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t\t}\n\n\t\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\t\tthis._c._data = [];\n\n\t\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptConnectArgs: function() {\n\t\t\tthis._connectArgs = arguments;\n\n\t\t\tthis._originalConnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t\t},\n\n\t\tstatusChanged: function (status) {\n\t\t\tthis._connectionStatus = status;\n\t\t\tif (!this.getResumeToken()\n\t\t\t\t&& (status === strophe_js.Strophe.Status.CONNECTED || status === strophe_js.Strophe.Status.DISCONNECTED)) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM reset state');\n\n\t\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t\t// FIXME not described in JSDocs\n\t\t\t\tthis._resuming = false;\n\n\t\t\t\tif (status === strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\t\tthis._isSupported = false;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\t\tif (this._requestHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t\t}\n\n\t\t\t\tif (this._incomingHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t\t}\n\n\t\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t\t// FIXME handler instances stored, but never used\n\t\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t\t} else if (status === strophe_js.Strophe.Status.BINDREQUIRED)  {\n\t\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t\t// Restore Strophe handlers\n\t\t\t\tfor (const property in this._resumeState) {\n\t\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t\t}\n\n\t\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\t\tthis._c.send(strophe_js.$build('resume', {\n\t\t\t\t\txmlns: this._NS,\n\t\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\t\tprevid: this._resumeToken\n\t\t\t\t}));\n\t\t\t\tthis._c.flush();\n\t\t\t} else if (status === strophe_js.Strophe.Status.ERROR) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM cleared resume token on error');\n\t\t\t\tthis._resumeToken = undefined;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* This method overrides the send method implemented by Strophe.Connection\n\t\t* to count outgoing stanzas\n\t\t*\n\t\t* @method Send\n\t\t* @public\n\t\t*/\n\t\txmlOutput: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'presence') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'message')) {\n\t\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t\t}\n\n\t\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t\t},\n\n\t\t_handleEnabled: function(elem) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\t// FIXME fail if requested, but not enabled\n\t\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\t\tthis._c.resume();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumeFailed: function(elem) {\n\t\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.ERROR, error, elem);\n\t\t\tthis._c._doDisconnect();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumed: function(elem) {\n\t\t\t// FIXME check if in the correct state\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\tthis._resuming = false;\n\t\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\t\tthis._c.authenticated = true;\n\t\t\tthis._c.restored = true;\n\n\t\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\t\tthis._c.send(stanza);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.CONNECTED, null);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_incomingStanzaHandler: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') || strophe_js.Strophe.isTagEqual(elem, 'presence') || strophe_js.Strophe.isTagEqual(elem, 'message'))  {\n\t\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\t\tif (delta < 0) {\n\t\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < delta; i++) {\n\t\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tstrophe_js.Strophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t},\n\n\t\t_handleServerRequestHandler: function() {\n\t\t\tthis._answerProcessedStanzas();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleServerAck: function(elem){\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_answerProcessedStanzas: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._c.send(strophe_js.$build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t\t}\n\t\t},\n\n\t\t_increaseSentStanzasCounter: function(elem) {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (this._connectionStatus === strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_increaseReceivedStanzasCounter: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t\t}\n\t\t},\n\n\t\t_throwError: function(msg) {\n\t\t\tstrophe_js.Strophe.error(msg);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t});\n\n})));\n//# sourceMappingURL=strophe.stream-management.js.map\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst Word = require('../word');\n\nconst audioRecorder = require('./../audioRecorder');\nconst TranscriptionService = require('./AbstractTranscriptionService');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","\"use strict\";function e(e,r){if(!s)return!1;const n=e.buffer;let u=g.get(n);if(null==u){if((u=t.validate(n))&&r)try{new t.Instance(new t.Module(n)).exports[0]()}catch(e){u=!1}g.set(n,u)}return u}const t=WebAssembly,r=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),n=(...e)=>Uint32Array.of(1836278016,1,...e),u=(...e)=>n(1610679297,33751040,...e,40239360,259),i=(...e)=>r(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),o=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),a=(...e)=>o(...e,2842,4096,28164,28001,357,260,256,560,259,0),s=\"object\"==typeof t,f=e=>s&&\"function\"==typeof e,g=new WeakMap,l=n(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=o(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),p=n(1610679297,33751040,134873089,100664833,185276736),y=r(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),b=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),m=a(3082,2561,17152,0,0,252),A=a(2058,1537,16640,49152),d=u(101318657,301990913,268438272,1835101700,17039717),U=i(5,4,1,3,1,1,10,7,1,5,0,254,3,0),x=u(84344833,6357249,17369600,4259847,186257917,1845758464),w=i(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>s&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return f(t.instantiateStreaming)},feature:{get bigInt(){return e(l,!0)},get bulk(){return e(c)},get exceptions(){return e(p)},get mutableGlobal(){return e(y)},get multiValue(){return e(b)},get saturateConversions(){return e(m)},get signExtensions(){return e(A)},get tailCall(){return e(d)},get threads(){return e(U)},get simd(){return e(x)},get references(){return e(w)},get typeReflection(){return f(t.Memory.type)},get funcReferences(){return f(t.Function)}}};","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}